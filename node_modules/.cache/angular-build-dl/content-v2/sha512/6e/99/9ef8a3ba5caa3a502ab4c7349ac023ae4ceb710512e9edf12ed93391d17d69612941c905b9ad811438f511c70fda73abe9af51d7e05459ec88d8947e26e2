{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js"],"names":["SimpleSnackBar_div_2_Template","rf","ctx","_r2","SimpleSnackBar_div_2_Template_button_click_1_listener","ctx_r1","action","ctx_r0","data","MatSnackBarContainer_ng_template_1_Template","MAT_SNACK_BAR_DATA","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","Subject","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","next","complete","dismissWithAction","setTimeout","min","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","ɵfac","SimpleSnackBar_Factory","t","ɵcmp","type","selectors","hostAttrs","decls","vars","consts","template","SimpleSnackBar_Template","message","hasAction","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","Inject","args","ngDevMode","Component","selector","ViewEncapsulation","ChangeDetectionStrategy","host","matSnackBarAnimations","snackBarState","trigger","state","style","transform","opacity","transition","animate","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","run","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","onMicrotaskEmpty","pipe","take","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","BasePortalOutlet","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","CdkPortalOutlet","_t","first","hostVars","hostBindings","MatSnackBarContainer_HostBindings","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","features","MatSnackBarContainer_Template","animation","NgZone","ElementRef","ChangeDetectorRef","Platform","propDecorators","ViewChild","animations","MatSnackBarModule","MatSnackBarModule_Factory","ɵmod","ɵinj","imports","OverlayModule","PortalModule","CommonModule","MatButtonModule","MatCommonModule","NgModule","exports","declarations","entryComponents","ngJitMode","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","parent","_openedSnackBarRef","value","component","config","_attach","_config","Object","assign","openFromComponent","overlayRef","userInjector","viewContainerRef","injector","Injector","providers","provide","useValue","containerPortal","ComponentPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","observe","Breakpoints","takeUntil","detachments","overlayElement","matches","remove","announce","_animateSnackBar","afterDismissed","clear","enter","afterOpened","_dismissAfter","overlayConfig","OverlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","create","MatSnackBar_Factory","ɵprov","token","Overlay","LiveAnnouncer","BreakpointObserver","Optional","SkipSelf","Injectable"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_snack-bar_js-es5.js","sourcesContent":["import * as i1 from '@angular/cdk/overlay';\r\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\r\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\r\nimport { CommonModule } from '@angular/common';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Subject } from 'rxjs';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport * as i2 from '@angular/cdk/a11y';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport * as i3 from '@angular/cdk/layout';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/common';\r\nimport * as ɵngcc2 from '@angular/material/button';\r\nimport * as ɵngcc3 from '@angular/cdk/platform';\r\nimport * as ɵngcc4 from '@angular/cdk/portal';\r\nimport * as ɵngcc5 from '@angular/cdk/overlay';\r\nimport * as ɵngcc6 from '@angular/cdk/a11y';\r\nimport * as ɵngcc7 from '@angular/cdk/layout';\r\n\r\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\r\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\r\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\r\n    ɵngcc0.ɵɵtext(2);\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\r\n} }\r\nfunction MatSnackBarContainer_ng_template_1_Template(rf, ctx) { }\r\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\r\n/**\r\n * Configuration used when opening a snack-bar.\r\n */\r\nclass MatSnackBarConfig {\r\n    constructor() {\r\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\r\n        this.politeness = 'assertive';\r\n        /**\r\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\r\n         * component or template, the announcement message will default to the specified message.\r\n         */\r\n        this.announcementMessage = '';\r\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\r\n        this.duration = 0;\r\n        /** Data being injected into the child component. */\r\n        this.data = null;\r\n        /** The horizontal position to place the snack bar. */\r\n        this.horizontalPosition = 'center';\r\n        /** The vertical position to place the snack bar. */\r\n        this.verticalPosition = 'bottom';\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\r\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n */\r\nclass MatSnackBarRef {\r\n    constructor(containerInstance, _overlayRef) {\r\n        this._overlayRef = _overlayRef;\r\n        /** Subject for notifying the user that the snack bar has been dismissed. */\r\n        this._afterDismissed = new Subject();\r\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\r\n        this._afterOpened = new Subject();\r\n        /** Subject for notifying the user that the snack bar action was called. */\r\n        this._onAction = new Subject();\r\n        /** Whether the snack bar was dismissed using the action button. */\r\n        this._dismissedByAction = false;\r\n        this.containerInstance = containerInstance;\r\n        // Dismiss snackbar on action.\r\n        this.onAction().subscribe(() => this.dismiss());\r\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\r\n    }\r\n    /** Dismisses the snack bar. */\r\n    dismiss() {\r\n        if (!this._afterDismissed.closed) {\r\n            this.containerInstance.exit();\r\n        }\r\n        clearTimeout(this._durationTimeoutId);\r\n    }\r\n    /** Marks the snackbar action clicked. */\r\n    dismissWithAction() {\r\n        if (!this._onAction.closed) {\r\n            this._dismissedByAction = true;\r\n            this._onAction.next();\r\n            this._onAction.complete();\r\n        }\r\n        clearTimeout(this._durationTimeoutId);\r\n    }\r\n    /**\r\n     * Marks the snackbar action clicked.\r\n     * @deprecated Use `dismissWithAction` instead.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    closeWithAction() {\r\n        this.dismissWithAction();\r\n    }\r\n    /** Dismisses the snack bar after some duration */\r\n    _dismissAfter(duration) {\r\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\r\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\r\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\r\n    }\r\n    /** Marks the snackbar as opened */\r\n    _open() {\r\n        if (!this._afterOpened.closed) {\r\n            this._afterOpened.next();\r\n            this._afterOpened.complete();\r\n        }\r\n    }\r\n    /** Cleans up the DOM after closing. */\r\n    _finishDismiss() {\r\n        this._overlayRef.dispose();\r\n        if (!this._onAction.closed) {\r\n            this._onAction.complete();\r\n        }\r\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\r\n        this._afterDismissed.complete();\r\n        this._dismissedByAction = false;\r\n    }\r\n    /** Gets an observable that is notified when the snack bar is finished closing. */\r\n    afterDismissed() {\r\n        return this._afterDismissed;\r\n    }\r\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\r\n    afterOpened() {\r\n        return this.containerInstance._onEnter;\r\n    }\r\n    /** Gets an observable that is notified when the snack bar action is called. */\r\n    onAction() {\r\n        return this._onAction;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\nclass SimpleSnackBar {\r\n    constructor(snackBarRef, data) {\r\n        this.snackBarRef = snackBarRef;\r\n        this.data = data;\r\n    }\r\n    /** Performs the action on the snack bar. */\r\n    action() {\r\n        this.snackBarRef.dismissWithAction();\r\n    }\r\n    /** If the action button should be shown. */\r\n    get hasAction() {\r\n        return !!this.data.action;\r\n    }\r\n}\r\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\r\nSimpleSnackBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"span\");\r\n        ɵngcc0.ɵɵtext(1);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\r\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\r\nSimpleSnackBar.ctorParameters = () => [\r\n    { type: MatSnackBarRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'simple-snack-bar',\r\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'class': 'mat-simple-snackbar'\r\n                },\r\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SNACK_BAR_DATA]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Animations used by the Material snack bar.\r\n * @docs-private\r\n */\r\nconst matSnackBarAnimations = {\r\n    /** Animation that shows and hides a snack bar. */\r\n    snackBarState: trigger('state', [\r\n        state('void, hidden', style({\r\n            transform: 'scale(0.8)',\r\n            opacity: 0,\r\n        })),\r\n        state('visible', style({\r\n            transform: 'scale(1)',\r\n            opacity: 1,\r\n        })),\r\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\r\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\r\n            opacity: 0\r\n        }))),\r\n    ])\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\nclass MatSnackBarContainer extends BasePortalOutlet {\r\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \r\n    /** The snack bar configuration. */\r\n    snackBarConfig) {\r\n        super();\r\n        this._ngZone = _ngZone;\r\n        this._elementRef = _elementRef;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._platform = _platform;\r\n        this.snackBarConfig = snackBarConfig;\r\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\r\n        this._announceDelay = 150;\r\n        /** Whether the component has been destroyed. */\r\n        this._destroyed = false;\r\n        /** Subject for notifying that the snack bar has announced to screen readers. */\r\n        this._onAnnounce = new Subject();\r\n        /** Subject for notifying that the snack bar has exited from view. */\r\n        this._onExit = new Subject();\r\n        /** Subject for notifying that the snack bar has finished entering the view. */\r\n        this._onEnter = new Subject();\r\n        /** The state of the snack bar animations. */\r\n        this._animationState = 'void';\r\n        /**\r\n         * Attaches a DOM portal to the snack bar container.\r\n         * @deprecated To be turned into a method.\r\n         * @breaking-change 10.0.0\r\n         */\r\n        this.attachDomPortal = (portal) => {\r\n            this._assertNotAttached();\r\n            this._applySnackBarClasses();\r\n            return this._portalOutlet.attachDomPortal(portal);\r\n        };\r\n        // Use aria-live rather than a live role like 'alert' or 'status'\r\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\r\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\r\n            this._live = 'assertive';\r\n        }\r\n        else if (snackBarConfig.politeness === 'off') {\r\n            this._live = 'off';\r\n        }\r\n        else {\r\n            this._live = 'polite';\r\n        }\r\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\r\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\r\n        if (this._platform.FIREFOX) {\r\n            if (this._live === 'polite') {\r\n                this._role = 'status';\r\n            }\r\n            if (this._live === 'assertive') {\r\n                this._role = 'alert';\r\n            }\r\n        }\r\n    }\r\n    /** Attach a component portal as content to this snack bar container. */\r\n    attachComponentPortal(portal) {\r\n        this._assertNotAttached();\r\n        this._applySnackBarClasses();\r\n        return this._portalOutlet.attachComponentPortal(portal);\r\n    }\r\n    /** Attach a template portal as content to this snack bar container. */\r\n    attachTemplatePortal(portal) {\r\n        this._assertNotAttached();\r\n        this._applySnackBarClasses();\r\n        return this._portalOutlet.attachTemplatePortal(portal);\r\n    }\r\n    /** Handle end of animations, updating the state of the snackbar. */\r\n    onAnimationEnd(event) {\r\n        const { fromState, toState } = event;\r\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\r\n            this._completeExit();\r\n        }\r\n        if (toState === 'visible') {\r\n            // Note: we shouldn't use `this` inside the zone callback,\r\n            // because it can cause a memory leak.\r\n            const onEnter = this._onEnter;\r\n            this._ngZone.run(() => {\r\n                onEnter.next();\r\n                onEnter.complete();\r\n            });\r\n        }\r\n    }\r\n    /** Begin animation of snack bar entrance into view. */\r\n    enter() {\r\n        if (!this._destroyed) {\r\n            this._animationState = 'visible';\r\n            this._changeDetectorRef.detectChanges();\r\n            this._screenReaderAnnounce();\r\n        }\r\n    }\r\n    /** Begin animation of the snack bar exiting from view. */\r\n    exit() {\r\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\r\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\r\n        // `MatSnackBar.open`).\r\n        this._animationState = 'hidden';\r\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\r\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\r\n        // test harness.\r\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\r\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\r\n        // long enough to visually read it either, so clear the timeout for announcing.\r\n        clearTimeout(this._announceTimeoutId);\r\n        return this._onExit;\r\n    }\r\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n    ngOnDestroy() {\r\n        this._destroyed = true;\r\n        this._completeExit();\r\n    }\r\n    /**\r\n     * Waits for the zone to settle before removing the element. Helps prevent\r\n     * errors where we end up removing an element which is in the middle of an animation.\r\n     */\r\n    _completeExit() {\r\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\r\n            this._onExit.next();\r\n            this._onExit.complete();\r\n        });\r\n    }\r\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\r\n    _applySnackBarClasses() {\r\n        const element = this._elementRef.nativeElement;\r\n        const panelClasses = this.snackBarConfig.panelClass;\r\n        if (panelClasses) {\r\n            if (Array.isArray(panelClasses)) {\r\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\r\n            }\r\n            else {\r\n                element.classList.add(panelClasses);\r\n            }\r\n        }\r\n        if (this.snackBarConfig.horizontalPosition === 'center') {\r\n            element.classList.add('mat-snack-bar-center');\r\n        }\r\n        if (this.snackBarConfig.verticalPosition === 'top') {\r\n            element.classList.add('mat-snack-bar-top');\r\n        }\r\n    }\r\n    /** Asserts that no content is already attached to the container. */\r\n    _assertNotAttached() {\r\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw Error('Attempting to attach snack bar content after content is already attached');\r\n        }\r\n    }\r\n    /**\r\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\r\n     * announce it.\r\n     */\r\n    _screenReaderAnnounce() {\r\n        if (!this._announceTimeoutId) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this._announceTimeoutId = setTimeout(() => {\r\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\r\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\r\n                    if (inertElement && liveElement) {\r\n                        // If an element in the snack bar content is focused before being moved\r\n                        // track it and restore focus after moving to the live region.\r\n                        let focusedElement = null;\r\n                        if (this._platform.isBrowser &&\r\n                            document.activeElement instanceof HTMLElement &&\r\n                            inertElement.contains(document.activeElement)) {\r\n                            focusedElement = document.activeElement;\r\n                        }\r\n                        inertElement.removeAttribute('aria-hidden');\r\n                        liveElement.appendChild(inertElement);\r\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\r\n                        this._onAnnounce.next();\r\n                        this._onAnnounce.complete();\r\n                    }\r\n                }, this._announceDelay);\r\n            });\r\n        }\r\n    }\r\n}\r\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\r\nMatSnackBarContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\r\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 1, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\r\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, MatSnackBarContainer_ng_template_1_Template, 0, 0, \"ng-template\", 1);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelement(2, \"div\");\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role);\r\n    } }, directives: [ɵngcc4.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\r\nMatSnackBarContainer.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: Platform },\r\n    { type: MatSnackBarConfig }\r\n];\r\nMatSnackBarContainer.propDecorators = {\r\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'snack-bar-container',\r\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\r\n                // In Ivy embedded views will be change detected from their declaration place, rather than\r\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\r\n                // because it might cause snack bars that were opened from a template not to be out of date.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None,\r\n                animations: [matSnackBarAnimations.snackBarState],\r\n                host: {\r\n                    'class': 'mat-snack-bar-container',\r\n                    '[@state]': '_animationState',\r\n                    '(@state.done)': 'onAnimationEnd($event)'\r\n                },\r\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc3.Platform }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\r\n            type: ViewChild,\r\n            args: [CdkPortalOutlet, { static: true }]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatSnackBarModule {\r\n}\r\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); };\r\nMatSnackBarModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\r\nMatSnackBarModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\r\n            OverlayModule,\r\n            PortalModule,\r\n            CommonModule,\r\n            MatButtonModule,\r\n            MatCommonModule,\r\n        ], MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    OverlayModule,\r\n                    PortalModule,\r\n                    CommonModule,\r\n                    MatButtonModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [MatSnackBarContainer, MatCommonModule],\r\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\r\n        PortalModule,\r\n        CommonModule,\r\n        MatButtonModule,\r\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token that can be used to specify default snack bar. */\r\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\r\n    return new MatSnackBarConfig();\r\n}\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\nclass MatSnackBar {\r\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\r\n        this._overlay = _overlay;\r\n        this._live = _live;\r\n        this._injector = _injector;\r\n        this._breakpointObserver = _breakpointObserver;\r\n        this._parentSnackBar = _parentSnackBar;\r\n        this._defaultConfig = _defaultConfig;\r\n        /**\r\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n         * If there is a parent snack-bar service, all operations should delegate to that parent\r\n         * via `_openedSnackBarRef`.\r\n         */\r\n        this._snackBarRefAtThisLevel = null;\r\n        /** The component that should be rendered as the snack bar's simple component. */\r\n        this.simpleSnackBarComponent = SimpleSnackBar;\r\n        /** The container component that attaches the provided template or component. */\r\n        this.snackBarContainerComponent = MatSnackBarContainer;\r\n        /** The CSS class to apply for handset mode. */\r\n        this.handsetCssClass = 'mat-snack-bar-handset';\r\n    }\r\n    /** Reference to the currently opened snackbar at *any* level. */\r\n    get _openedSnackBarRef() {\r\n        const parent = this._parentSnackBar;\r\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n    }\r\n    set _openedSnackBarRef(value) {\r\n        if (this._parentSnackBar) {\r\n            this._parentSnackBar._openedSnackBarRef = value;\r\n        }\r\n        else {\r\n            this._snackBarRefAtThisLevel = value;\r\n        }\r\n    }\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @param component Component to be instantiated.\r\n     * @param config Extra configuration for the snack bar.\r\n     */\r\n    openFromComponent(component, config) {\r\n        return this._attach(component, config);\r\n    }\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @param template Template to be instantiated.\r\n     * @param config Extra configuration for the snack bar.\r\n     */\r\n    openFromTemplate(template, config) {\r\n        return this._attach(template, config);\r\n    }\r\n    /**\r\n     * Opens a snackbar with a message and an optional action.\r\n     * @param message The message to show in the snackbar.\r\n     * @param action The label for the snackbar action.\r\n     * @param config Additional configuration options for the snackbar.\r\n     */\r\n    open(message, action = '', config) {\r\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\r\n        // Since the user doesn't have access to the component, we can\r\n        // override the data to pass in our own message and action.\r\n        _config.data = { message, action };\r\n        // Since the snack bar has `role=\"alert\"`, we don't\r\n        // want to announce the same message twice.\r\n        if (_config.announcementMessage === message) {\r\n            _config.announcementMessage = undefined;\r\n        }\r\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\r\n    }\r\n    /**\r\n     * Dismisses the currently-visible snack bar.\r\n     */\r\n    dismiss() {\r\n        if (this._openedSnackBarRef) {\r\n            this._openedSnackBarRef.dismiss();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        // Only dismiss the snack bar at the current level on destroy.\r\n        if (this._snackBarRefAtThisLevel) {\r\n            this._snackBarRefAtThisLevel.dismiss();\r\n        }\r\n    }\r\n    /**\r\n     * Attaches the snack bar container component to the overlay.\r\n     */\r\n    _attachSnackBarContainer(overlayRef, config) {\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        const injector = Injector.create({\r\n            parent: userInjector || this._injector,\r\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\r\n        });\r\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\r\n        const containerRef = overlayRef.attach(containerPortal);\r\n        containerRef.instance.snackBarConfig = config;\r\n        return containerRef.instance;\r\n    }\r\n    /**\r\n     * Places a new component or a template as the content of the snack bar container.\r\n     */\r\n    _attach(content, userConfig) {\r\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\r\n        const overlayRef = this._createOverlay(config);\r\n        const container = this._attachSnackBarContainer(overlayRef, config);\r\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\r\n        if (content instanceof TemplateRef) {\r\n            const portal = new TemplatePortal(content, null, {\r\n                $implicit: config.data,\r\n                snackBarRef\r\n            });\r\n            snackBarRef.instance = container.attachTemplatePortal(portal);\r\n        }\r\n        else {\r\n            const injector = this._createInjector(config, snackBarRef);\r\n            const portal = new ComponentPortal(content, undefined, injector);\r\n            const contentRef = container.attachComponentPortal(portal);\r\n            // We can't pass this via the injector, because the injector is created earlier.\r\n            snackBarRef.instance = contentRef.instance;\r\n        }\r\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n        // fill the width of the screen for full width snackbars.\r\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\r\n            const classList = overlayRef.overlayElement.classList;\r\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\r\n        });\r\n        if (config.announcementMessage) {\r\n            // Wait until the snack bar contents have been announced then deliver this message.\r\n            container._onAnnounce.subscribe(() => {\r\n                this._live.announce(config.announcementMessage, config.politeness);\r\n            });\r\n        }\r\n        this._animateSnackBar(snackBarRef, config);\r\n        this._openedSnackBarRef = snackBarRef;\r\n        return this._openedSnackBarRef;\r\n    }\r\n    /** Animates the old snack bar out and the new one in. */\r\n    _animateSnackBar(snackBarRef, config) {\r\n        // When the snackbar is dismissed, clear the reference to it.\r\n        snackBarRef.afterDismissed().subscribe(() => {\r\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n            if (this._openedSnackBarRef == snackBarRef) {\r\n                this._openedSnackBarRef = null;\r\n            }\r\n            if (config.announcementMessage) {\r\n                this._live.clear();\r\n            }\r\n        });\r\n        if (this._openedSnackBarRef) {\r\n            // If a snack bar is already in view, dismiss it and enter the\r\n            // new snack bar after exit animation is complete.\r\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\r\n                snackBarRef.containerInstance.enter();\r\n            });\r\n            this._openedSnackBarRef.dismiss();\r\n        }\r\n        else {\r\n            // If no snack bar is in view, enter the new snack bar.\r\n            snackBarRef.containerInstance.enter();\r\n        }\r\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n        if (config.duration && config.duration > 0) {\r\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new overlay and places it in the correct location.\r\n     * @param config The user-specified snack bar config.\r\n     */\r\n    _createOverlay(config) {\r\n        const overlayConfig = new OverlayConfig();\r\n        overlayConfig.direction = config.direction;\r\n        let positionStrategy = this._overlay.position().global();\r\n        // Set horizontal position.\r\n        const isRtl = config.direction === 'rtl';\r\n        const isLeft = (config.horizontalPosition === 'left' ||\r\n            (config.horizontalPosition === 'start' && !isRtl) ||\r\n            (config.horizontalPosition === 'end' && isRtl));\r\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n        if (isLeft) {\r\n            positionStrategy.left('0');\r\n        }\r\n        else if (isRight) {\r\n            positionStrategy.right('0');\r\n        }\r\n        else {\r\n            positionStrategy.centerHorizontally();\r\n        }\r\n        // Set horizontal position.\r\n        if (config.verticalPosition === 'top') {\r\n            positionStrategy.top('0');\r\n        }\r\n        else {\r\n            positionStrategy.bottom('0');\r\n        }\r\n        overlayConfig.positionStrategy = positionStrategy;\r\n        return this._overlay.create(overlayConfig);\r\n    }\r\n    /**\r\n     * Creates an injector to be used inside of a snack bar component.\r\n     * @param config Config that was used to create the snack bar.\r\n     * @param snackBarRef Reference to the snack bar.\r\n     */\r\n    _createInjector(config, snackBarRef) {\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        return Injector.create({\r\n            parent: userInjector || this._injector,\r\n            providers: [\r\n                { provide: MatSnackBarRef, useValue: snackBarRef },\r\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\r\n            ]\r\n        });\r\n    }\r\n}\r\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc5.Overlay), ɵngcc0.ɵɵinject(ɵngcc6.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc7.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\r\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\r\nMatSnackBar.ctorParameters = () => [\r\n    { type: Overlay },\r\n    { type: LiveAnnouncer },\r\n    { type: Injector },\r\n    { type: BreakpointObserver },\r\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: MatSnackBarModule }]\r\n    }], function () { return [{ type: ɵngcc5.Overlay }, { type: ɵngcc6.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc7.BreakpointObserver }, { type: MatSnackBar, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: MatSnackBarConfig, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\r\n\r\n//# sourceMappingURL=snack-bar.js.map"]}