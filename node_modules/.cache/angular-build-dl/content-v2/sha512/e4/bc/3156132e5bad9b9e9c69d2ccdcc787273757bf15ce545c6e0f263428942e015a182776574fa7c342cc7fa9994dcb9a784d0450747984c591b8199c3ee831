{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":[],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_progress-spinner_js-es2015.js","sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/platform';\r\nimport * as ɵngcc2 from '@angular/common';\r\n\r\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\r\n} }\r\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\r\n} }\r\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\r\n} }\r\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\r\n} }\r\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\r\nconst BASE_SIZE = 100;\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nconst _MatProgressSpinnerBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}, 'primary');\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\r\n    return { diameter: BASE_SIZE };\r\n}\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/components/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\r\n    constructor(elementRef, platform, _document, animationMode, defaults) {\r\n        super(elementRef);\r\n        this._document = _document;\r\n        this._diameter = BASE_SIZE;\r\n        this._value = 0;\r\n        this._fallbackAnimation = false;\r\n        /** Mode of the progress circle */\r\n        this.mode = 'determinate';\r\n        const trackedDiameters = MatProgressSpinner._diameters;\r\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\r\n        // The base size is already inserted via the component's structural styles. We still\r\n        // need to track it so we don't end up adding the same styles again.\r\n        if (!trackedDiameters.has(_document.head)) {\r\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\r\n        }\r\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\r\n            (!!defaults && !defaults._forceAnimations);\r\n        if (defaults) {\r\n            if (defaults.diameter) {\r\n                this.diameter = defaults.diameter;\r\n            }\r\n            if (defaults.strokeWidth) {\r\n                this.strokeWidth = defaults.strokeWidth;\r\n            }\r\n        }\r\n    }\r\n    /** The diameter of the progress spinner (will set width and height of svg). */\r\n    get diameter() { return this._diameter; }\r\n    set diameter(size) {\r\n        this._diameter = coerceNumberProperty(size);\r\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\r\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\r\n        if (!this._fallbackAnimation && this._styleRoot) {\r\n            this._attachStyleNode();\r\n        }\r\n    }\r\n    /** Stroke width of the progress spinner. */\r\n    get strokeWidth() {\r\n        return this._strokeWidth || this.diameter / 10;\r\n    }\r\n    set strokeWidth(value) {\r\n        this._strokeWidth = coerceNumberProperty(value);\r\n    }\r\n    /** Value of the progress circle. */\r\n    get value() {\r\n        return this.mode === 'determinate' ? this._value : 0;\r\n    }\r\n    set value(newValue) {\r\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n    }\r\n    ngOnInit() {\r\n        const element = this._elementRef.nativeElement;\r\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\r\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\r\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\r\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\r\n        this._attachStyleNode();\r\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n        // reliably so we fall back to a non-spec animation.\r\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n        element.classList.add(animationClass);\r\n    }\r\n    /** The radius of the spinner, adjusted for stroke width. */\r\n    _getCircleRadius() {\r\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n    }\r\n    /** The view box of the spinner's svg element. */\r\n    _getViewBox() {\r\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\r\n        return `0 0 ${viewBox} ${viewBox}`;\r\n    }\r\n    /** The stroke circumference of the svg circle. */\r\n    _getStrokeCircumference() {\r\n        return 2 * Math.PI * this._getCircleRadius();\r\n    }\r\n    /** The dash offset of the svg circle. */\r\n    _getStrokeDashOffset() {\r\n        if (this.mode === 'determinate') {\r\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\r\n        }\r\n        // In fallback mode set the circle to 80% and rotate it with CSS.\r\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n            return this._getStrokeCircumference() * 0.2;\r\n        }\r\n        return null;\r\n    }\r\n    /** Stroke width of the circle in percent. */\r\n    _getCircleStrokeWidth() {\r\n        return this.strokeWidth / this.diameter * 100;\r\n    }\r\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n    _attachStyleNode() {\r\n        const styleRoot = this._styleRoot;\r\n        const currentDiameter = this._diameter;\r\n        const diameters = MatProgressSpinner._diameters;\r\n        let diametersForElement = diameters.get(styleRoot);\r\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\r\n            const styleTag = this._document.createElement('style');\r\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\r\n            styleTag.textContent = this._getAnimationText();\r\n            styleRoot.appendChild(styleTag);\r\n            if (!diametersForElement) {\r\n                diametersForElement = new Set();\r\n                diameters.set(styleRoot, diametersForElement);\r\n            }\r\n            diametersForElement.add(currentDiameter);\r\n        }\r\n    }\r\n    /** Generates animation styles adjusted for the spinner's diameter. */\r\n    _getAnimationText() {\r\n        const strokeCircumference = this._getStrokeCircumference();\r\n        return INDETERMINATE_ANIMATION_TEMPLATE\r\n            // Animation should begin at 5% and end at 80%\r\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\r\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\r\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\r\n    }\r\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\r\n    _getSpinnerAnimationLabel() {\r\n        // The string of a float point number will include a period ‘.’ character,\r\n        // which is not valid for a CSS animation-name.\r\n        return this.diameter.toString().replace('.', '_');\r\n    }\r\n}\r\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\r\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\r\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵnamespaceSVG();\r\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\r\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\r\n/**\r\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\r\n * We need to keep track of which elements the diameters were attached to, because for\r\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\r\n * than the document head.\r\n */\r\nMatProgressSpinner._diameters = new WeakMap();\r\nMatProgressSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\nMatProgressSpinner.propDecorators = {\r\n    diameter: [{ type: Input }],\r\n    strokeWidth: [{ type: Input }],\r\n    mode: [{ type: Input }],\r\n    value: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-progress-spinner',\r\n                exportAs: 'matProgressSpinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'class': 'mat-progress-spinner',\r\n                    // set tab index to -1 so screen readers will read the aria-label\r\n                    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\r\n                    'tabindex': '-1',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter',\r\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\r\n                    '[attr.mode]': 'mode'\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\r\n            }] }]; }, { mode: [{\r\n            type: Input\r\n        }], diameter: [{\r\n            type: Input\r\n        }], strokeWidth: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }] }); })();\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\nclass MatSpinner extends MatProgressSpinner {\r\n    constructor(elementRef, platform, document, animationMode, defaults) {\r\n        super(elementRef, platform, document, animationMode, defaults);\r\n        this.mode = 'indeterminate';\r\n    }\r\n}\r\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\r\nMatSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\r\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵnamespaceSVG();\r\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\r\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\r\nMatSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-spinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'mode': 'indeterminate',\r\n                    'class': 'mat-spinner mat-progress-spinner',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter'\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatProgressSpinnerModule {\r\n}\r\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\r\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\r\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [MatCommonModule, CommonModule],\r\n                exports: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\r\n\r\n//# sourceMappingURL=progress-spinner.js.map"],"sourceRoot":"webpack:///"}