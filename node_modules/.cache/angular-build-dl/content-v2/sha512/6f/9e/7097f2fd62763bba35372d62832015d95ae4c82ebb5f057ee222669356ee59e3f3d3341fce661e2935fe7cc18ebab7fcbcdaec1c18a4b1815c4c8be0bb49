{"version":3,"sources":["./node_modules/ngx-echarts/__ivy_ngcc__/fesm2015/ngx-echarts.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAuD;AACsE;AACvE;AACT;AACF;;AAEH;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAE;AACzB;AACA;AACA,eAAe,uCAAK;AACpB;AACA;AACA;AACA;AACA,mBAAmB,wCAAE;AACrB;AACA,eAAe,uCAAK;AACpB;AACA;AACA;AACA;AACA,mBAAmB,wCAAE;AACrB;AACA,eAAe,uCAAK;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAE;AACzB;AACA;AACA,eAAe,uCAAK;AACpB;AACA;;AAEA,+BAA+B,yDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uDAAY;AACzC,gCAAgC,uDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,6DAAc;AAC/C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC,SAAS;AACT;AACA;AACA,eAAe,gDAAS;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,gDAAS;AACxB;AACA;AAC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","file":"default-node_modules_ngx-echarts___ivy_ngcc___fesm2015_ngx-echarts_js-es2015.js","sourcesContent":["import { __awaiter, __decorate, __param } from 'tslib';\r\nimport { InjectionToken, EventEmitter, Inject, ElementRef, NgZone, Input, Output, Directive, NgModule } from '@angular/core';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { of, EMPTY, Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nimport * as Éµngcc0 from '@angular/core';\r\nclass ChangeFilter {\r\n    constructor(changes) {\r\n        this.changes = changes;\r\n    }\r\n    static of(changes) {\r\n        return new ChangeFilter(changes);\r\n    }\r\n    notEmpty(key) {\r\n        if (this.changes[key]) {\r\n            const value = this.changes[key].currentValue;\r\n            if (value !== undefined && value !== null) {\r\n                return of(value);\r\n            }\r\n        }\r\n        return EMPTY;\r\n    }\r\n    has(key) {\r\n        if (this.changes[key]) {\r\n            const value = this.changes[key].currentValue;\r\n            return of(value);\r\n        }\r\n        return EMPTY;\r\n    }\r\n    notFirst(key) {\r\n        if (this.changes[key] && !this.changes[key].isFirstChange()) {\r\n            const value = this.changes[key].currentValue;\r\n            return of(value);\r\n        }\r\n        return EMPTY;\r\n    }\r\n    notFirstAndEmpty(key) {\r\n        if (this.changes[key] && !this.changes[key].isFirstChange()) {\r\n            const value = this.changes[key].currentValue;\r\n            if (value !== undefined && value !== null) {\r\n                return of(value);\r\n            }\r\n        }\r\n        return EMPTY;\r\n    }\r\n}\r\n\r\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\r\nlet NgxEchartsDirective = class NgxEchartsDirective {\r\n    constructor(config, el, ngZone) {\r\n        this.el = el;\r\n        this.ngZone = ngZone;\r\n        this.autoResize = true;\r\n        this.loadingType = 'default';\r\n        // ngx-echarts events\r\n        this.chartInit = new EventEmitter();\r\n        this.optionsError = new EventEmitter();\r\n        // echarts mouse events\r\n        this.chartClick = this.createLazyEvent('click');\r\n        this.chartDblClick = this.createLazyEvent('dblclick');\r\n        this.chartMouseDown = this.createLazyEvent('mousedown');\r\n        this.chartMouseMove = this.createLazyEvent('mousemove');\r\n        this.chartMouseUp = this.createLazyEvent('mouseup');\r\n        this.chartMouseOver = this.createLazyEvent('mouseover');\r\n        this.chartMouseOut = this.createLazyEvent('mouseout');\r\n        this.chartGlobalOut = this.createLazyEvent('globalout');\r\n        this.chartContextMenu = this.createLazyEvent('contextmenu');\r\n        // echarts mouse events\r\n        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\r\n        this.chartLegendSelected = this.createLazyEvent('legendselected');\r\n        this.chartLegendUnselected = this.createLazyEvent('legendunselected');\r\n        this.chartLegendScroll = this.createLazyEvent('legendscroll');\r\n        this.chartDataZoom = this.createLazyEvent('datazoom');\r\n        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\r\n        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\r\n        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\r\n        this.chartRestore = this.createLazyEvent('restore');\r\n        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\r\n        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\r\n        this.chartPieSelectChanged = this.createLazyEvent('pieselectchanged');\r\n        this.chartPieSelected = this.createLazyEvent('pieselected');\r\n        this.chartPieUnselected = this.createLazyEvent('pieunselected');\r\n        this.chartMapSelectChanged = this.createLazyEvent('mapselectchanged');\r\n        this.chartMapSelected = this.createLazyEvent('mapselected');\r\n        this.chartMapUnselected = this.createLazyEvent('mapunselected');\r\n        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\r\n        this.chartFocusNodeAdjacency = this.createLazyEvent('focusnodeadjacency');\r\n        this.chartUnfocusNodeAdjacency = this.createLazyEvent('unfocusnodeadjacency');\r\n        this.chartBrush = this.createLazyEvent('brush');\r\n        this.chartBrushEnd = this.createLazyEvent('brushend');\r\n        this.chartBrushSelected = this.createLazyEvent('brushselected');\r\n        this.chartRendered = this.createLazyEvent('rendered');\r\n        this.chartFinished = this.createLazyEvent('finished');\r\n        this.animationFrameID = null;\r\n        this.echarts = config.echarts;\r\n    }\r\n    ngOnChanges(changes) {\r\n        const filter = ChangeFilter.of(changes);\r\n        filter.notFirstAndEmpty('options').subscribe((opt) => this.onOptionsChange(opt));\r\n        filter.notFirstAndEmpty('merge').subscribe((opt) => this.setOption(opt));\r\n        filter.has('loading').subscribe((v) => this.toggleLoading(!!v));\r\n        filter.notFirst('theme').subscribe(() => this.refreshChart());\r\n    }\r\n    ngOnInit() {\r\n        if (this.autoResize) {\r\n            this.resizeSub = new ResizeObserver(() => {\r\n                this.animationFrameID = window.requestAnimationFrame(() => this.resize());\r\n            });\r\n            this.resizeSub.observe(this.el.nativeElement);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.resizeSub) {\r\n            this.resizeSub.unobserve(this.el.nativeElement);\r\n            window.cancelAnimationFrame(this.animationFrameID);\r\n        }\r\n        this.dispose();\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => this.initChart());\r\n    }\r\n    dispose() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n            this.chart = null;\r\n        }\r\n    }\r\n    /**\r\n     * resize chart\r\n     */\r\n    resize() {\r\n        if (this.chart) {\r\n            this.chart.resize();\r\n        }\r\n    }\r\n    toggleLoading(loading) {\r\n        if (this.chart) {\r\n            loading\r\n                ? this.chart.showLoading(this.loadingType, this.loadingOpts)\r\n                : this.chart.hideLoading();\r\n        }\r\n    }\r\n    setOption(option, opts) {\r\n        if (this.chart) {\r\n            try {\r\n                this.chart.setOption(option, opts);\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n                this.optionsError.emit(e);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * dispose old chart and create a new one.\r\n     */\r\n    refreshChart() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.dispose();\r\n            yield this.initChart();\r\n        });\r\n    }\r\n    createChart() {\r\n        const dom = this.el.nativeElement;\r\n        if (window && window.getComputedStyle) {\r\n            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\r\n            if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\r\n                dom.style.height = '400px';\r\n            }\r\n        }\r\n        // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\r\n        // otherwise create the function that imitates behaviour above with a provided as is module\r\n        return this.ngZone.runOutsideAngular(() => {\r\n            const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\r\n            return load().then(({ init }) => init(dom, this.theme, this.initOpts));\r\n        });\r\n    }\r\n    initChart() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.onOptionsChange(this.options);\r\n            if (this.merge && this.chart) {\r\n                this.setOption(this.merge);\r\n            }\r\n        });\r\n    }\r\n    onOptionsChange(opt) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!opt) {\r\n                return;\r\n            }\r\n            if (this.chart) {\r\n                this.setOption(this.options, true);\r\n            }\r\n            else {\r\n                this.chart = yield this.createChart();\r\n                this.chartInit.emit(this.chart);\r\n                this.setOption(this.options, true);\r\n            }\r\n        });\r\n    }\r\n    // allows to lazily bind to only those events that are requested through the `@Output` by parent components\r\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\r\n    createLazyEvent(eventName) {\r\n        return this.chartInit.pipe(switchMap((chart) => new Observable((observer) => {\r\n            chart.on(eventName, (data) => this.ngZone.run(() => observer.next(data)));\r\n            return () => chart.off(eventName);\r\n        })));\r\n    }\r\n};\r\nNgxEchartsDirective.Éµfac = function NgxEchartsDirective_Factory(t) { return new (t || NgxEchartsDirective)(Éµngcc0.ÉµÉµdirectiveInject(NGX_ECHARTS_CONFIG), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone)); };\r\nNgxEchartsDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: NgxEchartsDirective, selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]], inputs: { autoResize: \"autoResize\", loadingType: \"loadingType\", options: \"options\", theme: \"theme\", loading: \"loading\", initOpts: \"initOpts\", merge: \"merge\", loadingOpts: \"loadingOpts\" }, outputs: { chartInit: \"chartInit\", optionsError: \"optionsError\", chartClick: \"chartClick\", chartDblClick: \"chartDblClick\", chartMouseDown: \"chartMouseDown\", chartMouseMove: \"chartMouseMove\", chartMouseUp: \"chartMouseUp\", chartMouseOver: \"chartMouseOver\", chartMouseOut: \"chartMouseOut\", chartGlobalOut: \"chartGlobalOut\", chartContextMenu: \"chartContextMenu\", chartLegendSelectChanged: \"chartLegendSelectChanged\", chartLegendSelected: \"chartLegendSelected\", chartLegendUnselected: \"chartLegendUnselected\", chartLegendScroll: \"chartLegendScroll\", chartDataZoom: \"chartDataZoom\", chartDataRangeSelected: \"chartDataRangeSelected\", chartTimelineChanged: \"chartTimelineChanged\", chartTimelinePlayChanged: \"chartTimelinePlayChanged\", chartRestore: \"chartRestore\", chartDataViewChanged: \"chartDataViewChanged\", chartMagicTypeChanged: \"chartMagicTypeChanged\", chartPieSelectChanged: \"chartPieSelectChanged\", chartPieSelected: \"chartPieSelected\", chartPieUnselected: \"chartPieUnselected\", chartMapSelectChanged: \"chartMapSelectChanged\", chartMapSelected: \"chartMapSelected\", chartMapUnselected: \"chartMapUnselected\", chartAxisAreaSelected: \"chartAxisAreaSelected\", chartFocusNodeAdjacency: \"chartFocusNodeAdjacency\", chartUnfocusNodeAdjacency: \"chartUnfocusNodeAdjacency\", chartBrush: \"chartBrush\", chartBrushEnd: \"chartBrushEnd\", chartBrushSelected: \"chartBrushSelected\", chartRendered: \"chartRendered\", chartFinished: \"chartFinished\" }, exportAs: [\"echarts\"], features: [Éµngcc0.ÉµÉµNgOnChangesFeature] });\r\nNgxEchartsDirective.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [NGX_ECHARTS_CONFIG,] }] },\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"options\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"theme\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"loading\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"initOpts\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"merge\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"autoResize\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"loadingType\", void 0);\r\n__decorate([\r\n    Input()\r\n], NgxEchartsDirective.prototype, \"loadingOpts\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartInit\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"optionsError\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartClick\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartDblClick\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMouseDown\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMouseMove\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMouseUp\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMouseOver\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMouseOut\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartGlobalOut\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartContextMenu\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartLegendSelectChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartLegendSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartLegendUnselected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartLegendScroll\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartDataZoom\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartDataRangeSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartTimelineChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartTimelinePlayChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartRestore\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartDataViewChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMagicTypeChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartPieSelectChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartPieSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartPieUnselected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMapSelectChanged\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMapSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartMapUnselected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartAxisAreaSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartFocusNodeAdjacency\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartUnfocusNodeAdjacency\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartBrush\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartBrushEnd\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartBrushSelected\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartRendered\", void 0);\r\n__decorate([\r\n    Output()\r\n], NgxEchartsDirective.prototype, \"chartFinished\", void 0);\r\nNgxEchartsDirective = __decorate([ __param(0, Inject(NGX_ECHARTS_CONFIG))\r\n], NgxEchartsDirective);\r\n\r\nvar NgxEchartsModule_1;\r\nlet NgxEchartsModule = NgxEchartsModule_1 = class NgxEchartsModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: NgxEchartsModule_1,\r\n            providers: [{ provide: NGX_ECHARTS_CONFIG, useValue: config }],\r\n        };\r\n    }\r\n    static forChild() {\r\n        return {\r\n            ngModule: NgxEchartsModule_1,\r\n        };\r\n    }\r\n};\r\nNgxEchartsModule.Éµfac = function NgxEchartsModule_Factory(t) { return new (t || NgxEchartsModule)(); };\r\nNgxEchartsModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: NgxEchartsModule });\r\nNgxEchartsModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ imports: [[]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'echarts, [echarts]',\r\n                exportAs: 'echarts'\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [NGX_ECHARTS_CONFIG]\r\n            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.NgZone }]; }, { autoResize: [{\r\n            type: Input\r\n        }], loadingType: [{\r\n            type: Input\r\n        }], chartInit: [{\r\n            type: Output\r\n        }], optionsError: [{\r\n            type: Output\r\n        }], chartClick: [{\r\n            type: Output\r\n        }], chartDblClick: [{\r\n            type: Output\r\n        }], chartMouseDown: [{\r\n            type: Output\r\n        }], chartMouseMove: [{\r\n            type: Output\r\n        }], chartMouseUp: [{\r\n            type: Output\r\n        }], chartMouseOver: [{\r\n            type: Output\r\n        }], chartMouseOut: [{\r\n            type: Output\r\n        }], chartGlobalOut: [{\r\n            type: Output\r\n        }], chartContextMenu: [{\r\n            type: Output\r\n        }], chartLegendSelectChanged: [{\r\n            type: Output\r\n        }], chartLegendSelected: [{\r\n            type: Output\r\n        }], chartLegendUnselected: [{\r\n            type: Output\r\n        }], chartLegendScroll: [{\r\n            type: Output\r\n        }], chartDataZoom: [{\r\n            type: Output\r\n        }], chartDataRangeSelected: [{\r\n            type: Output\r\n        }], chartTimelineChanged: [{\r\n            type: Output\r\n        }], chartTimelinePlayChanged: [{\r\n            type: Output\r\n        }], chartRestore: [{\r\n            type: Output\r\n        }], chartDataViewChanged: [{\r\n            type: Output\r\n        }], chartMagicTypeChanged: [{\r\n            type: Output\r\n        }], chartPieSelectChanged: [{\r\n            type: Output\r\n        }], chartPieSelected: [{\r\n            type: Output\r\n        }], chartPieUnselected: [{\r\n            type: Output\r\n        }], chartMapSelectChanged: [{\r\n            type: Output\r\n        }], chartMapSelected: [{\r\n            type: Output\r\n        }], chartMapUnselected: [{\r\n            type: Output\r\n        }], chartAxisAreaSelected: [{\r\n            type: Output\r\n        }], chartFocusNodeAdjacency: [{\r\n            type: Output\r\n        }], chartUnfocusNodeAdjacency: [{\r\n            type: Output\r\n        }], chartBrush: [{\r\n            type: Output\r\n        }], chartBrushEnd: [{\r\n            type: Output\r\n        }], chartBrushSelected: [{\r\n            type: Output\r\n        }], chartRendered: [{\r\n            type: Output\r\n        }], chartFinished: [{\r\n            type: Output\r\n        }], options: [{\r\n            type: Input\r\n        }], theme: [{\r\n            type: Input\r\n        }], loading: [{\r\n            type: Input\r\n        }], initOpts: [{\r\n            type: Input\r\n        }], merge: [{\r\n            type: Input\r\n        }], loadingOpts: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxEchartsModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [],\r\n                declarations: [NgxEchartsDirective],\r\n                exports: [NgxEchartsDirective]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxEchartsModule, { declarations: [NgxEchartsDirective], exports: [NgxEchartsDirective] }); })();\r\n\r\n/*\r\n * Public API Surface of ngx-echarts\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule };\r\n\r\n//# sourceMappingURL=ngx-echarts.js.map"],"sourceRoot":"webpack:///"}