{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4P;AAC/I;AAC5D;AACmC;AACf;AAClB;AAC0B;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACI;AACO;AACF;;AAEjD;AACA,2BAA2B,SAAS,qBAAqB;AACzD;AACA,sCAAsC,yDAAc;AACpD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,6DAAiB;AAC9B,iBAAiB,yDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,4DAAwB,GAAG;AAC5J,wCAAwC,+DAAwB,EAAE,oCAAoC,iJAAiJ,YAAY,mBAAmB,EAAE;AACxR;AACA,KAAK,OAAO,4DAAiB;AAC7B;AACA;AACA,cAAc,OAAO,iDAAM,EAAE;AAC7B,aAAa,OAAO,gDAAK,EAAE;AAC3B,YAAY,OAAO,gDAAK,EAAE;AAC1B,qBAAqB,OAAO,gDAAK,EAAE;AACnC,aAAa,OAAO,gDAAK,EAAE;AAC3B,gBAAgB,OAAO,gDAAK,EAAE;AAC9B,gBAAgB,OAAO,gDAAK,EAAE;AAC9B,gBAAgB,OAAO,gDAAK,EAAE;AAC9B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB,KAAK,gBAAgB,UAAU,OAAO,4DAAwB,EAAE,EAAE,EAAE,GAAG;AACvE,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA,gDAAgD,gCAAgC,2CAA2C,qEAAqE,mEAA4B,sCAAsC,GAAG,EAAE;AACvQ,mCAAmC,+DAAwB,EAAE,kIAAkI;AAC/L,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,mGAAmG,gEAAyB;AACnI;AACA,aAAa,uDAAuD;AACpE,YAAY,wEAAiC,GAAG;AAChD;AACA,eAAe,OAAO,0DAAe,SAAS,yDAAU,yBAAyB,oBAAoB,IAAI;AACzG;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAuD;AAC5E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,UAAU;AACf,kBAAkB,0DAAe;AACjC,mBAAmB,yDAAU,yBAAyB,oBAAoB;AAC1E,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0EAAkB,CAAC,qEAAa;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAY;AACtC;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,gCAAgC,4EAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4EAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjD;AACA,mBAAmB,WAAW,0BAA0B,QAAQ;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_radio_js-es2015.js","sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\r\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/a11y';\r\nimport * as ɵngcc2 from '@angular/cdk/collections';\r\nimport * as ɵngcc3 from '@angular/material/core';\r\n\r\nconst _c0 = [\"input\"];\r\nconst _c1 = function (a0) { return { enterDuration: a0 }; };\r\nconst _c2 = [\"*\"];\r\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\r\n});\r\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\r\n    return {\r\n        color: 'accent'\r\n    };\r\n}\r\n// Increasing integer for generating unique ids for radio components.\r\nlet nextUniqueId = 0;\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * @docs-private\r\n */\r\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MatRadioGroup),\r\n    multi: true\r\n};\r\n/** Change event object emitted by MatRadio and MatRadioGroup. */\r\nclass MatRadioChange {\r\n    constructor(\r\n    /** The MatRadioButton that emits the change event. */\r\n    source, \r\n    /** The value of the MatRadioButton. */\r\n    value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n/**\r\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\r\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\r\n * retention of the class and its component metadata.\r\n */\r\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\r\n/**\r\n * Base class with all of the `MatRadioGroup` functionality.\r\n * @docs-private\r\n */\r\nclass _MatRadioGroupBase {\r\n    constructor(_changeDetector) {\r\n        this._changeDetector = _changeDetector;\r\n        /** Selected value for the radio group. */\r\n        this._value = null;\r\n        /** The HTML name attribute applied to radio buttons in this group. */\r\n        this._name = `mat-radio-group-${nextUniqueId++}`;\r\n        /** The currently selected radio button. Should match value. */\r\n        this._selected = null;\r\n        /** Whether the `value` has been set to its initial value. */\r\n        this._isInitialized = false;\r\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n        this._labelPosition = 'after';\r\n        /** Whether the radio group is disabled. */\r\n        this._disabled = false;\r\n        /** Whether the radio group is required. */\r\n        this._required = false;\r\n        /** The method to be called in order to update ngModel */\r\n        this._controlValueAccessorChangeFn = () => { };\r\n        /**\r\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n         * @docs-private\r\n         */\r\n        this.onTouched = () => { };\r\n        /**\r\n         * Event emitted when the group value changes.\r\n         * Change events are only emitted when the value changes due to user interaction with\r\n         * a radio button (the same behavior as `<input type-\"radio\">`).\r\n         */\r\n        this.change = new EventEmitter();\r\n    }\r\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\r\n    get name() { return this._name; }\r\n    set name(value) {\r\n        this._name = value;\r\n        this._updateRadioButtonNames();\r\n    }\r\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\r\n    get labelPosition() {\r\n        return this._labelPosition;\r\n    }\r\n    set labelPosition(v) {\r\n        this._labelPosition = v === 'before' ? 'before' : 'after';\r\n        this._markRadiosForCheck();\r\n    }\r\n    /**\r\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\r\n     * a corresponding radio button with a matching value. If there is not such a corresponding\r\n     * radio button, this value persists to be applied in case a new radio button is added with a\r\n     * matching value.\r\n     */\r\n    get value() { return this._value; }\r\n    set value(newValue) {\r\n        if (this._value !== newValue) {\r\n            // Set this before proceeding to ensure no circular loop occurs with selection.\r\n            this._value = newValue;\r\n            this._updateSelectedRadioFromValue();\r\n            this._checkSelectedRadioButton();\r\n        }\r\n    }\r\n    _checkSelectedRadioButton() {\r\n        if (this._selected && !this._selected.checked) {\r\n            this._selected.checked = true;\r\n        }\r\n    }\r\n    /**\r\n     * The currently selected radio button. If set to a new radio button, the radio group value\r\n     * will be updated to match the new selected button.\r\n     */\r\n    get selected() { return this._selected; }\r\n    set selected(selected) {\r\n        this._selected = selected;\r\n        this.value = selected ? selected.value : null;\r\n        this._checkSelectedRadioButton();\r\n    }\r\n    /** Whether the radio group is disabled */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._markRadiosForCheck();\r\n    }\r\n    /** Whether the radio group is required */\r\n    get required() { return this._required; }\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n        this._markRadiosForCheck();\r\n    }\r\n    /**\r\n     * Initialize properties once content children are available.\r\n     * This allows us to propagate relevant attributes to associated buttons.\r\n     */\r\n    ngAfterContentInit() {\r\n        // Mark this component as initialized in AfterContentInit because the initial value can\r\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\r\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\r\n        this._isInitialized = true;\r\n    }\r\n    /**\r\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n     * radio buttons upon their blur.\r\n     */\r\n    _touch() {\r\n        if (this.onTouched) {\r\n            this.onTouched();\r\n        }\r\n    }\r\n    _updateRadioButtonNames() {\r\n        if (this._radios) {\r\n            this._radios.forEach(radio => {\r\n                radio.name = this.name;\r\n                radio._markForCheck();\r\n            });\r\n        }\r\n    }\r\n    /** Updates the `selected` radio button from the internal _value state. */\r\n    _updateSelectedRadioFromValue() {\r\n        // If the value already matches the selected radio, do nothing.\r\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\r\n        if (this._radios && !isAlreadySelected) {\r\n            this._selected = null;\r\n            this._radios.forEach(radio => {\r\n                radio.checked = this.value === radio.value;\r\n                if (radio.checked) {\r\n                    this._selected = radio;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /** Dispatch change event with current selection and group value. */\r\n    _emitChangeEvent() {\r\n        if (this._isInitialized) {\r\n            this.change.emit(new MatRadioChange(this._selected, this._value));\r\n        }\r\n    }\r\n    _markRadiosForCheck() {\r\n        if (this._radios) {\r\n            this._radios.forEach(radio => radio._markForCheck());\r\n        }\r\n    }\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n        this._changeDetector.markForCheck();\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the model value changes.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the control is touched.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param fn Callback to be registered.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n     * @param isDisabled Whether the control should be disabled.\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetector.markForCheck();\r\n    }\r\n}\r\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\r\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\r\n_MatRadioGroupBase.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\n_MatRadioGroupBase.propDecorators = {\r\n    change: [{ type: Output }],\r\n    color: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    selected: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    required: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\r\n            type: Output\r\n        }], name: [{\r\n            type: Input\r\n        }], labelPosition: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }], selected: [{\r\n            type: Input\r\n        }], disabled: [{\r\n            type: Input\r\n        }], required: [{\r\n            type: Input\r\n        }], color: [{\r\n            type: Input\r\n        }] }); })();\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\nclass MatRadioGroup extends _MatRadioGroupBase {\r\n}\r\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\r\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\r\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\r\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\r\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatRadioGroup.propDecorators = {\r\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-radio-group',\r\n                exportAs: 'matRadioGroup',\r\n                providers: [\r\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\r\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\r\n                ],\r\n                host: {\r\n                    'role': 'radiogroup',\r\n                    'class': 'mat-radio-group'\r\n                }\r\n            }]\r\n    }], null, { _radios: [{\r\n            type: ContentChildren,\r\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\r\n        }] }); })();\r\n// Boilerplate for applying mixins to MatRadioButton.\r\n/** @docs-private */\r\nclass MatRadioButtonBase {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\r\n/**\r\n * Base class with all of the `MatRadioButton` functionality.\r\n * @docs-private\r\n */\r\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\r\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\r\n        super(elementRef);\r\n        this._changeDetector = _changeDetector;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._radioDispatcher = _radioDispatcher;\r\n        this._providerOverride = _providerOverride;\r\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\r\n        /** The unique ID for the radio button. */\r\n        this.id = this._uniqueId;\r\n        /**\r\n         * Event emitted when the checked state of this radio button changes.\r\n         * Change events are only emitted when the value changes due to user interaction with\r\n         * the radio button (the same behavior as `<input type-\"radio\">`).\r\n         */\r\n        this.change = new EventEmitter();\r\n        /** Whether this radio is checked. */\r\n        this._checked = false;\r\n        /** Value assigned to this radio. */\r\n        this._value = null;\r\n        /** Unregister function for _radioDispatcher */\r\n        this._removeUniqueSelectionListener = () => { };\r\n        // Assertions. Ideally these should be stripped out by the compiler.\r\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n        this.radioGroup = radioGroup;\r\n        this._noopAnimations = animationMode === 'NoopAnimations';\r\n        if (tabIndex) {\r\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\r\n        }\r\n        this._removeUniqueSelectionListener =\r\n            _radioDispatcher.listen((id, name) => {\r\n                if (id !== this.id && name === this.name) {\r\n                    this.checked = false;\r\n                }\r\n            });\r\n    }\r\n    /** Whether this radio button is checked. */\r\n    get checked() { return this._checked; }\r\n    set checked(value) {\r\n        const newCheckedState = coerceBooleanProperty(value);\r\n        if (this._checked !== newCheckedState) {\r\n            this._checked = newCheckedState;\r\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\r\n                this.radioGroup.selected = this;\r\n            }\r\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\r\n                // When unchecking the selected radio button, update the selected radio\r\n                // property on the group.\r\n                this.radioGroup.selected = null;\r\n            }\r\n            if (newCheckedState) {\r\n                // Notify all radio buttons with the same name to un-check.\r\n                this._radioDispatcher.notify(this.id, this.name);\r\n            }\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /** The value of this radio button. */\r\n    get value() { return this._value; }\r\n    set value(value) {\r\n        if (this._value !== value) {\r\n            this._value = value;\r\n            if (this.radioGroup !== null) {\r\n                if (!this.checked) {\r\n                    // Update checked when the value changed to match the radio group's value\r\n                    this.checked = this.radioGroup.value === value;\r\n                }\r\n                if (this.checked) {\r\n                    this.radioGroup.selected = this;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\r\n    get labelPosition() {\r\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n    }\r\n    set labelPosition(value) {\r\n        this._labelPosition = value;\r\n    }\r\n    /** Whether the radio button is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\r\n    }\r\n    set disabled(value) {\r\n        this._setDisabled(coerceBooleanProperty(value));\r\n    }\r\n    /** Whether the radio button is required. */\r\n    get required() {\r\n        return this._required || (this.radioGroup && this.radioGroup.required);\r\n    }\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n    }\r\n    /** Theme color of the radio button. */\r\n    get color() {\r\n        // As per Material design specifications the selection control radio should use the accent color\r\n        // palette by default. https://material.io/guidelines/components/selection-controls.html\r\n        return this._color ||\r\n            (this.radioGroup && this.radioGroup.color) ||\r\n            this._providerOverride && this._providerOverride.color || 'accent';\r\n    }\r\n    set color(newValue) { this._color = newValue; }\r\n    /** ID of the native input element inside `<mat-radio-button>` */\r\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\r\n    /** Focuses the radio button. */\r\n    focus(options, origin) {\r\n        if (origin) {\r\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\r\n        }\r\n        else {\r\n            this._inputElement.nativeElement.focus(options);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the radio button as needing checking for change detection.\r\n     * This method is exposed because the parent radio group will directly\r\n     * update bound properties of the radio button.\r\n     */\r\n    _markForCheck() {\r\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n        // update radio button's status\r\n        this._changeDetector.markForCheck();\r\n    }\r\n    ngOnInit() {\r\n        if (this.radioGroup) {\r\n            // If the radio is inside a radio group, determine if it should be checked\r\n            this.checked = this.radioGroup.value === this._value;\r\n            if (this.checked) {\r\n                this.radioGroup.selected = this;\r\n            }\r\n            // Copy name from parent radio group\r\n            this.name = this.radioGroup.name;\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this._focusMonitor\r\n            .monitor(this._elementRef, true)\r\n            .subscribe(focusOrigin => {\r\n            if (!focusOrigin && this.radioGroup) {\r\n                this.radioGroup._touch();\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        this._removeUniqueSelectionListener();\r\n    }\r\n    /** Dispatch change event with current value. */\r\n    _emitChangeEvent() {\r\n        this.change.emit(new MatRadioChange(this, this._value));\r\n    }\r\n    _isRippleDisabled() {\r\n        return this.disableRipple || this.disabled;\r\n    }\r\n    _onInputClick(event) {\r\n        // We have to stop propagation for click events on the visual hidden input element.\r\n        // By default, when a user clicks on a label element, a generated click event will be\r\n        // dispatched on the associated input element. Since we are using a label element as our\r\n        // root container, the click event on the `radio-button` will be executed twice.\r\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n        // This will lead to multiple click events.\r\n        // Preventing bubbling for the second event will solve that issue.\r\n        event.stopPropagation();\r\n    }\r\n    /** Triggered when the radio button receives an interaction from the user. */\r\n    _onInputInteraction(event) {\r\n        // We always have to stop propagation on the change event.\r\n        // Otherwise the change event, from the input element, will bubble up and\r\n        // emit its event object to the `change` output.\r\n        event.stopPropagation();\r\n        if (!this.checked && !this.disabled) {\r\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\r\n            this.checked = true;\r\n            this._emitChangeEvent();\r\n            if (this.radioGroup) {\r\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n                if (groupValueChanged) {\r\n                    this.radioGroup._emitChangeEvent();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** Sets the disabled state and marks for check if a change occurred. */\r\n    _setDisabled(value) {\r\n        if (this._disabled !== value) {\r\n            this._disabled = value;\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n}\r\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\r\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\r\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\n_MatRadioButtonBase.ctorParameters = () => [\r\n    { type: _MatRadioGroupBase },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: FocusMonitor },\r\n    { type: UniqueSelectionDispatcher },\r\n    { type: String },\r\n    { type: undefined },\r\n    { type: String }\r\n];\r\n_MatRadioButtonBase.propDecorators = {\r\n    id: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\r\n    checked: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    change: [{ type: Output }],\r\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\r\n            type: Input\r\n        }], change: [{\r\n            type: Output\r\n        }], checked: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }], labelPosition: [{\r\n            type: Input\r\n        }], disabled: [{\r\n            type: Input\r\n        }], required: [{\r\n            type: Input\r\n        }], color: [{\r\n            type: Input\r\n        }], name: [{\r\n            type: Input\r\n        }], ariaLabel: [{\r\n            type: Input,\r\n            args: ['aria-label']\r\n        }], ariaLabelledby: [{\r\n            type: Input,\r\n            args: ['aria-labelledby']\r\n        }], ariaDescribedby: [{\r\n            type: Input,\r\n            args: ['aria-describedby']\r\n        }], _inputElement: [{\r\n            type: ViewChild,\r\n            args: ['input']\r\n        }] }); })();\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\nclass MatRadioButton extends _MatRadioButtonBase {\r\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\r\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\r\n    }\r\n}\r\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\r\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\r\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._noopAnimations)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\r\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 20, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef();\r\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\r\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\r\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\r\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\r\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\r\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputInteraction($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\r\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\r\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\r\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵprojection(12);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        const _r0 = ɵngcc0.ɵɵreference(1);\r\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\r\n        ɵngcc0.ɵɵadvance(5);\r\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\r\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction1(18, _c1, ctx._noopAnimations ? 0 : 150));\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\r\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\r\nMatRadioButton.ctorParameters = () => [\r\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: FocusMonitor },\r\n    { type: UniqueSelectionDispatcher },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-radio-button',\r\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputInteraction($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\r\n                inputs: ['disableRipple', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                exportAs: 'matRadioButton',\r\n                host: {\r\n                    'class': 'mat-radio-button',\r\n                    '[class.mat-radio-checked]': 'checked',\r\n                    '[class.mat-radio-disabled]': 'disabled',\r\n                    '[class._mat-animation-noopable]': '_noopAnimations',\r\n                    '[class.mat-primary]': 'color === \"primary\"',\r\n                    '[class.mat-accent]': 'color === \"accent\"',\r\n                    '[class.mat-warn]': 'color === \"warn\"',\r\n                    // Needs to be removed since it causes some a11y issues (see #21266).\r\n                    '[attr.tabindex]': 'null',\r\n                    '[attr.id]': 'id',\r\n                    '[attr.aria-label]': 'null',\r\n                    '[attr.aria-labelledby]': 'null',\r\n                    '[attr.aria-describedby]': 'null',\r\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n                    // the focus to the native element.\r\n                    '(focus)': '_inputElement.nativeElement.focus()'\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_RADIO_GROUP]\r\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\r\n            }] }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['tabindex']\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatRadioModule {\r\n}\r\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\r\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\r\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [MatRippleModule, MatCommonModule],\r\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\r\n                declarations: [MatRadioGroup, MatRadioButton]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\r\n\r\n//# sourceMappingURL=radio.js.map"],"sourceRoot":"webpack:///"}