{"version":3,"sources":["./node_modules/ngx-material-file-input/__ivy_ngcc__/fesm2015/ngx-material-file-input.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA2J;AAC/G;AACK;AACsB;AACK;AACT;AACL;;AAE9D;AACA;AACA;AACwC;AACI;AACK;AACR;AACzC,sCAAsC,yDAAc;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uEAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8BAA8B;AACtE;AACA,iCAAiC;AACjC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4EAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4EAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,2DAAmB,GAAG,+DAAwB,CAA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","file":"default-node_modules_ngx-material-file-input___ivy_ngcc___fesm2015_ngx-material-file-input_js-es2015.js","sourcesContent":["import { InjectionToken, ElementRef, Renderer2, Optional, Self, Input, HostBinding, HostListener, Component, Inject, Pipe, NgModule } from '@angular/core';\r\nimport { __decorate, __param } from 'tslib';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\r\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\n\r\n/**\r\n * Optional token to provide custom configuration to the module\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/a11y';\r\nimport * as ɵngcc2 from '@angular/material/core';\r\nimport * as ɵngcc3 from '@angular/forms';\r\nconst NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken('ngx-mat-file-input.config');\r\n/**\r\n * Provide additional configuration to dynamically customize the module injection\r\n */\r\nclass FileInputConfig {\r\n}\r\n\r\n/**\r\n * The files to be uploaded\r\n */\r\nclass FileInput {\r\n    constructor(_files, delimiter = ', ') {\r\n        this._files = _files;\r\n        this.delimiter = delimiter;\r\n        this._fileNames = (this._files || []).map((f) => f.name).join(delimiter);\r\n    }\r\n    get files() {\r\n        return this._files || [];\r\n    }\r\n    get fileNames() {\r\n        return this._fileNames;\r\n    }\r\n}\r\n\r\n// Boilerplate for applying mixins to FileInput\r\n/** @docs-private */\r\nclass FileInputBase {\r\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n}\r\n/**\r\n * Allows to use a custom ErrorStateMatcher with the file-input component\r\n */\r\nconst FileInputMixinBase = mixinErrorState(FileInputBase);\r\n\r\nvar FileInputComponent_1;\r\nlet FileInputComponent = FileInputComponent_1 = class FileInputComponent extends FileInputMixinBase {\r\n    /**\r\n     * @see https://angular.io/api/forms/ControlValueAccessor\r\n     */\r\n    constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {\r\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this.fm = fm;\r\n        this._elementRef = _elementRef;\r\n        this._renderer = _renderer;\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this.ngControl = ngControl;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.focused = false;\r\n        this.controlType = 'file-input';\r\n        this.autofilled = false;\r\n        this._required = false;\r\n        this.accept = null;\r\n        this.id = `ngx-mat-file-input-${FileInputComponent_1.nextId++}`;\r\n        this.describedBy = '';\r\n        this._onChange = (_) => { };\r\n        this._onTouched = () => { };\r\n        if (this.ngControl != null) {\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n        fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\r\n            this.focused = !!origin;\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    setDescribedByIds(ids) {\r\n        this.describedBy = ids.join(' ');\r\n    }\r\n    get value() {\r\n        return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\r\n    }\r\n    set value(fileInput) {\r\n        if (fileInput) {\r\n            this.writeValue(fileInput);\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    get placeholder() {\r\n        return this._placeholder;\r\n    }\r\n    set placeholder(plh) {\r\n        this._placeholder = plh;\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Whether the current input has files\r\n     */\r\n    get empty() {\r\n        return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\r\n    }\r\n    get shouldLabelFloat() {\r\n        return this.focused || !this.empty || this.valuePlaceholder !== undefined;\r\n    }\r\n    get required() {\r\n        return this._required;\r\n    }\r\n    set required(req) {\r\n        this._required = coerceBooleanProperty(req);\r\n        this.stateChanges.next();\r\n    }\r\n    get isDisabled() {\r\n        return this.disabled;\r\n    }\r\n    get disabled() {\r\n        return this._elementRef.nativeElement.disabled;\r\n    }\r\n    set disabled(dis) {\r\n        this.setDisabledState(coerceBooleanProperty(dis));\r\n        this.stateChanges.next();\r\n    }\r\n    onContainerClick(event) {\r\n        if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {\r\n            this._elementRef.nativeElement.querySelector('input').focus();\r\n            this.focused = true;\r\n            this.open();\r\n        }\r\n    }\r\n    get fileNames() {\r\n        return this.value ? this.value.fileNames : this.valuePlaceholder;\r\n    }\r\n    writeValue(obj) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);\r\n    }\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Remove all files from the file input component\r\n     * @param [event] optional event that may have triggered the clear action\r\n     */\r\n    clear(event) {\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this.value = new FileInput([]);\r\n        this._elementRef.nativeElement.querySelector('input').value = null;\r\n        this._onChange(this.value);\r\n    }\r\n    change(event) {\r\n        const fileList = event.target.files;\r\n        const fileArray = [];\r\n        if (fileList) {\r\n            for (let i = 0; i < fileList.length; i++) {\r\n                fileArray.push(fileList[i]);\r\n            }\r\n        }\r\n        this.value = new FileInput(fileArray);\r\n        this._onChange(this.value);\r\n    }\r\n    blur() {\r\n        this.focused = false;\r\n        this._onTouched();\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    ngOnInit() {\r\n        this.multiple = coerceBooleanProperty(this.multiple);\r\n    }\r\n    open() {\r\n        if (!this.disabled) {\r\n            this._elementRef.nativeElement.querySelector('input').click();\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.stateChanges.complete();\r\n        this.fm.stopMonitoring(this._elementRef.nativeElement);\r\n    }\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            // We need to re-evaluate this on every change detection cycle, because there are some\r\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n};\r\nFileInputComponent.ɵfac = function FileInputComponent_Factory(t) { return new (t || FileInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8)); };\r\nFileInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FileInputComponent, selectors: [[\"ngx-mat-file-input\"]], hostVars: 6, hostBindings: function FileInputComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"change\", function FileInputComponent_change_HostBindingHandler($event) { return ctx.change($event); })(\"focusout\", function FileInputComponent_focusout_HostBindingHandler() { return ctx.blur(); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\r\n        ɵngcc0.ɵɵattribute(\"aria-describedby\", ctx.describedBy);\r\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-should-float\", ctx.shouldLabelFloat)(\"file-input-disabled\", ctx.isDisabled);\r\n    } }, inputs: { autofilled: \"autofilled\", accept: \"accept\", value: \"value\", placeholder: \"placeholder\", required: \"required\", disabled: \"disabled\", multiple: \"multiple\", valuePlaceholder: \"valuePlaceholder\", errorStateMatcher: \"errorStateMatcher\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [[\"type\", \"file\"], [\"input\", \"\"], [1, \"filename\", 3, \"title\"]], template: function FileInputComponent_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵelement(0, \"input\", 0, 1);\r\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\r\n        ɵngcc0.ɵɵtext(3);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"multiple\", ctx.multiple ? \"\" : null)(\"accept\", ctx.accept);\r\n        ɵngcc0.ɵɵadvance(2);\r\n        ɵngcc0.ɵɵproperty(\"title\", ctx.fileNames);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵtextInterpolate(ctx.fileNames);\r\n    } }, styles: [\"[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\"] });\r\nFileInputComponent.nextId = 0;\r\nFileInputComponent.ctorParameters = () => [\r\n    { type: FocusMonitor },\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: ErrorStateMatcher },\r\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\r\n    { type: NgForm, decorators: [{ type: Optional }] },\r\n    { type: FormGroupDirective, decorators: [{ type: Optional }] }\r\n];\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"autofilled\", void 0);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"valuePlaceholder\", void 0);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"multiple\", void 0);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"accept\", void 0);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"errorStateMatcher\", void 0);\r\n__decorate([\r\n    HostBinding()\r\n], FileInputComponent.prototype, \"id\", void 0);\r\n__decorate([\r\n    HostBinding('attr.aria-describedby')\r\n], FileInputComponent.prototype, \"describedBy\", void 0);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"value\", null);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"placeholder\", null);\r\n__decorate([\r\n    HostBinding('class.mat-form-field-should-float')\r\n], FileInputComponent.prototype, \"shouldLabelFloat\", null);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"required\", null);\r\n__decorate([\r\n    HostBinding('class.file-input-disabled')\r\n], FileInputComponent.prototype, \"isDisabled\", null);\r\n__decorate([\r\n    Input()\r\n], FileInputComponent.prototype, \"disabled\", null);\r\n__decorate([\r\n    HostListener('change', ['$event'])\r\n], FileInputComponent.prototype, \"change\", null);\r\n__decorate([\r\n    HostListener('focusout')\r\n], FileInputComponent.prototype, \"blur\", null);\r\nFileInputComponent = FileInputComponent_1 = __decorate([ __param(4, Optional()),\r\n    __param(4, Self()),\r\n    __param(5, Optional()),\r\n    __param(6, Optional())\r\n], FileInputComponent);\r\n\r\nlet ByteFormatPipe = class ByteFormatPipe {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.unit = config ? config.sizeUnit : 'Byte';\r\n    }\r\n    transform(value, args) {\r\n        if (parseInt(value, 10) >= 0) {\r\n            value = this.formatBytes(+value, +args);\r\n        }\r\n        return value;\r\n    }\r\n    formatBytes(bytes, decimals) {\r\n        if (bytes === 0) {\r\n            return '0 ' + this.unit;\r\n        }\r\n        const B = this.unit.charAt(0);\r\n        const k = 1024;\r\n        const dm = decimals || 2;\r\n        const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n    }\r\n};\r\nByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) { return new (t || ByteFormatPipe)(ɵngcc0.ɵɵdirectiveInject(NGX_MAT_FILE_INPUT_CONFIG, 24)); };\r\nByteFormatPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"byteFormat\", type: ByteFormatPipe, pure: true });\r\nByteFormatPipe.ctorParameters = () => [\r\n    { type: FileInputConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MAT_FILE_INPUT_CONFIG,] }] }\r\n];\r\nByteFormatPipe = __decorate([ __param(0, Optional()),\r\n    __param(0, Inject(NGX_MAT_FILE_INPUT_CONFIG))\r\n], ByteFormatPipe);\r\n\r\nlet MaterialFileInputModule = class MaterialFileInputModule {\r\n};\r\nMaterialFileInputModule.ɵfac = function MaterialFileInputModule_Factory(t) { return new (t || MaterialFileInputModule)(); };\r\nMaterialFileInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MaterialFileInputModule });\r\nMaterialFileInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [FocusMonitor] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FileInputComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                // tslint:disable-next-line:component-selector\r\n                selector: 'ngx-mat-file-input',\r\n                template: \"<input #input type=\\\"file\\\" [attr.multiple]=\\\"multiple? '' : null\\\" [attr.accept]=\\\"accept\\\">\\n<span class=\\\"filename\\\" [title]=\\\"fileNames\\\">{{ fileNames }}</span>\\n\",\r\n                providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }],\r\n                styles: [\":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Self\r\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\r\n                type: Optional\r\n            }] }]; }, { autofilled: [{\r\n            type: Input\r\n        }], accept: [{\r\n            type: Input\r\n        }], id: [{\r\n            type: HostBinding\r\n        }], describedBy: [{\r\n            type: HostBinding,\r\n            args: ['attr.aria-describedby']\r\n        }], value: [{\r\n            type: Input\r\n        }], placeholder: [{\r\n            type: Input\r\n        }], shouldLabelFloat: [{\r\n            type: HostBinding,\r\n            args: ['class.mat-form-field-should-float']\r\n        }], required: [{\r\n            type: Input\r\n        }], isDisabled: [{\r\n            type: HostBinding,\r\n            args: ['class.file-input-disabled']\r\n        }], disabled: [{\r\n            type: Input\r\n        }], change: [{\r\n            type: HostListener,\r\n            args: ['change', ['$event']]\r\n        }], blur: [{\r\n            type: HostListener,\r\n            args: ['focusout']\r\n        }], multiple: [{\r\n            type: Input\r\n        }], valuePlaceholder: [{\r\n            type: Input\r\n        }], errorStateMatcher: [{\r\n            type: Input\r\n        }] }); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ByteFormatPipe, [{\r\n        type: Pipe,\r\n        args: [{\r\n                name: 'byteFormat'\r\n            }]\r\n    }], function () { return [{ type: FileInputConfig, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [NGX_MAT_FILE_INPUT_CONFIG]\r\n            }] }]; }, null); })();\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaterialFileInputModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [FileInputComponent, ByteFormatPipe],\r\n                providers: [FocusMonitor],\r\n                exports: [FileInputComponent, ByteFormatPipe]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialFileInputModule, { declarations: [FileInputComponent, ByteFormatPipe], exports: [FileInputComponent, ByteFormatPipe] }); })();\r\n\r\nvar FileValidator;\r\n(function (FileValidator) {\r\n    /**\r\n     * Function to control content of files\r\n     *\r\n     * @param bytes max number of bytes allowed\r\n     *\r\n     * @returns\r\n     */\r\n    function maxContentSize(bytes) {\r\n        return (control) => {\r\n            const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\r\n            const condition = bytes >= size;\r\n            return condition\r\n                ? null\r\n                : {\r\n                    maxContentSize: {\r\n                        actualSize: size,\r\n                        maxSize: bytes\r\n                    }\r\n                };\r\n        };\r\n    }\r\n    FileValidator.maxContentSize = maxContentSize;\r\n})(FileValidator || (FileValidator = {}));\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ByteFormatPipe, FileInput, FileInputComponent, FileInputConfig, FileValidator, MaterialFileInputModule, NGX_MAT_FILE_INPUT_CONFIG, FileInputBase as ɵa, FileInputMixinBase as ɵb };\r\n\r\n//# sourceMappingURL=ngx-material-file-input.js.map"],"sourceRoot":"webpack:///"}