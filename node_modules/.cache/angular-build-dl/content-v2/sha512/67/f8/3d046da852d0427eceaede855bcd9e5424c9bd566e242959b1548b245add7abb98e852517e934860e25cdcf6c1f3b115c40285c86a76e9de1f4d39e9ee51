{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","./node_modules/rxjs/dist/esm5/internal/observable/interval.js","./src/app/doctor/appointments/appointments.component.ts","./src/app/doctor/appointments/appointments.component.html","./src/app/doctor/appointments/form/form.component.ts","./src/app/doctor/appointments/form/form.component.html","./src/app/doctor/dashboard/dashboard.component.ts","./src/app/doctor/dashboard/dashboard.component.html","./src/app/doctor/doctor-routing.module.ts","./src/app/doctor/doctor.module.ts","./src/app/doctor/doctors/doctors.component.html","./src/app/doctor/doctors/doctors.component.ts","./src/app/doctor/patients/patients.component.html","./src/app/doctor/patients/patients.component.ts","./src/app/doctor/settings/settings.component.html","./src/app/doctor/settings/settings.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAoC;AACgN;AAC9M;AACK;AACE;AACiD;AACW;AACO;AACV;AACH;AAClB;AAC9B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACS;AACL;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0CAA0C;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,mDAAmD;AACpF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB,sEAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW,GAAG,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sFAA+B,EAAE,gBAAgB;AACrF;AACA,mCAAmC,sFAA+B,EAAE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAO;AACtC;AACA,wCAAwC,oDAAkB;AAC1D;AACA,sCAAsC,oDAAkB;AACxD;AACA,mCAAmC,oDAAkB;AACrD;AACA,mCAAmC,oDAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAO;AACxC;AACA,2BAA2B,yCAAO;AAClC;AACA,4BAA4B,yCAAO;AACnC;AACA,yBAAyB,yCAAO;AAChC;AACA,2BAA2B,yCAAO;AAClC;AACA,0BAA0B,yCAAO;AACjC;AACA,2BAA2B,yCAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sEAAe;AAClD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kBAAkB,GAAG,kBAAkB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oEAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,oEAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sEAAe;AACtC;AACA;AACA,8CAA8C,mFAAgC;AAC9E,YAAY,kFAA+B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAqD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,GAAG,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAA6C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sEAAe;AAClD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qEAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc,MAAM,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAO;AACxC;AACA;AACA;AACA,2BAA2B,yCAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,yCAAO;AACjC;AACA,2BAA2B,yCAAO;AAClC;AACA,0BAA0B,yCAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oDAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAQ,IAAI,yDAAuB;AAC/C,sBAAsB,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,oEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,2BAA2B;AAC9G;AACA;AACA;AACA,sFAAsF,2BAA2B;AACjH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,gBAAgB;AACnC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,oEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oEAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA,qBAAqB;AACrB;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAc,CAAC,oEAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sFAA+B;AACnE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,yCAAO;AACpC;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,eAAe,2CAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8DAA8D,oCAAoC,uDAAe,CAAC,kDAAa,GAAG,uDAAe,CAAC,sDAAQ,GAAG;AAC7J,yBAAyB,iEAAqB,EAAE,+CAA+C,6BAA6B,uDAAW,CAAC,kDAAS,GAAG,uDAAW,CAAC,sDAAW,GAAG,EAAE,+CAA+C;AAC/N;AACA,KAAK,OAAO,kDAAM,EAAE;AACpB,KAAK,gCAAgC,OAAO,kDAAM,SAAS,sDAAQ,IAAI;AACvE;AACA,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,sDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU,OAAO,kDAAa,EAAE,GAAG;AACxD,sBAAsB,kDAAM;AAC5B,uBAAuB,sDAAQ;AAC/B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B,uDAAe,CAAC,sDAAQ,GAAG,uDAAe,CAAC,kDAAa,GAAG,uDAAe,CAAC,kEAAoB,GAAG,uDAAe,oBAAoB;AAC/M,iBAAiB,iEAAqB,EAAE,uCAAuC,qBAAqB,uDAAW,CAAC,sDAAW,GAAG,uDAAW,CAAC,kDAAS,GAAG,uDAAW,CAAC,kEAAgB,GAAG,uDAAW,oBAAoB,EAAE,uCAAuC;AAC7P;AACA,KAAK,gCAAgC,OAAO,kDAAM,SAAS,sDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,kDAAM,EAAE;AACpB,KAAK,OAAO,kEAAa,EAAE;AAC3B,KAAK;AACL;AACA,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,sDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,kDAAM;AAC5B,uBAAuB,sDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,kDAAa,EAAE,GAAG,OAAO,kEAAoB,EAAE,GAAG,yBAAyB,EAAE,EAAE,QAAQ,EAAE;;AAEnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,sCAAsC,gEAAwB,EAAE,6EAA6E,qDAAqD,6CAA6C,iEAAyB,GAAG,8DAA8D,KAAK;AAC9U;AACA,gBAAgB,OAAO,iDAAK,uCAAuC;AACnE;AACA,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,qDAAS;AACvB;AACA;AACA;AACA,6BAA6B,8DAA8D;AAC3F,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,iDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,sCAAsC,cAAc;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wDAAY;AACvC;AACA;AACA;AACA,2BAA2B,wDAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,wDAAY;AACtC;AACA,0BAA0B,wDAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,4EAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0DAAS,mBAAmB,yDAAS;AAC3D;AACA;AACA;AACA,6BAA6B,kEAAW;AACxC;AACA;AACA;AACA,gGAAgG,KAAK;AACrG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4EAAqB;AACvD,qCAAqC,4EAAqB;AAC1D,iCAAiC,2EAAoB;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,uFAAuF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+BAA+B,gEA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E;AACA,0DAA0D,kCAAkC,gEAAwB,CAAC,uDAAkB,GAAG;AAC1I,oCAAoC,gEAAwB,EAAE,oFAAoF,uCAAuC,aAAa,iEAAyB,GAAG,yDAAyD,KAAK;AAChS;AACA,KAAK,OAAO,uDAAW;AACvB;AACA;AACA,YAAY,OAAO,iDAAK,EAAE;AAC1B,iBAAiB,OAAO,iDAAK,EAAE;AAC/B;AACA,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,qDAAS;AACvB;AACA;AACA,6BAA6B,yDAAyD;AACtF,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,uDAAkB,EAAE,EAAE,EAAE,GAAG;AACjE,kBAAkB,iDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAO;AACrC;AACA,2BAA2B,wDAAY;AACvC;AACA,4BAA4B,wDAAY;AACxC;AACA,yBAAyB,wDAAY;AACrC;AACA,2BAA2B,wDAAY;AACvC;AACA,0BAA0B,wDAAY;AACtC;AACA,2BAA2B,wDAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,4CAAU;AACnC,0DAA0D,oDAAG;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4EAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAI,KAAK,yDAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,2EAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,qDAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,eAAe;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,sIAAsI;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAS;AAC5C;AACA,QAAQ,oDAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,0DAAS;AACjB,mBAAmB,2CAAK;AACxB,+CAA+C,0DAAS;AACxD,aAAa;AACb,SAAS,GAAG,yDAAS;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4CAA4C,2BAA2B,gEAAwB,CAAC,sDAAiB,GAAG,gEAAwB,qBAAqB,gEAAwB,CAAC,sDAAQ,GAAG,gEAAwB,CAAC,kDAAa,GAAG,gEAAwB,CAAC,4DAAuB,GAAG,gEAAwB,sBAAsB,gEAAwB,CAAC,8DAAqB,MAAM,gEAAwB,YAAY,gEAAwB,CAAC,6DAAwB,GAAG,gEAAwB,uBAAuB,gEAAwB,uBAAuB;AACzjB,6BAA6B,gEAAwB,EAAE,sHAAsH;AAC7K,QAAQ,6DAAqB;AAC7B,QAAQ,6DAAqB;AAC7B,QAAQ,6DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,6DAAqB,MAAM,0DAAkB;AACrD,QAAQ,6DAAqB,MAAM,0DAAkB;AACrD,QAAQ,6DAAqB,MAAM,0DAAkB;AACrD,KAAK,EAAE,iGAAiG;AACxG,QAAQ,0DAAkB;AAC1B,KAAK,EAAE,WAAW,+iBAA+iB,YAAY,sLAAsL,oCAAoC,iEAAyB,GAAG,iDAAiD,IAAI,mEAA2B,GAAG;AACt5B;AACA;AACA,KAAK,OAAO,sDAAU,EAAE;AACxB,KAAK,gCAAgC,OAAO,kDAAM,0BAA0B,GAAG,OAAO,oDAAQ,EAAE,GAAG,OAAO,oDAAQ,EAAE,GAAG;AACvH,KAAK,gCAAgC,OAAO,kDAAM,SAAS,sDAAQ,IAAI,GAAG;AAC1E,KAAK,OAAO,kDAAM,EAAE;AACpB,KAAK,OAAO,4DAAgB,EAAE;AAC9B,KAAK,gCAAgC,OAAO,oDAAQ,EAAE,GAAG,OAAO,kDAAM,4BAA4B,GAAG;AACrG,KAAK,OAAO,8DAAc,gBAAgB,OAAO,oDAAQ,EAAE,GAAG;AAC9D,KAAK,iBAAiB;AACtB,KAAK,OAAO,6DAAiB,EAAE;AAC/B,KAAK,oCAAoC,OAAO,oDAAQ,EAAE,GAAG,OAAO,gDAAI,EAAE,GAAG,OAAO,kDAAM,4BAA4B,GAAG;AACzH,KAAK,8BAA8B,OAAO,oDAAQ,EAAE,GAAG,OAAO,oDAAQ,EAAE,GAAG,OAAO,kDAAM,4BAA4B;AACpH;AACA;AACA,gBAAgB,OAAO,2DAAe,2BAA2B,oBAAoB,IAAI;AACzF,wBAAwB,OAAO,wDAAY,6BAA6B;AACxE,4BAA4B,OAAO,wDAAY,iCAAiC;AAChF,YAAY,OAAO,iDAAK,0BAA0B;AAClD,gBAAgB,OAAO,iDAAK,8BAA8B;AAC1D,2BAA2B,OAAO,iDAAK,iCAAiC;AACxE,uBAAuB,OAAO,iDAAK,8BAA8B;AACjE,sBAAsB,OAAO,iDAAK,gCAAgC;AAClE,wBAAwB,OAAO,iDAAK,sCAAsC;AAC1E,gBAAgB,OAAO,iDAAK,8BAA8B;AAC1D,yBAAyB,OAAO,iDAAK,uCAAuC;AAC5E,oBAAoB,OAAO,iDAAK,kCAAkC;AAClE,wBAAwB,OAAO,iDAAK,sCAAsC;AAC1E,eAAe,OAAO,kDAAM,6BAA6B;AACzD,gBAAgB,OAAO,kDAAM,8BAA8B;AAC3D,aAAa,OAAO,kDAAM,2BAA2B;AACrD,eAAe,OAAO,kDAAM,6BAA6B;AACzD,cAAc,OAAO,kDAAM,4BAA4B;AACvD,eAAe,OAAO,kDAAM,6BAA6B;AACzD,aAAa,OAAO,kDAAM,2BAA2B;AACrD;AACA,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,qDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,iDAAiD;AAC9E,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,sDAAiB,EAAE,GAAG;AAC5D,sBAAsB,kDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,oDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,kDAAM;AAC5B,uBAAuB,sDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,kDAAa,EAAE,GAAG,OAAO,4DAAuB,EAAE,GAAG;AAC/E,sBAAsB,oDAAQ;AAC9B,aAAa;AACb,sBAAsB,kDAAM;AAC5B;AACA,aAAa,GAAG,GAAG,OAAO,8DAAqB;AAC/C,sBAAsB,oDAAQ;AAC9B,aAAa,GAAG,GAAG,iBAAiB,GAAG,OAAO,6DAAwB,EAAE,GAAG;AAC3E,sBAAsB,oDAAQ;AAC9B,aAAa;AACb,sBAAsB,gDAAI;AAC1B,aAAa;AACb,sBAAsB,kDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAQ;AAC9B,aAAa;AACb,sBAAsB,kDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,kDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,2DAAe;AACjC,qCAAqC,oBAAoB;AACzD,SAAS;AACT,kBAAkB,wDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,wDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,iDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F,oCAAoC,+DAAuB,EAAE,uBAAuB;AACpF,oCAAoC,+DAAuB,EAAE;AAC7D;AACA,iBAAiB,wEAAmB,GAAG;AACvC,cAAc,oDAAoD,gEAAwB;AAC1F,cAAc,oDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB,cAAc,oDAAoD,iEAAyB,kBAAkB,4BAA4B,oGAAoG,EAAE,wBAAwB,SAAS,wEAAmB,6FAA6F,EAAE,EAAE,EAAE,EAAE;;AAExY;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEyV;;AAEzV,qC;;;;;;;;;;;;;;;;;ACxtHoD;AACpB;AACzB;AACP,4BAA4B,YAAY;AACxC,+BAA+B,aAAa,4DAAc,CAAC;AAC3D;AACA;AACA;AACA,WAAW,6CAAK;AAChB;AACA,oC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR2D;AACV;AACY;AAGP;;;;;;;;;;;;;;ICsC9B,sFAAmD;IAAA,sEAAW;IAAA,4DAAkB;;;IAChF,2EAAgC;IAAA,uDAA0C;IAAA,4DAAW;;;IAArD,0DAA0C;IAA1C,0HAA0C;;;IAG1E,sFAAmD;IAAA,yEACnD;IAAA,4DAAkB;;;IAClB,2EAAgC;IAC9B,uDAAsD;;IAAA,4DAAW;;;IAAjE,0DAAsD;IAAtD,iMAAsD;;;IAGxD,sFAAmD;IAAA,+EACnD;IAAA,4DAAkB;;;IAClB,2EAAgC;IAAC,uDACjC;IAAA,4DAAW;;;IADsB,0DACjC;IADiC,qGACjC;;;IAGA,sFAAmD;IAAA,gEAAK;IAAA,4DAAkB;;;IAC1E,2EAAgC;IAAC,uDAAqB;IAAA,4DAAW;;;IAAhC,0DAAqB;IAArB,gGAAqB;;;IAItD,sFAAmD;IAAA,iEACnD;IAAA,4DAAkB;;;IAClB,2EAAgC;IAAA,uDAAqB;IAAA,4DAAW;;;IAAhC,0DAAqB;IAArB,sFAAqB;;;IAGrD,sFAAmD;IAAA,wEAAQ;IAAA,4DAAkB;;;IAC7E,2EAAgC;IAAA,uDAAe;IAAA,4DAAW;;;IAA1B,0DAAe;IAAf,gFAAe;;;IAG/C,sFAAmD;IAAA,mEAAQ;IAAA,4DAAkB;;;IAE3E,+EAAqD;IAAA,qEAAU;IAAA,4DAAW;;;IAC1E,+EAAsD;IAAA,8DAAG;IAAA,4DAAW;;;IACpE,+EAAuD;IAAA,8DAAG;IAAA,4DAAW;;;IAHvE,wEAAoC;IAClC,4IAA0E;IAC1E,4IAAoE;IACpE,4IAAqE;IACvE,qEAAe;;;IAHF,0DAAwB;IAAxB,0FAAwB;IACxB,0DAAyB;IAAzB,2FAAyB;IACzB,0DAAwB;IAAxB,0FAAwB;;;IAKrC,sFAAgE;IAAA,kEAAO;IAAA,4DAAkB;;;;IACzF,+EAA8D;IAC5D,6EAA2E;IAAnD,sYAA0B;IAChD,wEAA0B;IAAA,qEAAU;IAAA,4DAAI;IAC1C,4DAAS;IACT,6EAA2E;IACzE,2EAAU;IAAA,oEAAS;IAAA,4DAAW;IAChC,4DAAS;IACT,qFAA0B;IACxB,6EAAsE;IAAxB,mYAAuB;IACnE,yEAAsD;IAAA,gEAAI;IAAA,4DAAI;IAC9D,wEAAM;IAAA,mEAAO;IAAA,4DAAO;IACtB,4DAAS;IACT,8EAAoE;IAAtB,kYAAqB;IACjE,yEAA6C;IAAA,kEAAM;IAAA,4DAAI;IACvD,wEAAM;IAAA,mEAAO;IAAA,4DAAO;IACtB,4DAAS;IACX,4DAAW;IACb,4DAAW;;;IAbuC,0DAA0B;IAA1B,mFAA0B;;;IAgB9E,4EACiB;;;IACjB,qEACU;;;IAEZ,0EAA4E;IAC1E,oGACF;IAAA,4DAAM;;;ADlGnB,MAAM,qBAAqB;IAmBhC,YAAmB,MAAiB,EAAU,OAAuB,EAAU,KAAyB;QAArF,WAAM,GAAN,MAAM,CAAW;QAAU,YAAO,GAAP,OAAO,CAAgB;QAAU,UAAK,GAAL,KAAK,CAAoB;QAjBxG,qBAAgB,GAAG;YACjB,KAAK;YACL,UAAU;YACV,WAAW;YACX,OAAO;YACP,OAAO;YACP,SAAS;YACT,SAAS;YACT,SAAS;SACV,CAAC;QAGK,aAAQ,GAAQ,IAAI,uEAAkB,CAAC,EAAE,CAAC,CAAC;IAKwD,CAAC;IAE3G,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,eAAe;QACX,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,gBAAgB;QAC1D,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,qBAAqB;IACrB,WAAW,CAAC,WAAmB;QAE7B,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;QACjC,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;QAExC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC;IACrC,CAAC;IAED,WAAW;QAET,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzG;YACE,IAAI,EAAE,MAAM,GAAE;gBACZ,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;gBAE1B,IAAI,QAAQ,GAAG,EAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAC,CAAC;gBAEjF,qCAAqC;gBACrC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC7E;oBACE,IAAI,EAAE,MAAM,CAAC,EAAE;wBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC;oBAC9B,CAAC;iBACF,CACF,CAAC;YACJ,CAAC;SACF,CACF,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,GAAQ;QACf,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC7E;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAG,MAAM,EACT;oBACE,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;gBACD,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,uBAAuB,CAAC;YACxD,CAAC;SACF,CACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,GAAQ;QACb,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC9E;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAG,CAAC,MAAM,EACV;oBACE,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;gBACD,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,sBAAsB,CAAC;YACvD,CAAC;SACF,CACF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,GAAG;QACb,IAAI,aAAa,CAAC;QAClB,IAAI,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,MAAM,EAAE;YAC5C,aAAa,GAAG,KAAK,CAAC;SACvB;aAAM;YACL,aAAa,GAAG,KAAK,CAAC;SACvB;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+DAAa,EAAE;YAC9B,IAAI,EAAE;gBACJ,GAAG,EAAE,GAAG;gBACR,MAAM,EAAE,SAAS;aAClB;YACD,SAAS,EAAE,aAAa;YACxB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;IACL,CAAC;;0FAzGU,qBAAqB;mHAArB,qBAAqB;kEAgBrB,qEAAY;kEACZ,2DAAO;;;;;;QC/BpB,6EAAyB;QACvB,yEAA6B;QAC3B,yEAA0B;QACxB,yEAAiB;QACf,yEAAqD;QACnD,wEAAyC;QACvC,wEAA4B;QAC1B,wEAAuB;QAAA,+EAAoB;QAAA,4DAAK;QAClD,4DAAK;QACL,wEAAqC;QACnC,wEAAkC;QAChC,oEAA2B;QAAA,mEAAO;QAAA,4DAAI;QAC1C,4DAAK;QACL,0EAAmC;QAAA,uEAAW;QAAA,4DAAK;QACrD,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,0EAAiB;QACf,2EAAuB;QACrB,2EAA2B;QACzB,0EAAiB;QACf,2EAAqD;QACnD,2EAAkB;QAChB,2EAAkB;QAChB,2EAA8B;QAC5B,2EAAiC;QAC/B,0EAAiB;QACf,2EAAmB;QACjB,0EAAqC;QACnC,0EAAqB;QACnB,sEAAI;QACF,0EAAQ;QAAA,uEAAW;QAAA,4DAAS;QAAA,4DAAK;QACrC,4DAAK;QACL,0EAA4B;QAC1B,6EAA0B;QAAA,yEAAsC;QAAA,kEAAM;QAAA,4DAAI;QAAA,4DAAQ;QAClF,6EAC0B;QADK,mJAAS,oCAAgC,IAAC;QAAzE,4DAC0B;QAC5B,4DAAK;QACP,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,qFAAmE;QACjE,6EAAiC;QAC/B,4IAAgF;QAChF,8HAAqF;QACvF,qEAAe;QACf,6EAAsC;QACpC,4IACkB;QAClB,8HACmE;QACrE,qEAAe;QACf,6EAAuC;QACrC,4IACkB;QAClB,8HACW;QACb,qEAAe;QACf,6EAAmC;QACjC,4IAA0E;QAC1E,8HAAiE;QACnE,qEAAe;QAEf,6EAAmC;QACjC,4IACkB;QAClB,8HAAgE;QAClE,qEAAe;QACf,6EAAqC;QACnC,4IAA6E;QAC7E,8HAA0D;QAC5D,qEAAe;QACf,6EAAqC;QACnC,4IAA6E;QAC7E,sIAIe;QACjB,qEAAe;QAEf,6EAAqC;QACnC,4IAAyF;QACzF,+HAiBW;QACb,qEAAe;QAEf,0IACiB;QACjB,4HACU;QACZ,4DAAY;QACZ,oHAEM;QACN,oFAA+G;QACjH,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QAhF4B,2DAAuB;QAAvB,oFAAuB;QA8DtB,2DAAiC;QAAjC,iGAAiC;QAEpB,0DAA0B;QAA1B,kGAA0B;QAGpD,0DAAgC;QAAhC,gGAAgC;QAGZ,0DAAe;QAAf,wEAAe;;;;;;;;;;;;;;;;;;;;;;;ACjHY;;;;;;;;;ICCvE,yEAA+C;IAC7C,yEAAyB;IACvB,yEAA0B;IACxB,yEAAkC;IAChC,yEAAwC;IACtC,yEAAqC;IACnC,yEAAuC;IAAA,uDAA0C;IAAA,4DAAM;IACvF,yEAA6B;IAAA,kEAAO;IAAA,4DAAM;IAC5C,4DAAM;IACR,4DAAM;IACR,4DAAM;IACR,4DAAM;IACN,8EAA8E;IAAtD,4RAAS,wBAAiB,IAAC;IACjD,4EAAU;IAAA,iEAAK;IAAA,4DAAW;IAC5B,4DAAS;IACX,4DAAM;IACN,2EAAwB;IACtB,oFAAkB;IAChB,2EAA8G;IAC5G,yEAA8C;IAAA,sEAAU;IAAA,4DAAI;IAC5D,2EAAiC;IAAC,wDAAyD;;IAAA,4DAAM;IACnG,4DAAM;IACN,2EAAmG;IACjG,yEAA8C;IAAA,iEAAK;IAAA,4DAAI;IACvD,2EAAiC;IAAC,wDAClC;IAAA,4DAAM;IACR,4DAAM;IACN,2EAA8G;IAC5G,yEAA8C;IAAA,0EAAc;IAAA,4DAAI;IAChE,2EAAiC;IAAC,wDAClC;IAAA,4DAAM;IACR,4DAAM;IACN,2EAA+F;IAC7F,yEAA8C;IAAA,uEAAW;IAAA,4DAAI;IAC7D,2EAAiC;IAAC,wDAClC;IAAA,4DAAM;IACR,4DAAM;IACN,2EAA+F;IAC7F,yEAA8C;IAAA,mEAAO;IAAA,4DAAI;IACzD,2EAAiC;IAAC,wDAClC;IAAA,4DAAM;IACR,4DAAM;IACR,4DAAmB;IACrB,4DAAM;IACR,4DAAM;;;IAtC6C,0DAA0C;IAA1C,gIAA0C;IAYR,0DAA8B;IAA9B,uFAA8B;IAEzE,0DAAyD;IAAzD,iNAAyD;IAEzB,0DAA8B;IAA9B,uFAA8B;IAE9D,0DAClC;IADkC,oGAClC;IAE6E,0DAA8B;IAA9B,uFAA8B;IAEzE,0DAClC;IADkC,wGAClC;IAE8D,0DAA8B;IAA9B,uFAA8B;IAE1D,0DAClC;IADkC,sGAClC;IAE8D,0DAA8B;IAA9B,uFAA8B;IAE1D,0DAClC;IADkC,8FAClC;;ADjCH,MAAM,aAAa;IAIxB,YACS,SAAsC,EACb,IAAS;QADlC,cAAS,GAAT,SAAS,CAA6B;QACb,SAAI,GAAJ,IAAI,CAAK;QAJ3C,cAAS,GAAG,KAAK,CAAC;QAMhB,mBAAmB;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;IACH,CAAC;IAED,MAAM;QACJ,eAAe;IACjB,CAAC;IAED,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;;0EAxBU,aAAa,uMAMd,qEAAe;2GANd,aAAa;QCR1B,yEAA0B;QACxB,2GA4CM;QACR,4DAAM;;QA7CE,0DAAe;QAAf,+EAAe;;;;;;;;;;;;;;;;;;;;;;;;ACDgC;AAEI;AACV;AACY;;;;;;;;;ICiErC,sFAAmD;IAAA,sEAAW;IAAA,4DAAkB;;;IAChF,2EAAgC;IAAA,uDAA0C;IAAA,4DAAW;;;IAArD,0DAA0C;IAA1C,0HAA0C;;;IAG1E,sFAAmD;IAAA,wEAAa;IAAA,4DAAkB;;;IAClF,2EAAgC;IAAA,uDAAqB;IAAA,4DAAW;;;IAAhC,0DAAqB;IAArB,sFAAqB;;;IAGrD,sFAAmD;IAAA,gEAAK;IAAA,4DAAkB;;;IAC1E,2EAAgC;IAAA,uDAAqB;IAAA,4DAAW;;;IAAhC,0DAAqB;IAArB,sFAAqB;;;IAGrD,sFAAmD;IAAA,+DAAI;IAAA,4DAAkB;;;IACzE,2EAAgC;IAAA,uDAChC;;IAAA,4DAAW;;;IADqB,0DAChC;IADgC,yKAChC;;;IAGA,sFAAmD;IAAA,gEAAK;IAAA,4DAAkB;;;IAC1E,2EAAgC;IAAA,uDAAgB;IAAA,4DAAW;;;IAA3B,0DAAgB;IAAhB,iFAAgB;;;IAGhD,sFAAmD;IAAA,2EAAW;IAAA,4DAAkB;;;IAChF,2EAAgC;IAAA,uDAAyB;IAAA,4DAAW;;;IAApC,0DAAyB;IAAzB,0FAAyB;;;IAGzD,sFAAmD;IAAA,wEAAQ;IAAA,4DAAkB;;;IAC7E,2EAAgC;IAAA,uDAAe;IAAA,4DAAW;;;IAA1B,0DAAe;IAAf,gFAAe;;;IAG/C,sFAAmD;IAAA,mEAAQ;IAAA,4DAAkB;;;IAE3E,+EAAqD;IAAA,qEAAU;IAAA,4DAAW;;;IAC1E,+EAAsD;IAAA,8DAAG;IAAA,4DAAW;;;IACpE,+EAAuD;IAAA,8DAAG;IAAA,4DAAW;;;IAHvE,wEAAoC;IAClC,yIAA0E;IAC1E,yIAAoE;IACpE,yIAAqE;IACvE,qEAAe;;;IAHF,0DAAwB;IAAxB,0FAAwB;IACxB,0DAAyB;IAAzB,2FAAyB;IACzB,0DAAwB;IAAxB,0FAAwB;;;IAGvC,4EAAqE;;;IACrE,qEACU;;;IAEZ,0EAAmF;IACjF,oGACF;IAAA,4DAAM;;;ADlGnB,MAAM,kBAAkB;IA2B7B,YAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QA1B3C,qBAAgB,GAAa;YAC3B,KAAK;YACL,OAAO;YACP,OAAO;YACP,SAAS;YACT,UAAU;YACV,WAAW;YACX,SAAS;YACT,SAAS;SACV,CAAC;QAKK,eAAU,GAAQ,IAAI,uEAAkB,CAAC,EAAE,CAAC,CAAC;QAC7C,gBAAW,GAAG,2DAAU,CAAC,IAAI,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAWnB,CAAC;IAL9C,eAAe;QACb,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAID,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzG;YACE,IAAI,EAAE,MAAM,GAAE;gBACZ,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;gBAE1B,IAAI,QAAQ,GAAG,EAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAC,CAAC;gBAEjF,0DAA0D;gBAC1D,IAAI,CAAC,OAAO,CAAC,kCAAkC,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAClH;oBACE,IAAI,EAAE,MAAM,GAAE;wBACZ,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;oBAC/B,CAAC;iBACF,CACF,CAAC;gBAEF,kDAAkD;gBAClD,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzF;oBACE,IAAI,EAAE,MAAM,GAAE;wBACZ,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;oBAC7B,CAAC;iBACF,CACF,CAAC;gBAEF,qCAAqC;gBACrC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC7E;oBACE,IAAI,EAAE,MAAM,CAAC,EAAE;wBACb,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;oBACzB,CAAC;iBACF,CACF,CAAC;gBAEF,eAAe;gBACf,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACtG;oBACE,IAAI,EAAE,MAAM,GAAE;wBACZ,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC;oBAChC,CAAC;iBACF,CACF,CAAC;YACJ,CAAC;SACF,CACF,CAAC;IAGJ,CAAC;;oFA7EU,kBAAkB;gHAAlB,kBAAkB;kEAmBlB,qEAAY;kEACZ,2DAAO;;;;;qFAtBP,CAAC,qDAAQ,CAAC;QCXvB,6EAAyB;QACvB,yEAA6B;QAC3B,yEAA0B;QACxB,yEAAiB;QACf,yEAAqD;QACnD,wEAAyC;QACvC,wEAA4B;QAC1B,wEAAuB;QAAA,oEAAS;QAAA,4DAAK;QACvC,4DAAK;QACL,wEAAqC;QACnC,wEAAkC;QAChC,oEAA2B;QAAA,mEAAO;QAAA,4DAAI;QAC1C,4DAAK;QACL,0EAAmC;QAAA,kFAAiB;QAAA,4DAAK;QAC3D,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QAEN,0EAAiB;QACf,2EAA+B;QAC7B,2EAAkD;QAChD,2EAA6B;QAC3B,0EAAmB;QAAA,4EAAgB;QAAA,4DAAK;QACxC,0EAAqB;QAAA,oEAA+C;QAAA,wEAAM;QAAA,wDAA0B;QAAA,4DAAO;QAAA,4DAAK;QAChH,yEAAiB;QAAA,sFAA0B;QAAA,4DAAI;QACjD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAA+B;QAC7B,2EAAkD;QAChD,2EAA6B;QAC3B,0EAAmB;QAAA,+EAAmB;QAAA,4DAAK;QAC3C,0EAAqB;QAAA,oEAAiD;QAAA,wEAAM;QAAA,wDAA0B;QAAA,4DAAO;QAAA,4DAAK;QAClH,yEAAiB;QAAA,yFAA6B;QAAA,4DAAI;QACpD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAA+B;QAC7B,2EAAkD;QAChD,2EAA6B;QAC3B,0EAAmB;QAAA,6EAAiB;QAAA,4DAAK;QACzC,0EAAqB;QAAA,oEAA0D;QAAA,wEAAM;QAAA,wDAAwB;QAAA,4DAAO;QAAA,4DAAK;QACzH,yEAAiB;QAAA,oFAAwB;QAAA,4DAAI;QAC/C,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAA+B;QAC7B,2EAAkD;QAChD,2EAA6B;QAC3B,0EAAmB;QAAA,gFAAoB;QAAA,4DAAK;QAC5C,0EAAqB;QAAA,oEAAiD;QAAA,wEAAM;QAAA,wDAAoB;QAAA,4DAAO;QAAA,4DAAK;QAC5G,yEAAiB;QAAA,uFAA2B;QAAA,4DAAI;QAClD,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QAEN,sEAAI;QAAA,kGAAsC;QAAA,4DAAK;QAC/C,0EAAiB;QACf,2EAAuB;QACrB,2EAA2B;QACzB,0EAAiB;QACf,2EAAqD;QACnD,2EAAkB;QAChB,2EAAkB;QAChB,2EAA+C;QAC7C,iFAA8D;QAC5D,6EAAiC;QAC/B,yIAAgF;QAChF,2HAAqF;QACvF,qEAAe;QACf,6EAAmC;QACjC,yIAAkF;QAClF,2HAAgE;QAClE,qEAAe;QACf,6EAAmC;QACjC,yIAA0E;QAC1E,2HAAgE;QAClE,qEAAe;QACf,6EAAqC;QACnC,yIAAyE;QACzE,2HACW;QACb,qEAAe;QACf,6EAAsC;QACpC,yIAA0E;QAC1E,2HAA2D;QAC7D,qEAAe;QACf,6EAAuC;QACrC,yIAAgF;QAChF,2HAAoE;QACtE,qEAAe;QACf,6EAAqC;QACnC,yIAA6E;QAC7E,2HAA0D;QAC5D,qEAAe;QACf,6EAAqC;QACnC,yIAA6E;QAC7E,mIAIe;QACjB,qEAAe;QACf,uIAAqE;QACrE,yHACU;QACZ,4DAAY;QACZ,iHAEM;QACN,oFAEgB;QAClB,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QApG4E,2DAA0B;QAA1B,8HAA0B;QASxB,2DAA0B;QAA1B,2FAA0B;QASjB,2DAAwB;QAAxB,0HAAwB;QASjC,2DAAoB;QAApB,kHAAoB;QAgB7E,2DAAyB;QAAzB,sFAAyB;QAsCjB,2DAAiC;QAAjC,iGAAiC;QACpB,0DAA0B;QAA1B,kGAA0B;QAGpD,0DAAkC;QAAlC,kGAAkC;QAGd,0DAAe;QAAf,wEAAe;;;;;;;;;;;;;;;;;;;;;;;;AC/GN;AACc;AACS;AACf;AACG;AACA;;;AAClE,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE,8EAAkB;KAC9B;IACD;QACE,IAAI,EAAE,cAAc;QACpB,SAAS,EAAE,uFAAqB;KACjC;IACD;QACE,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,wEAAgB;KAC5B;IACD;QACE,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,2EAAiB;KAC7B;IACD;QACE,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,2EAAiB;KAC7B;CACF,CAAC;AAMK,MAAM,mBAAmB;;sFAAnB,mBAAmB;gHAAnB,mBAAmB;oHAHrB,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEX,mBAAmB,oFAFpB,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BuB;AACgB;AACJ;AACZ;AACQ;AACI;AACA;AACR;AACc;AACD;AACE;AACX;AACA;AACA;AACY;AACV;AACE;AACI;AACN;AACI;AACJ;AACD;AACsB;AAEhB;AACO;AACS;AACX;AACJ;AACG;AACA;AACrB;;;AA0CtC,MAAM,YAAY;;wEAAZ,YAAY;yGAAZ,YAAY;8GAFZ,EAAE,YA7BJ;YACP,uDAAW;YACX,yDAAY;YACZ,uEAAmB;YACnB,qDAAa;YACb,kEAAwB,CAAC;gBACvB,OAAO,EAAE,GAAG,EAAE,CAAC,sJAAiB;aACjC,CAAC;YACF,0EAAsB;YACtB,kEAAa;YACb,sEAAe;YACf,sEAAe;YACf,8DAAkB;YAClB,4EAAkB;YAClB,2EAAiB;YACjB,6EAAkB;YAClB,kEAAa;YACb,kEAAa;YACb,kEAAa;YACb,8EAAmB;YACnB,oEAAc;YACd,sEAAe;YACf,0EAAiB;YACjB,oEAAc;YACd,wEAAgB;YAChB,oEAAc;YACd,mEAAc;YACd,yFAAwB;SACzB;mIAGU,YAAY,mBAtCrB,8EAAkB;QAClB,uFAAqB;QACrB,4EAAa;QACb,wEAAgB;QAChB,2EAAiB;QACjB,2EAAiB,aAGjB,uDAAW;QACX,yDAAY;QACZ,uEAAmB;QACnB,qDAAa,8DAIb,0EAAsB;QACtB,kEAAa;QACb,sEAAe;QACf,sEAAe;QACf,8DAAkB;QAClB,4EAAkB;QAClB,2EAAiB;QACjB,6EAAkB;QAClB,kEAAa;QACb,kEAAa;QACb,kEAAa;QACb,8EAAmB;QACnB,oEAAc;QACd,sEAAe;QACf,0EAAiB;QACjB,oEAAc;QACd,wEAAgB;QAChB,oEAAc;QACd,mEAAc;QACd,yFAAwB;;;;;;;;;;;;;;;;;;;;;;;;;ICjDlB,0EAAmD;IACjD,yEAAiB;IACf,0EAAoB;IAClB,0EAAsB;IACpB,yEAAiB;IACf,0EAAkC;IAChC,qEAAuG;IACzG,4DAAM;IACN,0EAAwC;IACtC,0EAA4B;IAC1B,qEAAI;IAAA,wDAA4B;IAAA,4DAAK;IACvC,4DAAM;IACN,qEAAG;IACD,0EAAQ;IAAA,wDAAuB;IAAA,4DAAS;IAAA,iEAAI;IAC5C,qEAAG;IAAA,wDAA4B;IAAA,4DAAI;IAAA,iEAAI;IACvC,qEAAG;IAAA,wDAAuE;IAAA,4DAAI;IAChF,4DAAI;IACJ,2EAAyB;IACvB,qEAAG;IAAA,wDAAoI;IAAA,iEAAI;IAAA,4DAAI;IACjJ,4DAAM;IACR,4DAAM;IACN,2EAAkC;IAChC,2EAAyE;IACvE,uEAAK;IAAA,oEAAgD;IAAA,wDAAgB;IAAA,4DAAM;IAC3E,uEAAK;IAAA,oEAA0C;IAAA,wDAAc;IAAA,4DAAM;IACnE,uEAAK;IAAA,oEAAuC;IAAA,wDAAkB;IAAA,4DAAM;IACpE,uEAAK;IAAA,oEAA2C;IAAA,wDAAa;IAAA,4DAAM;IACrE,4DAAM;IACR,4DAAM;IACR,4DAAM;IACR,4DAAM;IACR,4DAAM;IACR,4DAAM;IACR,4DAAM;;;;IA3BmE,0DAAyC;IAAzC,6LAAyC;IAIhG,0DAA4B;IAA5B,0GAA4B;IAGxB,0DAAuB;IAAvB,uFAAuB;IAC5B,0DAA4B;IAA5B,4FAA4B;IAC5B,0DAAuE;IAAvE,qJAAuE;IAGvE,0DAAoI;IAApI,2OAAoI;IAKlF,0DAAgB;IAAhB,gFAAgB;IACtB,0DAAc;IAAd,8EAAc;IACjB,0DAAkB;IAAlB,kFAAkB;IACd,0DAAa;IAAb,6EAAa;;ACvC9E,MAAM,gBAAgB;IAI3B,YAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QAFpC,mBAAc,GAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAC,iBAAiB,CAAC;IAEvB,CAAC;IAE/C,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC/E;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC5B,CAAC;SACF,CACF;IACH,CAAC;;gFAdU,gBAAgB;8GAAhB,gBAAgB;QDR7B,6EAAyB;QACvB,yEAA6B;QAC3B,yEAA0B;QACxB,yEAAiB;QACf,yEAAqD;QACnD,wEAAyC;QACvC,wEAA4B;QAC1B,wEAAuB;QAAA,wEAAQ;QAAA,4DAAK;QACtC,4DAAK;QACL,wEAAqC;QACnC,wEAAkC;QAChC,oEAA2B;QAAA,mEAAO;QAAA,4DAAI;QAC1C,4DAAK;QACL,0EAAmC;QAAA,yEAAQ;QAAA,4DAAK;QAClD,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAA0B;QACxB,2EAAqD;QACnD,2EAAkB;QAChB,iHAiCM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QAtCmC,2DAAc;QAAd,oFAAc;;;;;;;;;;;;;;;;;;;;;;;;;;IEFrD,0EAA4D;IAAA,qEAAI;IAAA,+FAAoC;IAAA,4DAAK;IAAA,4DAAM;;;IAC/G,0EAAqF;IACnF,0EAA+B;IAC7B,0EAA0D;IACxD,qEAAwG;IACxG,0EAAc;IACZ,yEAAsB;IAAA,uDAA4B;IAAA,4DAAK;IACvD,oEAAG;IAAA,uDAAgC;IAAA,4DAAI;IACzC,4DAAM;IACR,4DAAM;IACN,oEAAqB;IACrB,2EAAyE;IACvE,uEAAK;IAAA,oEAAgD;IAAA,wDAAgB;IAAA,4DAAM;IAC3E,uEAAK;IAAA,oEAAuC;IAAA,wDAAkB;IAAA,4DAAM;IACpE,uEAAK;IAAA,oEAA0C;IAAA,wDAAc;IAAA,4DAAM;IACrE,4DAAM;IACR,4DAAM;IACR,4DAAM;;;;IAbK,0DAAyC;IAAzC,6LAAyC;IAEtB,0DAA4B;IAA5B,0GAA4B;IAC/C,0DAAgC;IAAhC,yGAAgC;IAKgB,0DAAgB;IAAhB,gFAAgB;IACzB,0DAAkB;IAAlB,kFAAkB;IACf,0DAAc;IAAd,8EAAc;;ACzBlE,MAAM,iBAAiB;IAK5B,YAAoB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QAFpC,mBAAc,GAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAC,iBAAiB,CAAC;IAEvB,CAAC;IAE/C,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzG;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;gBAC1B,IAAI,QAAQ,GAAG,EAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAC,CAAC;gBACjF,kDAAkD;gBAClD,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzF;oBACE,IAAI,EAAE,MAAM,GAAE;wBACZ,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;oBAC7B,CAAC;iBACF,CACF,CAAC;YACJ,CAAC;SACF,CACF,CAAC;IACJ,CAAC;;kFAxBU,iBAAiB;+GAAjB,iBAAiB;QDR9B,6EAAyB;QACvB,yEAA6B;QAC3B,yEAA0B;QACxB,yEAAiB;QACf,yEAAqD;QACnD,wEAAyC;QACvC,wEAA4B;QAC1B,wEAAuB;QAAA,mEAAQ;QAAA,4DAAK;QACtC,4DAAK;QACL,wEAAqC;QACnC,wEAAkC;QAChC,oEAA2B;QAAA,mEAAO;QAAA,4DAAI;QAC1C,4DAAK;QACL,0EAAmC;QAAA,oEAAQ;QAAA,4DAAK;QAClD,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,0EAAiB;QACf,gHAA+G;QAC/G,iHAgBM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;QApBE,2DAAgC;QAAhC,mIAAgC;QAC8B,0DAAe;QAAf,qFAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IE0D7E,0EAA4C;IAAA,uDAAa;IAAA,4DAAM;;;IAAnB,0DAAa;IAAb,iFAAa;;;IAIvD,4EAAyC;IAAA,qFAA0B;IAAA,4DAAY;;;IAK/E,4EAAyC;IAAA,qFAA0B;IAAA,4DAAY;;AC5EtF,MAAM,iBAAiB;IAS5B,YAAoB,OAAuB,EAAU,MAA0B,EAAU,MAAc;QAAnF,YAAO,GAAP,OAAO,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAoB;QAAU,WAAM,GAAN,MAAM,CAAQ;QARhG,oBAAe,GAAG,KAAK,CAAC;QACxB,YAAO,GAAG,KAAK,CAAC;QAKhB,mBAAc,GAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAC,iBAAiB,GAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAEI,CAAC;IAE3G,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACzG;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YAC1B,CAAC;SACF,CACF;IACH,CAAC;IAED,WAAW;QACT,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAEF,QAAQ,CAAC,KAAK;QAEZ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAC9G;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAG,CAAC,MAAM,EACV;oBACE,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,0CAA0C,CAAC,CAAC;oBAC3E,OAAO;iBACR;gBAED,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,qCAAqC,CAAC,CAAC;gBACtE,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC;YACD,KAAK,EAAE,KAAK,CAAC,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,oCAAoC,CAAC,CAAC;YACvE,CAAC;SACF,CACF,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,cAAsB;QAEnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACtG;YACC,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,oCAAoC,CAAC,CAAC;gBACrE,cAAc,CAAC,SAAS,EAAE,CAAC;YAC7B,CAAC;YACD,KAAK,EAAE,KAAK,CAAC,EAAE;gBACb,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,SAAS,GAAG,gCAAgC,CAAC;YACpD,CAAC;SACD,CACF,CAAC;IACH,CAAC;IAED,UAAU,CAAC,UAAU;QAEnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG;YAChB,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,SAAS;YACpB,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG;YAC3B,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM;YACjC,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,OAAO;YACnC,WAAW,EAAE,UAAU,CAAC,KAAK,CAAC,SAAS;YACvC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK;YAC/B,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;YAC7B,UAAU,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ;YACrC,UAAU,EAAE,IAAI;YAChB,cAAc,EAAE,eAAe;YAC/B,OAAO,EAAE;gBACP,EAAC,QAAQ,EAAE,CAAC,EAAC;aACd;SACF,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CACxG;YACE,IAAI,EAAE,MAAM,CAAC,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC5D,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,2CAA2C,CAAC,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC9C,CAAC;YACD,KAAK,EAAE,KAAK,CAAC,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC;YAC/D,CAAC;SACF,CACF,CAAC;IACJ,CAAC;;kFAnGU,iBAAiB;+GAAjB,iBAAiB;;QDsB9B,6EAAyB;QACvB,yEAA6B;QAC3B,yEAA0B;QACxB,yEAAiB;QACf,yEAAqD;QACnD,wEAAyC;QACvC,wEAA4B;QAC1B,wEAAuB;QAAA,kEAAO;QAAA,4DAAK;QACrC,4DAAK;QACL,wEAAqC;QACnC,wEAAkC;QAChC,oEAA2B;QAAA,mEAAO;QAAA,4DAAI;QAC1C,4DAAK;QACL,0EAAmC;QAAA,mEAAO;QAAA,4DAAK;QACjD,4DAAK;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAAkB;QAChB,2EAAoB;QAClB,2EAA0B;QACxB,2EAA+D;QAC7D,2EAAuB;QAAA,wDAAwC;QAAA,4DAAM;QACrE,2EAAyB;QAAA,wDAA6B;QAAA,4DAAM;QAC9D,4DAAM;QACN,sEAAkE;QAClE,6EAAoD;QAAA,oEAAoD;QAAA,4DAAQ;QAChH,6EAAwG;QAArF,iJAAU,oBAAgB,IAAC;QAA9C,4DAAwG;QACxG,qEAAG;QAAA,wDAAgC;QAAA,4DAAI;QACvC,qEAAG;QAAA,wDAAqD;QAAA,4DAAI;QAC5D,uEAAK;QACH,4EAAoB;QAClB,yEAA0B;QAAA,iEAAK;QAAA,4DAAI;QAAA,wDAAwB;QAAA,4DAAO;QACtE,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAAkB;QAChB,2EAAoB;QAClB,sEAAI;QACF,0EAAQ;QAAA,uFAA2B;QAAA,4DAAS;QAAA,4DAAK;QACrD,4DAAM;QACN,2EAAkB;QAChB,2EAA+B;QAC7B,gFAA2E;QAA5C,2RAAY,uBAA8B,IAAC;QACxE,gHAA+D;QAC/D,sFAA6D;QAC3D,6EAAW;QAAA,6EAAiB;QAAA,4DAAY;QACxC,wEAAiD;QACjD,4HAA+E;QACjF,4DAAiB;QACjB,sFAA6D;QAC3D,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,wEAAoE;QACpE,4HAA+E;QACjF,4DAAiB;QACjB,8EAAoH;QAAA,mEAAO;QAAA,4DAAS;QACtI,4DAAO;QACT,4DAAM;QACR,4DAAM;QACR,4DAAM;QACN,2EAAkB;QAChB,2EAAoB;QAClB,sEAAI;QACF,0EAAQ;QAAA,mEAAO;QAAA,4DAAS;QAAC,qEAAQ;QAAA,4DAAK;QAC1C,4DAAM;QACN,2EAAkB;QAChB,gFAA+D;QAApC,2RAAY,mBAAsB,IAAC;QAC5D,2EAA0B;QACxB,2EAAgC;QAC9B,2EAAwB;QACtB,sFAA6D;QAC3D,6EAAW;QAAA,6EAAiB;QAAA,4DAAY;QACxC,wEAAiF;QACnF,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,2EAAgC;QAC9B,2EAAwB;QACtB,sFAA6D;QAC3D,6EAAW;QAAA,uEAAM;QAAA,4DAAY;QAC7B,wEAA6E;QAC/E,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,2EAAgC;QAC9B,2EAAwB;QACtB,sFAA6D;QAC3D,6EAAW;QAAA,+DAAG;QAAA,4DAAY;QAC1B,wEAAuE;QACzE,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,2EAAgC;QAC9B,2EAAwB;QACtB,sFAA6D;QAC3D,6EAAW;QAAA,kEAAM;QAAA,4DAAY;QAC7B,wEAA+E;QACjF,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,2EAAgC;QAC9B,2EAAwB;QACtB,sFAA6D;QAC3D,6EAAW;QAAA,iEAAK;QAAA,4DAAY;QAC5B,wEAA2E;QAC7E,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,2EAAgC;QAC9B,2EAAwB;QACtB,uFAA6D;QAC3D,8EAAW;QAAA,gFAAS;QAAA,4DAAY;QAChC,yEAAmF;QACrF,4DAAiB;QACnB,4DAAM;QACR,4DAAM;QACN,4EAAuB;QACrB,+EAAwG;QAAA,yEAAY;QAAA,4DAAS;QAC/H,4DAAM;QACR,4DAAM;QACV,4DAAO;QACP,4DAAM;QACR,4DAAM;QACR,4DAAM;QACR,4DAAU;;;;QAvGyB,2DAAwC;QAAxC,oLAAwC;QACtC,0DAA6B;QAA7B,4HAA6B;QAEnD,0DAAwB;QAAxB,2JAAwB;QAG1B,0DAAgC;QAAhC,wIAAgC;QAChC,0DAAqD;QAArD,kKAAqD;QAGjB,0DAAwB;QAAxB,uHAAwB;QAavD,2DAAe;QAAf,+EAAe;QAIP,0DAA2B;QAA3B,4EAA2B;QAK3B,0DAA2B;QAA3B,4EAA2B;QAEC,0DAAsC;QAAtC,8FAAsC;QAAC,gFAAkC;QAiB7F,2DAA+B;QAA/B,0HAA+B;QAQ/B,0DAA6B;QAA7B,wHAA6B;QAQ7B,0DAA0B;QAA1B,qHAA0B;QAQ1B,0DAA8B;QAA9B,yHAA8B;QAQ9B,0DAA4B;QAA5B,uHAA4B;QAQ5B,0DAAgC;QAAhC,2HAAgC;QAK1B,0DAA8B;QAA9B,sFAA8B;QAAiB,gFAA8B","file":"src_app_doctor_doctor_module_ts-es2015.js","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\r\nimport * as i1 from '@angular/common';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as i2 from '@angular/cdk/scrolling';\r\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\r\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\r\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet-like object.\r\n * Note that the keys in `source` have to be dash-cased.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\r\nimport * as ɵngcc2 from '@angular/cdk/bidi';\r\nfunction extendStyles(dest, source, importantProperties) {\r\n    for (let key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n            const value = source[key];\r\n            if (value) {\r\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\r\n            }\r\n            else {\r\n                dest.removeProperty(key);\r\n            }\r\n        }\r\n    }\r\n    return dest;\r\n}\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\r\nfunction toggleNativeDragInteractions(element, enable) {\r\n    const userSelect = enable ? '' : 'none';\r\n    extendStyles(element.style, {\r\n        'touch-action': enable ? '' : 'none',\r\n        '-webkit-user-drag': enable ? '' : 'none',\r\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\r\n        'user-select': userSelect,\r\n        '-ms-user-select': userSelect,\r\n        '-webkit-user-select': userSelect,\r\n        '-moz-user-select': userSelect\r\n    });\r\n}\r\n/**\r\n * Toggles whether an element is visible while preserving its dimensions.\r\n * @param element Element whose visibility to toggle\r\n * @param enable Whether the element should be visible.\r\n * @param importantProperties Properties to be set as `!important`.\r\n * @docs-private\r\n */\r\nfunction toggleVisibility(element, enable, importantProperties) {\r\n    extendStyles(element.style, {\r\n        position: enable ? '' : 'fixed',\r\n        top: enable ? '' : '0',\r\n        opacity: enable ? '' : '0',\r\n        left: enable ? '' : '-999em'\r\n    }, importantProperties);\r\n}\r\n/**\r\n * Combines a transform string with an optional other transform\r\n * that exited before the base transform was applied.\r\n */\r\nfunction combineTransforms(transform, initialTransform) {\r\n    return initialTransform && initialTransform != 'none' ?\r\n        (transform + ' ' + initialTransform) :\r\n        transform;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value) {\r\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n    return parseFloat(value) * multiplier;\r\n}\r\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\r\nfunction getTransformTransitionDurationInMs(element) {\r\n    const computedStyle = getComputedStyle(element);\r\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\r\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n    if (!property) {\r\n        return 0;\r\n    }\r\n    // Get the index of the property that we're interested in and match\r\n    // it up to the same index in `transition-delay` and `transition-duration`.\r\n    const propertyIndex = transitionedProperties.indexOf(property);\r\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\r\n}\r\n/** Parses out multiple values from a computed style into an array. */\r\nfunction parseCssPropertyValue(computedStyle, name) {\r\n    const value = computedStyle.getPropertyValue(name);\r\n    return value.split(',').map(part => part.trim());\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Gets a mutable version of an element's bounding `ClientRect`. */\r\nfunction getMutableClientRect(element) {\r\n    const clientRect = element.getBoundingClientRect();\r\n    // We need to clone the `clientRect` here, because all the values on it are readonly\r\n    // and we need to be able to update them. Also we can't use a spread here, because\r\n    // the values on a `ClientRect` aren't own properties. See:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n    return {\r\n        top: clientRect.top,\r\n        right: clientRect.right,\r\n        bottom: clientRect.bottom,\r\n        left: clientRect.left,\r\n        width: clientRect.width,\r\n        height: clientRect.height\r\n    };\r\n}\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\r\nfunction isInsideClientRect(clientRect, x, y) {\r\n    const { top, bottom, left, right } = clientRect;\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\r\nfunction adjustClientRect(clientRect, top, left) {\r\n    clientRect.top += top;\r\n    clientRect.bottom = clientRect.top + clientRect.height;\r\n    clientRect.left += left;\r\n    clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n/**\r\n * Checks whether the pointer coordinates are close to a ClientRect.\r\n * @param rect ClientRect to check against.\r\n * @param threshold Threshold around the ClientRect.\r\n * @param pointerX Coordinates along the X axis.\r\n * @param pointerY Coordinates along the Y axis.\r\n */\r\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\r\n    const { top, right, bottom, left, width, height } = rect;\r\n    const xThreshold = width * threshold;\r\n    const yThreshold = height * threshold;\r\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\r\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\r\nclass ParentPositionTracker {\r\n    constructor(_document, _viewportRuler) {\r\n        this._document = _document;\r\n        this._viewportRuler = _viewportRuler;\r\n        /** Cached positions of the scrollable parent elements. */\r\n        this.positions = new Map();\r\n    }\r\n    /** Clears the cached positions. */\r\n    clear() {\r\n        this.positions.clear();\r\n    }\r\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\r\n    cache(elements) {\r\n        this.clear();\r\n        this.positions.set(this._document, {\r\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\r\n        });\r\n        elements.forEach(element => {\r\n            this.positions.set(element, {\r\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\r\n                clientRect: getMutableClientRect(element)\r\n            });\r\n        });\r\n    }\r\n    /** Handles scrolling while a drag is taking place. */\r\n    handleScroll(event) {\r\n        const target = _getEventTarget(event);\r\n        const cachedPosition = this.positions.get(target);\r\n        if (!cachedPosition) {\r\n            return null;\r\n        }\r\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\r\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\r\n        // `contains` on the `document`.\r\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\r\n        const scrollPosition = cachedPosition.scrollPosition;\r\n        let newTop;\r\n        let newLeft;\r\n        if (target === this._document) {\r\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n            newTop = viewportScrollPosition.top;\r\n            newLeft = viewportScrollPosition.left;\r\n        }\r\n        else {\r\n            newTop = target.scrollTop;\r\n            newLeft = target.scrollLeft;\r\n        }\r\n        const topDifference = scrollPosition.top - newTop;\r\n        const leftDifference = scrollPosition.left - newLeft;\r\n        // Go through and update the cached positions of the scroll\r\n        // parents that are inside the element that was scrolled.\r\n        this.positions.forEach((position, node) => {\r\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\r\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\r\n            }\r\n        });\r\n        scrollPosition.top = newTop;\r\n        scrollPosition.left = newLeft;\r\n        return { top: topDifference, left: leftDifference };\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Creates a deep clone of an element. */\r\nfunction deepCloneNode(node) {\r\n    const clone = node.cloneNode(true);\r\n    const descendantsWithId = clone.querySelectorAll('[id]');\r\n    const nodeName = node.nodeName.toLowerCase();\r\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n    clone.removeAttribute('id');\r\n    for (let i = 0; i < descendantsWithId.length; i++) {\r\n        descendantsWithId[i].removeAttribute('id');\r\n    }\r\n    if (nodeName === 'canvas') {\r\n        transferCanvasData(node, clone);\r\n    }\r\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\r\n        transferInputData(node, clone);\r\n    }\r\n    transferData('canvas', node, clone, transferCanvasData);\r\n    transferData('input, textarea, select', node, clone, transferInputData);\r\n    return clone;\r\n}\r\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\r\nfunction transferData(selector, node, clone, callback) {\r\n    const descendantElements = node.querySelectorAll(selector);\r\n    if (descendantElements.length) {\r\n        const cloneElements = clone.querySelectorAll(selector);\r\n        for (let i = 0; i < descendantElements.length; i++) {\r\n            callback(descendantElements[i], cloneElements[i]);\r\n        }\r\n    }\r\n}\r\n// Counter for unique cloned radio button names.\r\nlet cloneUniqueId = 0;\r\n/** Transfers the data of one input element to another. */\r\nfunction transferInputData(source, clone) {\r\n    // Browsers throw an error when assigning the value of a file input programmatically.\r\n    if (clone.type !== 'file') {\r\n        clone.value = source.value;\r\n    }\r\n    // Radio button `name` attributes must be unique for radio button groups\r\n    // otherwise original radio buttons can lose their checked state\r\n    // once the clone is inserted in the DOM.\r\n    if (clone.type === 'radio' && clone.name) {\r\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\r\n    }\r\n}\r\n/** Transfers the data of one canvas element to another. */\r\nfunction transferCanvasData(source, clone) {\r\n    const context = clone.getContext('2d');\r\n    if (context) {\r\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\r\n        // We can't do much about it so just ignore the error.\r\n        try {\r\n            context.drawImage(source, 0, 0);\r\n        }\r\n        catch (_a) { }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Options that can be used to bind a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\r\n/** Options that can be used to bind an active event listener. */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n/** Inline styles to be set as `!important` while dragging. */\r\nconst dragImportantProperties = new Set([\r\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\r\n    'position'\r\n]);\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n */\r\nclass DragRef {\r\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._config = _config;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        /**\r\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n         * passive transform in order for the dragged element to retain its new position\r\n         * after the user has stopped dragging and because we need to know the relative\r\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n         */\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n        /** CSS `transform` that is applied to the element while it's being dragged. */\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        /**\r\n         * Whether the dragging sequence has been started. Doesn't\r\n         * necessarily mean that the element has been moved.\r\n         */\r\n        this._hasStartedDragging = false;\r\n        /** Emits when the item is being moved. */\r\n        this._moveEvents = new Subject();\r\n        /** Subscription to pointer movement events. */\r\n        this._pointerMoveSubscription = Subscription.EMPTY;\r\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\r\n        this._pointerUpSubscription = Subscription.EMPTY;\r\n        /** Subscription to the viewport being scrolled. */\r\n        this._scrollSubscription = Subscription.EMPTY;\r\n        /** Subscription to the viewport being resized. */\r\n        this._resizeSubscription = Subscription.EMPTY;\r\n        /** Cached reference to the boundary element. */\r\n        this._boundaryElement = null;\r\n        /** Whether the native dragging interactions have been enabled on the root element. */\r\n        this._nativeInteractionsEnabled = true;\r\n        /** Elements that can be used to drag the draggable item. */\r\n        this._handles = [];\r\n        /** Registered handles that are currently disabled. */\r\n        this._disabledHandles = new Set();\r\n        /** Layout direction of the item. */\r\n        this._direction = 'ltr';\r\n        /**\r\n         * Amount of milliseconds to wait after the user has put their\r\n         * pointer down before starting to drag the element.\r\n         */\r\n        this.dragStartDelay = 0;\r\n        this._disabled = false;\r\n        /** Emits as the drag sequence is being prepared. */\r\n        this.beforeStarted = new Subject();\r\n        /** Emits when the user starts dragging the item. */\r\n        this.started = new Subject();\r\n        /** Emits when the user has released a drag item, before any animations have started. */\r\n        this.released = new Subject();\r\n        /** Emits when the user stops dragging an item in the container. */\r\n        this.ended = new Subject();\r\n        /** Emits when the user has moved the item into a new container. */\r\n        this.entered = new Subject();\r\n        /** Emits when the user removes the item its container by dragging it into another container. */\r\n        this.exited = new Subject();\r\n        /** Emits when the user drops the item inside a container. */\r\n        this.dropped = new Subject();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = this._moveEvents;\r\n        /** Handler for the `mousedown`/`touchstart` events. */\r\n        this._pointerDown = (event) => {\r\n            this.beforeStarted.next();\r\n            // Delegate the event based on whether it started from a handle or the element itself.\r\n            if (this._handles.length) {\r\n                const targetHandle = this._handles.find(handle => {\r\n                    const target = _getEventTarget(event);\r\n                    return !!target && (target === handle || handle.contains(target));\r\n                });\r\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n                    this._initializeDragSequence(targetHandle, event);\r\n                }\r\n            }\r\n            else if (!this.disabled) {\r\n                this._initializeDragSequence(this._rootElement, event);\r\n            }\r\n        };\r\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n        this._pointerMove = (event) => {\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            if (!this._hasStartedDragging) {\r\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n                // Only start dragging after the user has moved more than the minimum distance in either\r\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\r\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n                if (isOverThreshold) {\r\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\r\n                    const container = this._dropContainer;\r\n                    if (!isDelayElapsed) {\r\n                        this._endDragSequence(event);\r\n                        return;\r\n                    }\r\n                    // Prevent other drag sequences from starting while something in the container is still\r\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\r\n                    // and can cause errors, because some elements might still be moving around.\r\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\r\n                        // Prevent the default action as soon as the dragging sequence is considered as\r\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\r\n                        event.preventDefault();\r\n                        this._hasStartedDragging = true;\r\n                        this._ngZone.run(() => this._startDragSequence(event));\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // We only need the preview dimensions if we have a boundary element.\r\n            if (this._boundaryElement) {\r\n                // Cache the preview element rect if we haven't cached it already or if\r\n                // we cached it too early before the element dimensions were computed.\r\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\r\n                }\r\n            }\r\n            // We prevent the default action down here so that we know that dragging has started. This is\r\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\r\n            // if there's a dragging delay.\r\n            event.preventDefault();\r\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\r\n            this._hasMoved = true;\r\n            this._lastKnownPointerPosition = pointerPosition;\r\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n            if (this._dropContainer) {\r\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\r\n            }\r\n            else {\r\n                const activeTransform = this._activeTransform;\r\n                activeTransform.x =\r\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\r\n                activeTransform.y =\r\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\r\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n                // Apply transform as attribute if dragging and svg element to work for IE\r\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\r\n                    this._rootElement.setAttribute('transform', appliedTransform);\r\n                }\r\n            }\r\n            // Since this event gets fired for every pixel while dragging, we only\r\n            // want to fire it if the consumer opted into it. Also we have to\r\n            // re-enter the zone because we run all of the events on the outside.\r\n            if (this._moveEvents.observers.length) {\r\n                this._ngZone.run(() => {\r\n                    this._moveEvents.next({\r\n                        source: this,\r\n                        pointerPosition: constrainedPointerPosition,\r\n                        event,\r\n                        distance: this._getDragDistance(constrainedPointerPosition),\r\n                        delta: this._pointerDirectionDelta\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n        this._pointerUp = (event) => {\r\n            this._endDragSequence(event);\r\n        };\r\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\r\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\r\n        _dragDropRegistry.registerDragItem(this);\r\n    }\r\n    /** Whether starting to drag this element is disabled. */\r\n    get disabled() {\r\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n    }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._toggleNativeDragInteractions();\r\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\r\n        }\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._placeholder;\r\n    }\r\n    /** Returns the root draggable element. */\r\n    getRootElement() {\r\n        return this._rootElement;\r\n    }\r\n    /**\r\n     * Gets the currently-visible element that represents the drag item.\r\n     * While dragging this is the placeholder, otherwise it's the root element.\r\n     */\r\n    getVisibleElement() {\r\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\r\n    }\r\n    /** Registers the handles that can be used to drag the element. */\r\n    withHandles(handles) {\r\n        this._handles = handles.map(handle => coerceElement(handle));\r\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\r\n        this._toggleNativeDragInteractions();\r\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\r\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\r\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\r\n        // use an array internally which may throw an error.\r\n        const disabledHandles = new Set();\r\n        this._disabledHandles.forEach(handle => {\r\n            if (this._handles.indexOf(handle) > -1) {\r\n                disabledHandles.add(handle);\r\n            }\r\n        });\r\n        this._disabledHandles = disabledHandles;\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag preview.\r\n     * @param template Template that from which to stamp out the preview.\r\n     */\r\n    withPreviewTemplate(template) {\r\n        this._previewTemplate = template;\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag placeholder.\r\n     * @param template Template that from which to stamp out the placeholder.\r\n     */\r\n    withPlaceholderTemplate(template) {\r\n        this._placeholderTemplate = template;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets an alternate drag root element. The root element is the element that will be moved as\r\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n     * dragging on an element that you might not have access to.\r\n     */\r\n    withRootElement(rootElement) {\r\n        const element = coerceElement(rootElement);\r\n        if (element !== this._rootElement) {\r\n            if (this._rootElement) {\r\n                this._removeRootElementListeners(this._rootElement);\r\n            }\r\n            this._ngZone.runOutsideAngular(() => {\r\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n            });\r\n            this._initialTransform = undefined;\r\n            this._rootElement = element;\r\n        }\r\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Element to which the draggable's position will be constrained.\r\n     */\r\n    withBoundaryElement(boundaryElement) {\r\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n        this._resizeSubscription.unsubscribe();\r\n        if (boundaryElement) {\r\n            this._resizeSubscription = this._viewportRuler\r\n                .change(10)\r\n                .subscribe(() => this._containInsideBoundaryOnResize());\r\n        }\r\n        return this;\r\n    }\r\n    /** Sets the parent ref that the ref is nested in.  */\r\n    withParent(parent) {\r\n        this._parentDragRef = parent;\r\n        return this;\r\n    }\r\n    /** Removes the dragging functionality from the DOM element. */\r\n    dispose() {\r\n        this._removeRootElementListeners(this._rootElement);\r\n        // Do this check before removing from the registry since it'll\r\n        // stop being considered as dragged once it is removed.\r\n        if (this.isDragging()) {\r\n            // Since we move out the element to the end of the body while it's being\r\n            // dragged, we have to make sure that it's removed if it gets destroyed.\r\n            removeNode(this._rootElement);\r\n        }\r\n        removeNode(this._anchor);\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._dragDropRegistry.removeDragItem(this);\r\n        this._removeSubscriptions();\r\n        this.beforeStarted.complete();\r\n        this.started.complete();\r\n        this.released.complete();\r\n        this.ended.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this._moveEvents.complete();\r\n        this._handles = [];\r\n        this._disabledHandles.clear();\r\n        this._dropContainer = undefined;\r\n        this._resizeSubscription.unsubscribe();\r\n        this._parentPositions.clear();\r\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\r\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\r\n    }\r\n    /** Checks whether the element is currently being dragged. */\r\n    isDragging() {\r\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n    }\r\n    /** Resets a standalone drag item to its initial position. */\r\n    reset() {\r\n        this._rootElement.style.transform = this._initialTransform || '';\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n    }\r\n    /**\r\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n     * @param handle Handle element that should be disabled.\r\n     */\r\n    disableHandle(handle) {\r\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\r\n            this._disabledHandles.add(handle);\r\n            toggleNativeDragInteractions(handle, true);\r\n        }\r\n    }\r\n    /**\r\n     * Enables a handle, if it has been disabled.\r\n     * @param handle Handle element to be enabled.\r\n     */\r\n    enableHandle(handle) {\r\n        if (this._disabledHandles.has(handle)) {\r\n            this._disabledHandles.delete(handle);\r\n            toggleNativeDragInteractions(handle, this.disabled);\r\n        }\r\n    }\r\n    /** Sets the layout direction of the draggable item. */\r\n    withDirection(direction) {\r\n        this._direction = direction;\r\n        return this;\r\n    }\r\n    /** Sets the container that the item is part of. */\r\n    _withDropContainer(container) {\r\n        this._dropContainer = container;\r\n    }\r\n    /**\r\n     * Gets the current position in pixels the draggable outside of a drop container.\r\n     */\r\n    getFreeDragPosition() {\r\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\r\n        return { x: position.x, y: position.y };\r\n    }\r\n    /**\r\n     * Sets the current position in pixels the draggable outside of a drop container.\r\n     * @param value New position to be set.\r\n     */\r\n    setFreeDragPosition(value) {\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        this._passiveTransform.x = value.x;\r\n        this._passiveTransform.y = value.y;\r\n        if (!this._dropContainer) {\r\n            this._applyRootElementTransform(value.x, value.y);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the container into which to insert the preview element.\r\n     * @param value Container into which to insert the preview.\r\n     */\r\n    withPreviewContainer(value) {\r\n        this._previewContainer = value;\r\n        return this;\r\n    }\r\n    /** Updates the item's sort order based on the last-known pointer position. */\r\n    _sortFromLastPointerPosition() {\r\n        const position = this._lastKnownPointerPosition;\r\n        if (position && this._dropContainer) {\r\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\r\n        }\r\n    }\r\n    /** Unsubscribes from the global subscriptions. */\r\n    _removeSubscriptions() {\r\n        this._pointerMoveSubscription.unsubscribe();\r\n        this._pointerUpSubscription.unsubscribe();\r\n        this._scrollSubscription.unsubscribe();\r\n    }\r\n    /** Destroys the preview element and its ViewRef. */\r\n    _destroyPreview() {\r\n        if (this._preview) {\r\n            removeNode(this._preview);\r\n        }\r\n        if (this._previewRef) {\r\n            this._previewRef.destroy();\r\n        }\r\n        this._preview = this._previewRef = null;\r\n    }\r\n    /** Destroys the placeholder element and its ViewRef. */\r\n    _destroyPlaceholder() {\r\n        if (this._placeholder) {\r\n            removeNode(this._placeholder);\r\n        }\r\n        if (this._placeholderRef) {\r\n            this._placeholderRef.destroy();\r\n        }\r\n        this._placeholder = this._placeholderRef = null;\r\n    }\r\n    /**\r\n     * Clears subscriptions and stops the dragging sequence.\r\n     * @param event Browser event object that ended the sequence.\r\n     */\r\n    _endDragSequence(event) {\r\n        // Note that here we use `isDragging` from the service, rather than from `this`.\r\n        // The difference is that the one from the service reflects whether a dragging sequence\r\n        // has been initiated, whereas the one on `this` includes whether the user has passed\r\n        // the minimum dragging threshold.\r\n        if (!this._dragDropRegistry.isDragging(this)) {\r\n            return;\r\n        }\r\n        this._removeSubscriptions();\r\n        this._dragDropRegistry.stopDragging(this);\r\n        this._toggleNativeDragInteractions();\r\n        if (this._handles) {\r\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\r\n        }\r\n        if (!this._hasStartedDragging) {\r\n            return;\r\n        }\r\n        this.released.next({ source: this });\r\n        if (this._dropContainer) {\r\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\r\n            this._dropContainer._stopScrolling();\r\n            this._animatePreviewToPlaceholder().then(() => {\r\n                this._cleanupDragArtifacts(event);\r\n                this._cleanupCachedDimensions();\r\n                this._dragDropRegistry.stopDragging(this);\r\n            });\r\n        }\r\n        else {\r\n            // Convert the active transform into a passive one. This means that next time\r\n            // the user starts dragging the item, its position will be calculated relatively\r\n            // to the new passive transform.\r\n            this._passiveTransform.x = this._activeTransform.x;\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            this._passiveTransform.y = this._activeTransform.y;\r\n            this._ngZone.run(() => {\r\n                this.ended.next({\r\n                    source: this,\r\n                    distance: this._getDragDistance(pointerPosition),\r\n                    dropPoint: pointerPosition\r\n                });\r\n            });\r\n            this._cleanupCachedDimensions();\r\n            this._dragDropRegistry.stopDragging(this);\r\n        }\r\n    }\r\n    /** Starts the dragging sequence. */\r\n    _startDragSequence(event) {\r\n        if (isTouchEvent(event)) {\r\n            this._lastTouchEventTime = Date.now();\r\n        }\r\n        this._toggleNativeDragInteractions();\r\n        const dropContainer = this._dropContainer;\r\n        if (dropContainer) {\r\n            const element = this._rootElement;\r\n            const parent = element.parentNode;\r\n            const placeholder = this._placeholder = this._createPlaceholderElement();\r\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\r\n            // Needs to happen before the root element is moved.\r\n            const shadowRoot = this._getShadowRoot();\r\n            // Insert an anchor node so that we can restore the element's position in the DOM.\r\n            parent.insertBefore(anchor, element);\r\n            // There's no risk of transforms stacking when inside a drop container so\r\n            // we can keep the initial transform up to date any time dragging starts.\r\n            this._initialTransform = element.style.transform || '';\r\n            // Create the preview after the initial transform has\r\n            // been cached, because it can be affected by the transform.\r\n            this._preview = this._createPreviewElement();\r\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n            toggleVisibility(element, false, dragImportantProperties);\r\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\r\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\r\n            this.started.next({ source: this }); // Emit before notifying the container.\r\n            dropContainer.start();\r\n            this._initialContainer = dropContainer;\r\n            this._initialIndex = dropContainer.getItemIndex(this);\r\n        }\r\n        else {\r\n            this.started.next({ source: this });\r\n            this._initialContainer = this._initialIndex = undefined;\r\n        }\r\n        // Important to run after we've called `start` on the parent container\r\n        // so that it has had time to resolve its scrollable parents.\r\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\r\n    }\r\n    /**\r\n     * Sets up the different variables and subscriptions\r\n     * that will be necessary for the dragging sequence.\r\n     * @param referenceElement Element that started the drag sequence.\r\n     * @param event Browser event object that started the sequence.\r\n     */\r\n    _initializeDragSequence(referenceElement, event) {\r\n        // Stop propagation if the item is inside another\r\n        // draggable so we don't start multiple drag sequences.\r\n        if (this._parentDragRef) {\r\n            event.stopPropagation();\r\n        }\r\n        const isDragging = this.isDragging();\r\n        const isTouchSequence = isTouchEvent(event);\r\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\r\n        const rootElement = this._rootElement;\r\n        const target = _getEventTarget(event);\r\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\r\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n        const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) :\r\n            isFakeMousedownFromScreenReader(event);\r\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n        // events from firing on touch devices.\r\n        if (target && target.draggable && event.type === 'mousedown') {\r\n            event.preventDefault();\r\n        }\r\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\r\n            return;\r\n        }\r\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n        // are disabled.\r\n        if (this._handles.length) {\r\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\r\n            rootElement.style.webkitTapHighlightColor = 'transparent';\r\n        }\r\n        this._hasStartedDragging = this._hasMoved = false;\r\n        // Avoid multiple subscriptions and memory leaks when multi touch\r\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n        this._removeSubscriptions();\r\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n        this._scrollSubscription = this._dragDropRegistry\r\n            .scrolled(this._getShadowRoot())\r\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\r\n        if (this._boundaryElement) {\r\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\r\n        }\r\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\r\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\r\n        // the same size as the root element, in which case we do know the size.\r\n        const previewTemplate = this._previewTemplate;\r\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\r\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\r\n            this._getPointerPositionInElement(referenceElement, event);\r\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\r\n            this._getPointerPositionOnPage(event);\r\n        this._pointerDirectionDelta = { x: 0, y: 0 };\r\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\r\n        this._dragStartTime = Date.now();\r\n        this._dragDropRegistry.startDragging(this, event);\r\n    }\r\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n    _cleanupDragArtifacts(event) {\r\n        // Restore the element's visibility and insert it at its old position in the DOM.\r\n        // It's important that we maintain the position, because moving the element around in the DOM\r\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n        // while moving the existing elements in all other cases.\r\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\r\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\r\n        // Re-enter the NgZone since we bound `document` events on the outside.\r\n        this._ngZone.run(() => {\r\n            const container = this._dropContainer;\r\n            const currentIndex = container.getItemIndex(this);\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            const distance = this._getDragDistance(pointerPosition);\r\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\r\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\r\n            this.dropped.next({\r\n                item: this,\r\n                currentIndex,\r\n                previousIndex: this._initialIndex,\r\n                container: container,\r\n                previousContainer: this._initialContainer,\r\n                isPointerOverContainer,\r\n                distance,\r\n                dropPoint: pointerPosition\r\n            });\r\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\r\n            this._dropContainer = this._initialContainer;\r\n        });\r\n    }\r\n    /**\r\n     * Updates the item's position in its drop container, or moves it\r\n     * into a new one, depending on its current drag position.\r\n     */\r\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\r\n        // Drop container that draggable has been moved into.\r\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n        // If we couldn't find a new container to move the item into, and the item has left its\r\n        // initial container, check whether the it's over the initial container. This handles the\r\n        // case where two containers are connected one way and the user tries to undo dragging an\r\n        // item into a new container.\r\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\r\n            this._initialContainer._isOverContainer(x, y)) {\r\n            newContainer = this._initialContainer;\r\n        }\r\n        if (newContainer && newContainer !== this._dropContainer) {\r\n            this._ngZone.run(() => {\r\n                // Notify the old container that the item has left.\r\n                this.exited.next({ item: this, container: this._dropContainer });\r\n                this._dropContainer.exit(this);\r\n                // Notify the new container that the item has entered.\r\n                this._dropContainer = newContainer;\r\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\r\n                    // If we're re-entering the initial container and sorting is disabled,\r\n                    // put item the into its starting index to begin with.\r\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\r\n                this.entered.next({\r\n                    item: this,\r\n                    container: newContainer,\r\n                    currentIndex: newContainer.getItemIndex(this)\r\n                });\r\n            });\r\n        }\r\n        // Dragging may have been interrupted as a result of the events above.\r\n        if (this.isDragging()) {\r\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\r\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\r\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n        }\r\n    }\r\n    /**\r\n     * Creates the element that will be rendered next to the user's pointer\r\n     * and will be used as a preview of the element that is being dragged.\r\n     */\r\n    _createPreviewElement() {\r\n        const previewConfig = this._previewTemplate;\r\n        const previewClass = this.previewClass;\r\n        const previewTemplate = previewConfig ? previewConfig.template : null;\r\n        let preview;\r\n        if (previewTemplate && previewConfig) {\r\n            // Measure the element before we've inserted the preview\r\n            // since the insertion could throw off the measurement.\r\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\r\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\r\n            viewRef.detectChanges();\r\n            preview = getRootNode(viewRef, this._document);\r\n            this._previewRef = viewRef;\r\n            if (previewConfig.matchSize) {\r\n                matchElementSize(preview, rootRect);\r\n            }\r\n            else {\r\n                preview.style.transform =\r\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n            }\r\n        }\r\n        else {\r\n            const element = this._rootElement;\r\n            preview = deepCloneNode(element);\r\n            matchElementSize(preview, element.getBoundingClientRect());\r\n            if (this._initialTransform) {\r\n                preview.style.transform = this._initialTransform;\r\n            }\r\n        }\r\n        extendStyles(preview.style, {\r\n            // It's important that we disable the pointer events on the preview, because\r\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n            'pointer-events': 'none',\r\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\r\n            'margin': '0',\r\n            'position': 'fixed',\r\n            'top': '0',\r\n            'left': '0',\r\n            'z-index': `${this._config.zIndex || 1000}`\r\n        }, dragImportantProperties);\r\n        toggleNativeDragInteractions(preview, false);\r\n        preview.classList.add('cdk-drag-preview');\r\n        preview.setAttribute('dir', this._direction);\r\n        if (previewClass) {\r\n            if (Array.isArray(previewClass)) {\r\n                previewClass.forEach(className => preview.classList.add(className));\r\n            }\r\n            else {\r\n                preview.classList.add(previewClass);\r\n            }\r\n        }\r\n        return preview;\r\n    }\r\n    /**\r\n     * Animates the preview element from its current position to the location of the drop placeholder.\r\n     * @returns Promise that resolves when the animation completes.\r\n     */\r\n    _animatePreviewToPlaceholder() {\r\n        // If the user hasn't moved yet, the transitionend event won't fire.\r\n        if (!this._hasMoved) {\r\n            return Promise.resolve();\r\n        }\r\n        const placeholderRect = this._placeholder.getBoundingClientRect();\r\n        // Apply the class that adds a transition to the preview.\r\n        this._preview.classList.add('cdk-drag-animating');\r\n        // Move the preview to the placeholder position.\r\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\r\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n        // apply its style, we take advantage of the available info to figure out whether we need to\r\n        // bind the event in the first place.\r\n        const duration = getTransformTransitionDurationInMs(this._preview);\r\n        if (duration === 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return this._ngZone.runOutsideAngular(() => {\r\n            return new Promise(resolve => {\r\n                const handler = ((event) => {\r\n                    var _a;\r\n                    if (!event || (_getEventTarget(event) === this._preview &&\r\n                        event.propertyName === 'transform')) {\r\n                        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\r\n                        resolve();\r\n                        clearTimeout(timeout);\r\n                    }\r\n                });\r\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n                // fire if the transition hasn't completed when it was supposed to.\r\n                const timeout = setTimeout(handler, duration * 1.5);\r\n                this._preview.addEventListener('transitionend', handler);\r\n            });\r\n        });\r\n    }\r\n    /** Creates an element that will be shown instead of the current element while dragging. */\r\n    _createPlaceholderElement() {\r\n        const placeholderConfig = this._placeholderTemplate;\r\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n        let placeholder;\r\n        if (placeholderTemplate) {\r\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\r\n            this._placeholderRef.detectChanges();\r\n            placeholder = getRootNode(this._placeholderRef, this._document);\r\n        }\r\n        else {\r\n            placeholder = deepCloneNode(this._rootElement);\r\n        }\r\n        placeholder.classList.add('cdk-drag-placeholder');\r\n        return placeholder;\r\n    }\r\n    /**\r\n     * Figures out the coordinates at which an element was picked up.\r\n     * @param referenceElement Element that initiated the dragging.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    _getPointerPositionInElement(referenceElement, event) {\r\n        const elementRect = this._rootElement.getBoundingClientRect();\r\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n        const scrollPosition = this._getViewportScrollPosition();\r\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\r\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\r\n        return {\r\n            x: referenceRect.left - elementRect.left + x,\r\n            y: referenceRect.top - elementRect.top + y\r\n        };\r\n    }\r\n    /** Determines the point of the page that was touched by the user. */\r\n    _getPointerPositionOnPage(event) {\r\n        const scrollPosition = this._getViewportScrollPosition();\r\n        const point = isTouchEvent(event) ?\r\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\r\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\r\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\r\n            // throwing an error. The value returned here will be incorrect, but since this only\r\n            // breaks inside a developer tool and the value is only used for secondary information,\r\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\r\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\r\n        const x = point.pageX - scrollPosition.left;\r\n        const y = point.pageY - scrollPosition.top;\r\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\r\n        // coordinate system\r\n        if (this._ownerSVGElement) {\r\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\r\n            if (svgMatrix) {\r\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\r\n                svgPoint.x = x;\r\n                svgPoint.y = y;\r\n                return svgPoint.matrixTransform(svgMatrix.inverse());\r\n            }\r\n        }\r\n        return { x, y };\r\n    }\r\n    /** Gets the pointer position on the page, accounting for any position constraints. */\r\n    _getConstrainedPointerPosition(point) {\r\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\r\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n            y = this._pickupPositionOnPage.y;\r\n        }\r\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n            x = this._pickupPositionOnPage.x;\r\n        }\r\n        if (this._boundaryRect) {\r\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\r\n            const boundaryRect = this._boundaryRect;\r\n            const previewRect = this._previewRect;\r\n            const minY = boundaryRect.top + pickupY;\r\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\r\n            const minX = boundaryRect.left + pickupX;\r\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\r\n            x = clamp$1(x, minX, maxX);\r\n            y = clamp$1(y, minY, maxY);\r\n        }\r\n        return { x, y };\r\n    }\r\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\r\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\r\n        const { x, y } = pointerPositionOnPage;\r\n        const delta = this._pointerDirectionDelta;\r\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n        // Amount of pixels the user has dragged since the last time the direction changed.\r\n        const changeX = Math.abs(x - positionSinceLastChange.x);\r\n        const changeY = Math.abs(y - positionSinceLastChange.y);\r\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n        // To make the delta more consistent, we track how much the user has moved since the last\r\n        // delta change and we only update it after it has reached a certain threshold.\r\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n            positionSinceLastChange.x = x;\r\n        }\r\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n            positionSinceLastChange.y = y;\r\n        }\r\n        return delta;\r\n    }\r\n    /** Toggles the native drag interactions, based on how many handles are registered. */\r\n    _toggleNativeDragInteractions() {\r\n        if (!this._rootElement || !this._handles) {\r\n            return;\r\n        }\r\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n            this._nativeInteractionsEnabled = shouldEnable;\r\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n        }\r\n    }\r\n    /** Removes the manually-added event listeners from the root element. */\r\n    _removeRootElementListeners(element) {\r\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n    }\r\n    /**\r\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n     * @param x New transform value along the X axis.\r\n     * @param y New transform value along the Y axis.\r\n     */\r\n    _applyRootElementTransform(x, y) {\r\n        const transform = getTransform(x, y);\r\n        // Cache the previous transform amount only after the first drag sequence, because\r\n        // we don't want our own transforms to stack on top of each other.\r\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\r\n        if (this._initialTransform == null) {\r\n            this._initialTransform = this._rootElement.style.transform\r\n                && this._rootElement.style.transform != 'none'\r\n                ? this._rootElement.style.transform\r\n                : '';\r\n        }\r\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n        // transform before the user's, because things like rotation can affect which direction\r\n        // the element will be translated towards.\r\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\r\n    }\r\n    /**\r\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\r\n     * @param x New transform value along the X axis.\r\n     * @param y New transform value along the Y axis.\r\n     */\r\n    _applyPreviewTransform(x, y) {\r\n        var _a;\r\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\r\n        // it could be completely different and the transform might not make sense anymore.\r\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\r\n        const transform = getTransform(x, y);\r\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\r\n    }\r\n    /**\r\n     * Gets the distance that the user has dragged during the current drag sequence.\r\n     * @param currentPosition Current position of the user's pointer.\r\n     */\r\n    _getDragDistance(currentPosition) {\r\n        const pickupPosition = this._pickupPositionOnPage;\r\n        if (pickupPosition) {\r\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\r\n        }\r\n        return { x: 0, y: 0 };\r\n    }\r\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\r\n    _cleanupCachedDimensions() {\r\n        this._boundaryRect = this._previewRect = undefined;\r\n        this._parentPositions.clear();\r\n    }\r\n    /**\r\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\r\n     * If not, the position is adjusted so that the element fits again.\r\n     */\r\n    _containInsideBoundaryOnResize() {\r\n        let { x, y } = this._passiveTransform;\r\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\r\n            return;\r\n        }\r\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n        const elementRect = this._rootElement.getBoundingClientRect();\r\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\r\n        // different tab). Don't do anything in this case so we don't clear the user's position.\r\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\r\n            (elementRect.width === 0 && elementRect.height === 0)) {\r\n            return;\r\n        }\r\n        const leftOverflow = boundaryRect.left - elementRect.left;\r\n        const rightOverflow = elementRect.right - boundaryRect.right;\r\n        const topOverflow = boundaryRect.top - elementRect.top;\r\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\r\n        // If the element has become wider than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the left.\r\n        if (boundaryRect.width > elementRect.width) {\r\n            if (leftOverflow > 0) {\r\n                x += leftOverflow;\r\n            }\r\n            if (rightOverflow > 0) {\r\n                x -= rightOverflow;\r\n            }\r\n        }\r\n        else {\r\n            x = 0;\r\n        }\r\n        // If the element has become taller than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the top.\r\n        if (boundaryRect.height > elementRect.height) {\r\n            if (topOverflow > 0) {\r\n                y += topOverflow;\r\n            }\r\n            if (bottomOverflow > 0) {\r\n                y -= bottomOverflow;\r\n            }\r\n        }\r\n        else {\r\n            y = 0;\r\n        }\r\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\r\n            this.setFreeDragPosition({ y, x });\r\n        }\r\n    }\r\n    /** Gets the drag start delay, based on the event type. */\r\n    _getDragStartDelay(event) {\r\n        const value = this.dragStartDelay;\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n        else if (isTouchEvent(event)) {\r\n            return value.touch;\r\n        }\r\n        return value ? value.mouse : 0;\r\n    }\r\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\r\n    _updateOnScroll(event) {\r\n        const scrollDifference = this._parentPositions.handleScroll(event);\r\n        if (scrollDifference) {\r\n            const target = _getEventTarget(event);\r\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\r\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\r\n            // the `document` specifically since IE doesn't support `contains` on it.\r\n            if (this._boundaryRect && (target === this._document ||\r\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\r\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\r\n            }\r\n            this._pickupPositionOnPage.x += scrollDifference.left;\r\n            this._pickupPositionOnPage.y += scrollDifference.top;\r\n            // If we're in free drag mode, we have to update the active transform, because\r\n            // it isn't relative to the viewport like the preview inside a drop list.\r\n            if (!this._dropContainer) {\r\n                this._activeTransform.x -= scrollDifference.left;\r\n                this._activeTransform.y -= scrollDifference.top;\r\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\r\n            }\r\n        }\r\n    }\r\n    /** Gets the scroll position of the viewport. */\r\n    _getViewportScrollPosition() {\r\n        const cachedPosition = this._parentPositions.positions.get(this._document);\r\n        return cachedPosition ? cachedPosition.scrollPosition :\r\n            this._viewportRuler.getViewportScrollPosition();\r\n    }\r\n    /**\r\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n     * than saving it in property directly on init, because we want to resolve it as late as possible\r\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n     */\r\n    _getShadowRoot() {\r\n        if (this._cachedShadowRoot === undefined) {\r\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\r\n        }\r\n        return this._cachedShadowRoot;\r\n    }\r\n    /** Gets the element into which the drag preview should be inserted. */\r\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\r\n        const previewContainer = this._previewContainer || 'global';\r\n        if (previewContainer === 'parent') {\r\n            return initialParent;\r\n        }\r\n        if (previewContainer === 'global') {\r\n            const documentRef = this._document;\r\n            // We can't use the body if the user is in fullscreen mode,\r\n            // because the preview will render under the fullscreen element.\r\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n            return shadowRoot ||\r\n                documentRef.fullscreenElement ||\r\n                documentRef.webkitFullscreenElement ||\r\n                documentRef.mozFullScreenElement ||\r\n                documentRef.msFullscreenElement ||\r\n                documentRef.body;\r\n        }\r\n        return coerceElement(previewContainer);\r\n    }\r\n}\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\r\nfunction getTransform(x, y) {\r\n    // Round the transforms since some browsers will\r\n    // blur the elements for sub-pixel transforms.\r\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n/** Clamps a value between a minimum and a maximum. */\r\nfunction clamp$1(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n/**\r\n * Helper to remove a node from the DOM and to do all the necessary null checks.\r\n * @param node Node to be removed.\r\n */\r\nfunction removeNode(node) {\r\n    if (node && node.parentNode) {\r\n        node.parentNode.removeChild(node);\r\n    }\r\n}\r\n/** Determines whether an event is a touch event. */\r\nfunction isTouchEvent(event) {\r\n    // This function is called for every pixel that the user has dragged so we need it to be\r\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n    // that if the event's name starts with `t`, it's a touch event.\r\n    return event.type[0] === 't';\r\n}\r\n/**\r\n * Gets the root HTML element of an embedded view.\r\n * If the root is not an HTML element it gets wrapped in one.\r\n */\r\nfunction getRootNode(viewRef, _document) {\r\n    const rootNodes = viewRef.rootNodes;\r\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\r\n        return rootNodes[0];\r\n    }\r\n    const wrapper = _document.createElement('div');\r\n    rootNodes.forEach(node => wrapper.appendChild(node));\r\n    return wrapper;\r\n}\r\n/**\r\n * Matches the target element's size to the source's size.\r\n * @param target Element that needs to be resized.\r\n * @param sourceRect Dimensions of the source element.\r\n */\r\nfunction matchElementSize(target, sourceRect) {\r\n    target.style.width = `${sourceRect.width}px`;\r\n    target.style.height = `${sourceRect.height}px`;\r\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nfunction moveItemInArray(array, fromIndex, toIndex) {\r\n    const from = clamp(fromIndex, array.length - 1);\r\n    const to = clamp(toIndex, array.length - 1);\r\n    if (from === to) {\r\n        return;\r\n    }\r\n    const target = array[from];\r\n    const delta = to < from ? -1 : 1;\r\n    for (let i = from; i !== to; i += delta) {\r\n        array[i] = array[i + delta];\r\n    }\r\n    array[to] = target;\r\n}\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    const from = clamp(currentIndex, currentArray.length - 1);\r\n    const to = clamp(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n    }\r\n}\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\r\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    const to = clamp(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray[currentIndex]);\r\n    }\r\n}\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value, max) {\r\n    return Math.max(0, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n */\r\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n */\r\nclass DropListRef {\r\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        /** Whether starting a dragging sequence from this container is disabled. */\r\n        this.disabled = false;\r\n        /** Whether sorting items within the list is disabled. */\r\n        this.sortingDisabled = false;\r\n        /**\r\n         * Whether auto-scrolling the view when the user\r\n         * moves their pointer close to the edges is disabled.\r\n         */\r\n        this.autoScrollDisabled = false;\r\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\r\n        this.autoScrollStep = 2;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = () => true;\r\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\r\n        this.sortPredicate = () => true;\r\n        /** Emits right before dragging has started. */\r\n        this.beforeStarted = new Subject();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new Subject();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new Subject();\r\n        /** Emits when the user drops an item inside the container. */\r\n        this.dropped = new Subject();\r\n        /** Emits as the user is swapping items while actively dragging. */\r\n        this.sorted = new Subject();\r\n        /** Whether an item in the list is being dragged. */\r\n        this._isDragging = false;\r\n        /** Cache of the dimensions of all the items inside the container. */\r\n        this._itemPositions = [];\r\n        /**\r\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\r\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\r\n         * overlap with the swapped item after the swapping occurred.\r\n         */\r\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\r\n        /** Draggable items in the container. */\r\n        this._draggables = [];\r\n        /** Drop lists that are connected to the current one. */\r\n        this._siblings = [];\r\n        /** Direction in which the list is oriented. */\r\n        this._orientation = 'vertical';\r\n        /** Connected siblings that currently have a dragged item. */\r\n        this._activeSiblings = new Set();\r\n        /** Layout direction of the drop list. */\r\n        this._direction = 'ltr';\r\n        /** Subscription to the window being scrolled. */\r\n        this._viewportScrollSubscription = Subscription.EMPTY;\r\n        /** Vertical direction in which the list is currently scrolling. */\r\n        this._verticalScrollDirection = 0 /* NONE */;\r\n        /** Horizontal direction in which the list is currently scrolling. */\r\n        this._horizontalScrollDirection = 0 /* NONE */;\r\n        /** Used to signal to the current auto-scroll sequence when to stop. */\r\n        this._stopScrollTimers = new Subject();\r\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\r\n        this._cachedShadowRoot = null;\r\n        /** Starts the interval that'll auto-scroll the element. */\r\n        this._startScrollInterval = () => {\r\n            this._stopScrolling();\r\n            interval(0, animationFrameScheduler)\r\n                .pipe(takeUntil(this._stopScrollTimers))\r\n                .subscribe(() => {\r\n                const node = this._scrollNode;\r\n                const scrollStep = this.autoScrollStep;\r\n                if (this._verticalScrollDirection === 1 /* UP */) {\r\n                    incrementVerticalScroll(node, -scrollStep);\r\n                }\r\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\r\n                    incrementVerticalScroll(node, scrollStep);\r\n                }\r\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\r\n                    incrementHorizontalScroll(node, -scrollStep);\r\n                }\r\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\r\n                    incrementHorizontalScroll(node, scrollStep);\r\n                }\r\n            });\r\n        };\r\n        this.element = coerceElement(element);\r\n        this._document = _document;\r\n        this.withScrollableParents([this.element]);\r\n        _dragDropRegistry.registerDropContainer(this);\r\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\r\n    }\r\n    /** Removes the drop list functionality from the DOM element. */\r\n    dispose() {\r\n        this._stopScrolling();\r\n        this._stopScrollTimers.complete();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this.beforeStarted.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this.sorted.complete();\r\n        this._activeSiblings.clear();\r\n        this._scrollNode = null;\r\n        this._parentPositions.clear();\r\n        this._dragDropRegistry.removeDropContainer(this);\r\n    }\r\n    /** Whether an item from this list is currently being dragged. */\r\n    isDragging() {\r\n        return this._isDragging;\r\n    }\r\n    /** Starts dragging an item. */\r\n    start() {\r\n        this._draggingStarted();\r\n        this._notifyReceivingSiblings();\r\n    }\r\n    /**\r\n     * Emits an event to indicate that the user moved an item into the container.\r\n     * @param item Item that was moved into the container.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n     *   out automatically.\r\n     */\r\n    enter(item, pointerX, pointerY, index) {\r\n        this._draggingStarted();\r\n        // If sorting is disabled, we want the item to return to its starting\r\n        // position if the user is returning it to its initial container.\r\n        let newIndex;\r\n        if (index == null) {\r\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\r\n            if (newIndex === -1) {\r\n                // We use the coordinates of where the item entered the drop\r\n                // zone to figure out at which index it should be inserted.\r\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\r\n            }\r\n        }\r\n        else {\r\n            newIndex = index;\r\n        }\r\n        const activeDraggables = this._activeDraggables;\r\n        const currentIndex = activeDraggables.indexOf(item);\r\n        const placeholder = item.getPlaceholderElement();\r\n        let newPositionReference = activeDraggables[newIndex];\r\n        // If the item at the new position is the same as the item that is being dragged,\r\n        // it means that we're trying to restore the item to its initial position. In this\r\n        // case we should use the next item from the list as the reference.\r\n        if (newPositionReference === item) {\r\n            newPositionReference = activeDraggables[newIndex + 1];\r\n        }\r\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n        // into another container and back again), we have to ensure that it isn't duplicated.\r\n        if (currentIndex > -1) {\r\n            activeDraggables.splice(currentIndex, 1);\r\n        }\r\n        // Don't use items that are being dragged as a reference, because\r\n        // their element has been moved down to the bottom of the body.\r\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n            const element = newPositionReference.getRootElement();\r\n            element.parentElement.insertBefore(placeholder, element);\r\n            activeDraggables.splice(newIndex, 0, item);\r\n        }\r\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\r\n            const reference = activeDraggables[0].getRootElement();\r\n            reference.parentNode.insertBefore(placeholder, reference);\r\n            activeDraggables.unshift(item);\r\n        }\r\n        else {\r\n            coerceElement(this.element).appendChild(placeholder);\r\n            activeDraggables.push(item);\r\n        }\r\n        // The transform needs to be cleared so it doesn't throw off the measurements.\r\n        placeholder.style.transform = '';\r\n        // Note that the positions were already cached when we called `start` above,\r\n        // but we need to refresh them since the amount of items has changed and also parent rects.\r\n        this._cacheItemPositions();\r\n        this._cacheParentPositions();\r\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\r\n        this._notifyReceivingSiblings();\r\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\r\n    }\r\n    /**\r\n     * Removes an item from the container after it was dragged into another container by the user.\r\n     * @param item Item that was dragged out.\r\n     */\r\n    exit(item) {\r\n        this._reset();\r\n        this.exited.next({ item, container: this });\r\n    }\r\n    /**\r\n     * Drops an item into this container.\r\n     * @param item Item being dropped into the container.\r\n     * @param currentIndex Index at which the item should be inserted.\r\n     * @param previousIndex Index of the item when dragging started.\r\n     * @param previousContainer Container from which the item got dragged in.\r\n     * @param isPointerOverContainer Whether the user's pointer was over the\r\n     *    container when the item was dropped.\r\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n     */\r\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\r\n        this._reset();\r\n        this.dropped.next({\r\n            item,\r\n            currentIndex,\r\n            previousIndex,\r\n            container: this,\r\n            previousContainer,\r\n            isPointerOverContainer,\r\n            distance,\r\n            dropPoint\r\n        });\r\n    }\r\n    /**\r\n     * Sets the draggable items that are a part of this list.\r\n     * @param items Items that are a part of this list.\r\n     */\r\n    withItems(items) {\r\n        const previousItems = this._draggables;\r\n        this._draggables = items;\r\n        items.forEach(item => item._withDropContainer(this));\r\n        if (this.isDragging()) {\r\n            const draggedItems = previousItems.filter(item => item.isDragging());\r\n            // If all of the items being dragged were removed\r\n            // from the list, abort the current drag sequence.\r\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\r\n                this._reset();\r\n            }\r\n            else {\r\n                this._cacheItems();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** Sets the layout direction of the drop list. */\r\n    withDirection(direction) {\r\n        this._direction = direction;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the containers that are connected to this one. When two or more containers are\r\n     * connected, the user will be allowed to transfer items between them.\r\n     * @param connectedTo Other containers that the current containers should be connected to.\r\n     */\r\n    connectedTo(connectedTo) {\r\n        this._siblings = connectedTo.slice();\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the orientation of the container.\r\n     * @param orientation New orientation for the container.\r\n     */\r\n    withOrientation(orientation) {\r\n        this._orientation = orientation;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets which parent elements are can be scrolled while the user is dragging.\r\n     * @param elements Elements that can be scrolled.\r\n     */\r\n    withScrollableParents(elements) {\r\n        const element = coerceElement(this.element);\r\n        // We always allow the current element to be scrollable\r\n        // so we need to ensure that it's in the array.\r\n        this._scrollableElements =\r\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\r\n        return this;\r\n    }\r\n    /** Gets the scrollable parents that are registered with this drop container. */\r\n    getScrollableParents() {\r\n        return this._scrollableElements;\r\n    }\r\n    /**\r\n     * Figures out the index of an item in the container.\r\n     * @param item Item whose index should be determined.\r\n     */\r\n    getItemIndex(item) {\r\n        if (!this._isDragging) {\r\n            return this._draggables.indexOf(item);\r\n        }\r\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n        // The rest of the logic still stands no matter what orientation we're in, however\r\n        // we need to invert the array when determining the index.\r\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\r\n            this._itemPositions.slice().reverse() : this._itemPositions;\r\n        return findIndex(items, currentItem => currentItem.drag === item);\r\n    }\r\n    /**\r\n     * Whether the list is able to receive the item that\r\n     * is currently being dragged inside a connected drop list.\r\n     */\r\n    isReceiving() {\r\n        return this._activeSiblings.size > 0;\r\n    }\r\n    /**\r\n     * Sorts an item inside the container based on its position.\r\n     * @param item Item to be sorted.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n     */\r\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\r\n        // Don't sort the item if sorting is disabled or it's out of range.\r\n        if (this.sortingDisabled || !this._clientRect ||\r\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\r\n            return;\r\n        }\r\n        const siblings = this._itemPositions;\r\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n        if (newIndex === -1 && siblings.length > 0) {\r\n            return;\r\n        }\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\r\n        const siblingAtNewPosition = siblings[newIndex];\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        const newPosition = siblingAtNewPosition.clientRect;\r\n        const delta = currentIndex > newIndex ? 1 : -1;\r\n        // How many pixels the item's placeholder should be offset.\r\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n        // How many pixels all the other items should be offset.\r\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n        // Save the previous order of the items before moving the item to its new index.\r\n        // We use this to check whether an item has been moved as a result of the sorting.\r\n        const oldOrder = siblings.slice();\r\n        // Shuffle the array in place.\r\n        moveItemInArray(siblings, currentIndex, newIndex);\r\n        this.sorted.next({\r\n            previousIndex: currentIndex,\r\n            currentIndex: newIndex,\r\n            container: this,\r\n            item\r\n        });\r\n        siblings.forEach((sibling, index) => {\r\n            // Don't do anything if the position hasn't changed.\r\n            if (oldOrder[index] === sibling) {\r\n                return;\r\n            }\r\n            const isDraggedItem = sibling.drag === item;\r\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\r\n                sibling.drag.getRootElement();\r\n            // Update the offset to reflect the new position.\r\n            sibling.offset += offset;\r\n            // Since we're moving the items with a `transform`, we need to adjust their cached\r\n            // client rects to reflect their new position, as well as swap their positions in the cache.\r\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n            // elements may be mid-animation which will give us a wrong result.\r\n            if (isHorizontal) {\r\n                // Round the transforms since some browsers will\r\n                // blur the elements, for sub-pixel transforms.\r\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\r\n                adjustClientRect(sibling.clientRect, 0, offset);\r\n            }\r\n            else {\r\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\r\n                adjustClientRect(sibling.clientRect, offset, 0);\r\n            }\r\n        });\r\n        // Note that it's important that we do this after the client rects have been adjusted.\r\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\r\n        this._previousSwap.drag = siblingAtNewPosition.drag;\r\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is close to the edges of either the\r\n     * viewport or the drop list and starts the auto-scroll sequence.\r\n     * @param pointerX User's pointer position along the x axis.\r\n     * @param pointerY User's pointer position along the y axis.\r\n     */\r\n    _startScrollingIfNecessary(pointerX, pointerY) {\r\n        if (this.autoScrollDisabled) {\r\n            return;\r\n        }\r\n        let scrollNode;\r\n        let verticalScrollDirection = 0 /* NONE */;\r\n        let horizontalScrollDirection = 0 /* NONE */;\r\n        // Check whether we should start scrolling any of the parent containers.\r\n        this._parentPositions.positions.forEach((position, element) => {\r\n            // We have special handling for the `document` below. Also this would be\r\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\r\n            if (element === this._document || !position.clientRect || scrollNode) {\r\n                return;\r\n            }\r\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\r\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\r\n                if (verticalScrollDirection || horizontalScrollDirection) {\r\n                    scrollNode = element;\r\n                }\r\n            }\r\n        });\r\n        // Otherwise check if we can start scrolling the viewport.\r\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\r\n            const { width, height } = this._viewportRuler.getViewportSize();\r\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\r\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\r\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\r\n            scrollNode = window;\r\n        }\r\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\r\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\r\n            scrollNode !== this._scrollNode)) {\r\n            this._verticalScrollDirection = verticalScrollDirection;\r\n            this._horizontalScrollDirection = horizontalScrollDirection;\r\n            this._scrollNode = scrollNode;\r\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\r\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\r\n            }\r\n            else {\r\n                this._stopScrolling();\r\n            }\r\n        }\r\n    }\r\n    /** Stops any currently-running auto-scroll sequences. */\r\n    _stopScrolling() {\r\n        this._stopScrollTimers.next();\r\n    }\r\n    /** Starts the dragging sequence within the list. */\r\n    _draggingStarted() {\r\n        const styles = coerceElement(this.element).style;\r\n        this.beforeStarted.next();\r\n        this._isDragging = true;\r\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\r\n        // scrolling. The browser seems to round the value based on the snapping points which means\r\n        // that we can't increment/decrement the scroll position.\r\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\r\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\r\n        this._cacheItems();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this._listenToScrollEvents();\r\n    }\r\n    /** Caches the positions of the configured scrollable parents. */\r\n    _cacheParentPositions() {\r\n        const element = coerceElement(this.element);\r\n        this._parentPositions.cache(this._scrollableElements);\r\n        // The list element is always in the `scrollableElements`\r\n        // so we can take advantage of the cached `ClientRect`.\r\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\r\n    }\r\n    /** Refreshes the position cache of the items and sibling containers. */\r\n    _cacheItemPositions() {\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        this._itemPositions = this._activeDraggables.map(drag => {\r\n            const elementToMeasure = drag.getVisibleElement();\r\n            return {\r\n                drag,\r\n                offset: 0,\r\n                initialTransform: elementToMeasure.style.transform || '',\r\n                clientRect: getMutableClientRect(elementToMeasure),\r\n            };\r\n        }).sort((a, b) => {\r\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\r\n                a.clientRect.top - b.clientRect.top;\r\n        });\r\n    }\r\n    /** Resets the container to its initial state. */\r\n    _reset() {\r\n        this._isDragging = false;\r\n        const styles = coerceElement(this.element).style;\r\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\r\n        // TODO(crisbeto): may have to wait for the animations to finish.\r\n        this._activeDraggables.forEach(item => {\r\n            var _a;\r\n            const rootElement = item.getRootElement();\r\n            if (rootElement) {\r\n                const initialTransform = (_a = this._itemPositions\r\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\r\n                rootElement.style.transform = initialTransform || '';\r\n            }\r\n        });\r\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\r\n        this._activeDraggables = [];\r\n        this._itemPositions = [];\r\n        this._previousSwap.drag = null;\r\n        this._previousSwap.delta = 0;\r\n        this._previousSwap.overlaps = false;\r\n        this._stopScrolling();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this._parentPositions.clear();\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n     * @param currentIndex Index of the item currently being dragged.\r\n     * @param siblings All of the items in the list.\r\n     * @param delta Direction in which the user is moving.\r\n     */\r\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        const immediateSibling = siblings[currentIndex + delta * -1];\r\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n        if (immediateSibling) {\r\n            const start = isHorizontal ? 'left' : 'top';\r\n            const end = isHorizontal ? 'right' : 'bottom';\r\n            // Get the spacing between the start of the current item and the end of the one immediately\r\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n            // offset in order to push the element to where it will be when it's inline and is influenced\r\n            // by the `margin` of its siblings.\r\n            if (delta === -1) {\r\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n            }\r\n            else {\r\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n            }\r\n        }\r\n        return siblingOffset;\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n     * @param currentPosition Current position of the item.\r\n     * @param newPosition Position of the item where the current item should be moved.\r\n     * @param delta Direction in which the user is moving.\r\n     */\r\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\r\n            newPosition.top - currentPosition.top;\r\n        // Account for differences in the item width/height.\r\n        if (delta === -1) {\r\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\r\n                newPosition.height - currentPosition.height;\r\n        }\r\n        return itemOffset;\r\n    }\r\n    /**\r\n     * Checks if pointer is entering in the first position\r\n     * @param pointerX Position of the user's pointer along the X axis.\r\n     * @param pointerY Position of the user's pointer along the Y axis.\r\n     */\r\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\r\n        if (!this._activeDraggables.length) {\r\n            return false;\r\n        }\r\n        const itemPositions = this._itemPositions;\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\r\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\r\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\r\n        if (reversed) {\r\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\r\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\r\n        }\r\n        else {\r\n            const firstItemRect = itemPositions[0].clientRect;\r\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n     * @param item Item that is being sorted.\r\n     * @param pointerX Position of the user's pointer along the X axis.\r\n     * @param pointerY Position of the user's pointer along the Y axis.\r\n     * @param delta Direction in which the user is moving their pointer.\r\n     */\r\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\r\n        const isHorizontal = this._orientation === 'horizontal';\r\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\r\n            if (drag === item) {\r\n                // If there's only one item left in the container, it must be\r\n                // the dragged item itself so we use it as a reference.\r\n                return array.length < 2;\r\n            }\r\n            if (delta) {\r\n                const direction = isHorizontal ? delta.x : delta.y;\r\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\r\n                // the item after we made the swap, and they didn't change the direction in which they're\r\n                // dragging, we don't consider it a direction swap.\r\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\r\n                    direction === this._previousSwap.delta) {\r\n                    return false;\r\n                }\r\n            }\r\n            return isHorizontal ?\r\n                // Round these down since most browsers report client rects with\r\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\r\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\r\n        });\r\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\r\n    }\r\n    /** Caches the current items in the list and their positions. */\r\n    _cacheItems() {\r\n        this._activeDraggables = this._draggables.slice();\r\n        this._cacheItemPositions();\r\n        this._cacheParentPositions();\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is positioned over the container.\r\n     * @param x Pointer position along the X axis.\r\n     * @param y Pointer position along the Y axis.\r\n     */\r\n    _isOverContainer(x, y) {\r\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\r\n    }\r\n    /**\r\n     * Figures out whether an item should be moved into a sibling\r\n     * drop container, based on its current position.\r\n     * @param item Drag item that is being moved.\r\n     * @param x Position of the item along the X axis.\r\n     * @param y Position of the item along the Y axis.\r\n     */\r\n    _getSiblingContainerFromPosition(item, x, y) {\r\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\r\n    }\r\n    /**\r\n     * Checks whether the drop list can receive the passed-in item.\r\n     * @param item Item that is being dragged into the list.\r\n     * @param x Position of the item along the X axis.\r\n     * @param y Position of the item along the Y axis.\r\n     */\r\n    _canReceive(item, x, y) {\r\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\r\n            !this.enterPredicate(item, this)) {\r\n            return false;\r\n        }\r\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\r\n        // If there's no element at the pointer position, then\r\n        // the client rect is probably scrolled out of the view.\r\n        if (!elementFromPoint) {\r\n            return false;\r\n        }\r\n        const nativeElement = coerceElement(this.element);\r\n        // The `ClientRect`, that we're using to find the container over which the user is\r\n        // hovering, doesn't give us any information on whether the element has been scrolled\r\n        // out of the view or whether it's overlapping with other containers. This means that\r\n        // we could end up transferring the item into a container that's invisible or is positioned\r\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n    }\r\n    /**\r\n     * Called by one of the connected drop lists when a dragging sequence has started.\r\n     * @param sibling Sibling in which dragging has started.\r\n     */\r\n    _startReceiving(sibling, items) {\r\n        const activeSiblings = this._activeSiblings;\r\n        if (!activeSiblings.has(sibling) && items.every(item => {\r\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\r\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\r\n            // container, if it has left the initial container and none of the connected containers\r\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\r\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\r\n        })) {\r\n            activeSiblings.add(sibling);\r\n            this._cacheParentPositions();\r\n            this._listenToScrollEvents();\r\n        }\r\n    }\r\n    /**\r\n     * Called by a connected drop list when dragging has stopped.\r\n     * @param sibling Sibling whose dragging has stopped.\r\n     */\r\n    _stopReceiving(sibling) {\r\n        this._activeSiblings.delete(sibling);\r\n        this._viewportScrollSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Starts listening to scroll events on the viewport.\r\n     * Used for updating the internal state of the list.\r\n     */\r\n    _listenToScrollEvents() {\r\n        this._viewportScrollSubscription = this._dragDropRegistry\r\n            .scrolled(this._getShadowRoot())\r\n            .subscribe(event => {\r\n            if (this.isDragging()) {\r\n                const scrollDifference = this._parentPositions.handleScroll(event);\r\n                if (scrollDifference) {\r\n                    // Since we know the amount that the user has scrolled we can shift all of the\r\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\r\n                    // we can avoid inconsistent behavior where we might be measuring the element before\r\n                    // its position has changed.\r\n                    this._itemPositions.forEach(({ clientRect }) => {\r\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\r\n                    });\r\n                    // We need two loops for this, because we want all of the cached\r\n                    // positions to be up-to-date before we re-sort the item.\r\n                    this._itemPositions.forEach(({ drag }) => {\r\n                        if (this._dragDropRegistry.isDragging(drag)) {\r\n                            // We need to re-sort the item manually, because the pointer move\r\n                            // events won't be dispatched while the user is scrolling.\r\n                            drag._sortFromLastPointerPosition();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else if (this.isReceiving()) {\r\n                this._cacheParentPositions();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n     * than saving it in property directly on init, because we want to resolve it as late as possible\r\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n     */\r\n    _getShadowRoot() {\r\n        if (!this._cachedShadowRoot) {\r\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\r\n            this._cachedShadowRoot = shadowRoot || this._document;\r\n        }\r\n        return this._cachedShadowRoot;\r\n    }\r\n    /** Notifies any siblings that may potentially receive the item. */\r\n    _notifyReceivingSiblings() {\r\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\r\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\r\n    }\r\n}\r\n/**\r\n * Finds the index of an item that matches a predicate function. Used as an equivalent\r\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\r\n * @param array Array in which to look for matches.\r\n * @param predicate Function used to determine whether an item is a match.\r\n */\r\nfunction findIndex(array, predicate) {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (predicate(array[i], i, array)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Increments the vertical scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementVerticalScroll(node, amount) {\r\n    if (node === window) {\r\n        node.scrollBy(0, amount);\r\n    }\r\n    else {\r\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n        node.scrollTop += amount;\r\n    }\r\n}\r\n/**\r\n * Increments the horizontal scroll position of a node.\r\n * @param node Node whose scroll position should change.\r\n * @param amount Amount of pixels that the `node` should be scrolled.\r\n */\r\nfunction incrementHorizontalScroll(node, amount) {\r\n    if (node === window) {\r\n        node.scrollBy(amount, 0);\r\n    }\r\n    else {\r\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\r\n        node.scrollLeft += amount;\r\n    }\r\n}\r\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getVerticalScrollDirection(clientRect, pointerY) {\r\n    const { top, bottom, height } = clientRect;\r\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\r\n        return 1 /* UP */;\r\n    }\r\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\r\n        return 2 /* DOWN */;\r\n    }\r\n    return 0 /* NONE */;\r\n}\r\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n */\r\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\r\n    const { left, right, width } = clientRect;\r\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\r\n        return 1 /* LEFT */;\r\n    }\r\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\r\n        return 2 /* RIGHT */;\r\n    }\r\n    return 0 /* NONE */;\r\n}\r\n/**\r\n * Gets the directions in which an element node should be scrolled,\r\n * assuming that the user's pointer is already within it scrollable region.\r\n * @param element Element for which we should calculate the scroll direction.\r\n * @param clientRect Bounding client rectangle of the element.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\r\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\r\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\r\n    let verticalScrollDirection = 0 /* NONE */;\r\n    let horizontalScrollDirection = 0 /* NONE */;\r\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\r\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\r\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\r\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\r\n    if (computedVertical) {\r\n        const scrollTop = element.scrollTop;\r\n        if (computedVertical === 1 /* UP */) {\r\n            if (scrollTop > 0) {\r\n                verticalScrollDirection = 1 /* UP */;\r\n            }\r\n        }\r\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\r\n            verticalScrollDirection = 2 /* DOWN */;\r\n        }\r\n    }\r\n    if (computedHorizontal) {\r\n        const scrollLeft = element.scrollLeft;\r\n        if (computedHorizontal === 1 /* LEFT */) {\r\n            if (scrollLeft > 0) {\r\n                horizontalScrollDirection = 1 /* LEFT */;\r\n            }\r\n        }\r\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\r\n            horizontalScrollDirection = 2 /* RIGHT */;\r\n        }\r\n    }\r\n    return [verticalScrollDirection, horizontalScrollDirection];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Event options that can be used to bind an active, capturing event. */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n    passive: false,\r\n    capture: true\r\n});\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\nclass DragDropRegistry {\r\n    constructor(_ngZone, _document) {\r\n        this._ngZone = _ngZone;\r\n        /** Registered drop container instances. */\r\n        this._dropInstances = new Set();\r\n        /** Registered drag item instances. */\r\n        this._dragInstances = new Set();\r\n        /** Drag item instances that are currently being dragged. */\r\n        this._activeDragInstances = [];\r\n        /** Keeps track of the event listeners that we've bound to the `document`. */\r\n        this._globalListeners = new Map();\r\n        /**\r\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\r\n         * because it'll be called a lot and we don't want to create a new function every time.\r\n         */\r\n        this._draggingPredicate = (item) => item.isDragging();\r\n        /**\r\n         * Emits the `touchmove` or `mousemove` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerMove = new Subject();\r\n        /**\r\n         * Emits the `touchend` or `mouseup` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerUp = new Subject();\r\n        /**\r\n         * Emits when the viewport has been scrolled while the user is dragging an item.\r\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\r\n         * @breaking-change 13.0.0\r\n         */\r\n        this.scroll = new Subject();\r\n        /**\r\n         * Event listener that will prevent the default browser action while the user is dragging.\r\n         * @param event Event whose default action should be prevented.\r\n         */\r\n        this._preventDefaultWhileDragging = (event) => {\r\n            if (this._activeDragInstances.length > 0) {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\r\n        this._persistentTouchmoveListener = (event) => {\r\n            if (this._activeDragInstances.length > 0) {\r\n                // Note that we only want to prevent the default action after dragging has actually started.\r\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\r\n                // but it could be pushed back if the user has set up a drag delay or threshold.\r\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\r\n                    event.preventDefault();\r\n                }\r\n                this.pointerMove.next(event);\r\n            }\r\n        };\r\n        this._document = _document;\r\n    }\r\n    /** Adds a drop container to the registry. */\r\n    registerDropContainer(drop) {\r\n        if (!this._dropInstances.has(drop)) {\r\n            this._dropInstances.add(drop);\r\n        }\r\n    }\r\n    /** Adds a drag item instance to the registry. */\r\n    registerDragItem(drag) {\r\n        this._dragInstances.add(drag);\r\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n        // won't preventDefault on a dynamically-added `touchmove` listener.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n        if (this._dragInstances.size === 1) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                // The event handler has to be explicitly active,\r\n                // because newer browsers make it passive by default.\r\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\r\n            });\r\n        }\r\n    }\r\n    /** Removes a drop container from the registry. */\r\n    removeDropContainer(drop) {\r\n        this._dropInstances.delete(drop);\r\n    }\r\n    /** Removes a drag item instance from the registry. */\r\n    removeDragItem(drag) {\r\n        this._dragInstances.delete(drag);\r\n        this.stopDragging(drag);\r\n        if (this._dragInstances.size === 0) {\r\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the dragging sequence for a drag instance.\r\n     * @param drag Drag instance which is being dragged.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    startDragging(drag, event) {\r\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n        if (this._activeDragInstances.indexOf(drag) > -1) {\r\n            return;\r\n        }\r\n        this._activeDragInstances.push(drag);\r\n        if (this._activeDragInstances.length === 1) {\r\n            const isTouchEvent = event.type.startsWith('touch');\r\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n            this._globalListeners\r\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\r\n                handler: (e) => this.pointerUp.next(e),\r\n                options: true\r\n            })\r\n                .set('scroll', {\r\n                handler: (e) => this.scroll.next(e),\r\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\r\n                // the document. See https://github.com/angular/components/issues/17144.\r\n                options: true\r\n            })\r\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n                // recalculation which can be expensive on pages with a lot of elements.\r\n                .set('selectstart', {\r\n                handler: this._preventDefaultWhileDragging,\r\n                options: activeCapturingEventOptions\r\n            });\r\n            // We don't have to bind a move event for touch drag sequences, because\r\n            // we already have a persistent global one bound from `registerDragItem`.\r\n            if (!isTouchEvent) {\r\n                this._globalListeners.set('mousemove', {\r\n                    handler: (e) => this.pointerMove.next(e),\r\n                    options: activeCapturingEventOptions\r\n                });\r\n            }\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this._globalListeners.forEach((config, name) => {\r\n                    this._document.addEventListener(name, config.handler, config.options);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /** Stops dragging a drag item instance. */\r\n    stopDragging(drag) {\r\n        const index = this._activeDragInstances.indexOf(drag);\r\n        if (index > -1) {\r\n            this._activeDragInstances.splice(index, 1);\r\n            if (this._activeDragInstances.length === 0) {\r\n                this._clearGlobalListeners();\r\n            }\r\n        }\r\n    }\r\n    /** Gets whether a drag item instance is currently being dragged. */\r\n    isDragging(drag) {\r\n        return this._activeDragInstances.indexOf(drag) > -1;\r\n    }\r\n    /**\r\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\r\n     * dragged.\r\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\r\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\r\n     *   be used to include an additional top-level listener at the shadow root level.\r\n     */\r\n    scrolled(shadowRoot) {\r\n        const streams = [this.scroll];\r\n        if (shadowRoot && shadowRoot !== this._document) {\r\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\r\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\r\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\r\n            streams.push(new Observable((observer) => {\r\n                return this._ngZone.runOutsideAngular(() => {\r\n                    const eventOptions = true;\r\n                    const callback = (event) => {\r\n                        if (this._activeDragInstances.length) {\r\n                            observer.next(event);\r\n                        }\r\n                    };\r\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\r\n                    return () => {\r\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\r\n                    };\r\n                });\r\n            }));\r\n        }\r\n        return merge(...streams);\r\n    }\r\n    ngOnDestroy() {\r\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n        this._clearGlobalListeners();\r\n        this.pointerMove.complete();\r\n        this.pointerUp.complete();\r\n    }\r\n    /** Clears out the global event listeners from the `document`. */\r\n    _clearGlobalListeners() {\r\n        this._globalListeners.forEach((config, name) => {\r\n            this._document.removeEventListener(name, config.handler, config.options);\r\n        });\r\n        this._globalListeners.clear();\r\n    }\r\n}\r\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\r\nDragDropRegistry.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n    dragStartThreshold: 5,\r\n    pointerDirectionChangeThreshold: 5\r\n};\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\nclass DragDrop {\r\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n    }\r\n    /**\r\n     * Turns an element into a draggable item.\r\n     * @param element Element to which to attach the dragging functionality.\r\n     * @param config Object used to configure the dragging behavior.\r\n     */\r\n    createDrag(element, config = DEFAULT_CONFIG) {\r\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\r\n    }\r\n    /**\r\n     * Turns an element into a drop list.\r\n     * @param element Element to which to attach the drop list functionality.\r\n     */\r\n    createDropList(element) {\r\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\r\n    }\r\n}\r\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\r\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\r\nDragDrop.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ViewportRuler },\r\n    { type: DragDropRegistry }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\r\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\r\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\r\nclass CdkDropListGroup {\r\n    constructor() {\r\n        /** Drop lists registered inside the group. */\r\n        this._items = new Set();\r\n        this._disabled = false;\r\n    }\r\n    /** Whether starting a dragging sequence from inside this group is disabled. */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    ngOnDestroy() {\r\n        this._items.clear();\r\n    }\r\n}\r\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\r\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\r\nCdkDropListGroup.propDecorators = {\r\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkDropListGroup]',\r\n                exportAs: 'cdkDropListGroup',\r\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\r\n            }]\r\n    }], function () { return []; }, { disabled: [{\r\n            type: Input,\r\n            args: ['cdkDropListGroupDisabled']\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to configure the\r\n * behavior of the drag&drop-related components.\r\n */\r\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Asserts that a particular node is an element.\r\n * @param node Node to be checked.\r\n * @param name Name to attach to the error message.\r\n */\r\nfunction assertElementNode(node, name) {\r\n    if (node.nodeType !== 1) {\r\n        throw Error(`${name} must be attached to an element node. ` +\r\n            `Currently attached to \"${node.nodeName}\".`);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\r\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\r\nconst ɵ0 = undefined;\r\n/** Container that wraps a set of draggable items. */\r\nclass CdkDropList {\r\n    constructor(\r\n    /** Element that the drop list is attached to. */\r\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\r\n        this.element = element;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._scrollDispatcher = _scrollDispatcher;\r\n        this._dir = _dir;\r\n        this._group = _group;\r\n        /** Emits when the list has been destroyed. */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Other draggable containers that this container is connected to and into which the\r\n         * container's items can be transferred. Can either be references to other drop containers,\r\n         * or their unique IDs.\r\n         */\r\n        this.connectedTo = [];\r\n        /**\r\n         * Unique ID for the drop zone. Can be used as a reference\r\n         * in the `connectedTo` of another `CdkDropList`.\r\n         */\r\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = () => true;\r\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\r\n        this.sortPredicate = () => true;\r\n        /** Emits when the user drops an item inside the container. */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new EventEmitter();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new EventEmitter();\r\n        /** Emits as the user is swapping items while actively dragging. */\r\n        this.sorted = new EventEmitter();\r\n        /**\r\n         * Keeps track of the items that are registered with this container. Historically we used to\r\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\r\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\r\n         * correctly. What we do instead is to have the items register themselves with the container\r\n         * and then we sort them based on their position in the DOM.\r\n         */\r\n        this._unsortedItems = new Set();\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            assertElementNode(element.nativeElement, 'cdkDropList');\r\n        }\r\n        this._dropListRef = dragDrop.createDropList(element);\r\n        this._dropListRef.data = this;\r\n        if (config) {\r\n            this._assignDefaults(config);\r\n        }\r\n        this._dropListRef.enterPredicate = (drag, drop) => {\r\n            return this.enterPredicate(drag.data, drop.data);\r\n        };\r\n        this._dropListRef.sortPredicate =\r\n            (index, drag, drop) => {\r\n                return this.sortPredicate(index, drag.data, drop.data);\r\n            };\r\n        this._setupInputSyncSubscription(this._dropListRef);\r\n        this._handleEvents(this._dropListRef);\r\n        CdkDropList._dropLists.push(this);\r\n        if (_group) {\r\n            _group._items.add(this);\r\n        }\r\n    }\r\n    /** Whether starting a dragging sequence from this container is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (!!this._group && this._group.disabled);\r\n    }\r\n    set disabled(value) {\r\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\r\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\r\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\r\n        // the user in a disabled state, so we also need to sync it as it's being set.\r\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /** Registers an items with the drop list. */\r\n    addItem(item) {\r\n        this._unsortedItems.add(item);\r\n        if (this._dropListRef.isDragging()) {\r\n            this._syncItemsWithRef();\r\n        }\r\n    }\r\n    /** Removes an item from the drop list. */\r\n    removeItem(item) {\r\n        this._unsortedItems.delete(item);\r\n        if (this._dropListRef.isDragging()) {\r\n            this._syncItemsWithRef();\r\n        }\r\n    }\r\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\r\n    getSortedItems() {\r\n        return Array.from(this._unsortedItems).sort((a, b) => {\r\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\r\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\r\n            // tslint:disable-next-line:no-bitwise\r\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        const index = CdkDropList._dropLists.indexOf(this);\r\n        if (index > -1) {\r\n            CdkDropList._dropLists.splice(index, 1);\r\n        }\r\n        if (this._group) {\r\n            this._group._items.delete(this);\r\n        }\r\n        this._unsortedItems.clear();\r\n        this._dropListRef.dispose();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n    _setupInputSyncSubscription(ref) {\r\n        if (this._dir) {\r\n            this._dir.change\r\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n                .subscribe(value => ref.withDirection(value));\r\n        }\r\n        ref.beforeStarted.subscribe(() => {\r\n            const siblings = coerceArray(this.connectedTo).map(drop => {\r\n                if (typeof drop === 'string') {\r\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\r\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\r\n                    }\r\n                    return correspondingDropList;\r\n                }\r\n                return drop;\r\n            });\r\n            if (this._group) {\r\n                this._group._items.forEach(drop => {\r\n                    if (siblings.indexOf(drop) === -1) {\r\n                        siblings.push(drop);\r\n                    }\r\n                });\r\n            }\r\n            // Note that we resolve the scrollable parents here so that we delay the resolution\r\n            // as long as possible, ensuring that the element is in its final place in the DOM.\r\n            if (!this._scrollableParentsResolved) {\r\n                const scrollableParents = this._scrollDispatcher\r\n                    .getAncestorScrollContainers(this.element)\r\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\r\n                this._dropListRef.withScrollableParents(scrollableParents);\r\n                // Only do this once since it involves traversing the DOM and the parents\r\n                // shouldn't be able to change without the drop list being destroyed.\r\n                this._scrollableParentsResolved = true;\r\n            }\r\n            ref.disabled = this.disabled;\r\n            ref.lockAxis = this.lockAxis;\r\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\r\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\r\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\r\n            ref\r\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\r\n                .withOrientation(this.orientation);\r\n        });\r\n    }\r\n    /** Handles events from the underlying DropListRef. */\r\n    _handleEvents(ref) {\r\n        ref.beforeStarted.subscribe(() => {\r\n            this._syncItemsWithRef();\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.entered.subscribe(event => {\r\n            this.entered.emit({\r\n                container: this,\r\n                item: event.item.data,\r\n                currentIndex: event.currentIndex\r\n            });\r\n        });\r\n        ref.exited.subscribe(event => {\r\n            this.exited.emit({\r\n                container: this,\r\n                item: event.item.data\r\n            });\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.sorted.subscribe(event => {\r\n            this.sorted.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                container: this,\r\n                item: event.item.data\r\n            });\r\n        });\r\n        ref.dropped.subscribe(event => {\r\n            this.dropped.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                previousContainer: event.previousContainer.data,\r\n                container: event.container.data,\r\n                item: event.item.data,\r\n                isPointerOverContainer: event.isPointerOverContainer,\r\n                distance: event.distance,\r\n                dropPoint: event.dropPoint\r\n            });\r\n            // Mark for check since all of these events run outside of change\r\n            // detection and we're not guaranteed for something else to have triggered it.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n    }\r\n    /** Assigns the default input values based on a provided config object. */\r\n    _assignDefaults(config) {\r\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\r\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\r\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\r\n        this.orientation = listOrientation || 'vertical';\r\n        if (lockAxis) {\r\n            this.lockAxis = lockAxis;\r\n        }\r\n    }\r\n    /** Syncs up the registered drag items with underlying drop list ref. */\r\n    _syncItemsWithRef() {\r\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\r\n    }\r\n}\r\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\r\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\r\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\r\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            // Prevent child drop lists from picking up the same group as their parent.\r\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\r\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\r\n        ])] });\r\n/** Keeps track of the drop lists that are currently on the page. */\r\nCdkDropList._dropLists = [];\r\nCdkDropList.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: DragDrop },\r\n    { type: ChangeDetectorRef },\r\n    { type: ScrollDispatcher },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\r\n];\r\nCdkDropList.propDecorators = {\r\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\r\n    data: [{ type: Input, args: ['cdkDropListData',] }],\r\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\r\n    id: [{ type: Input }],\r\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\r\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\r\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\r\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\r\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\r\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\r\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\r\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\r\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\r\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\r\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkDropList], cdk-drop-list',\r\n                exportAs: 'cdkDropList',\r\n                providers: [\r\n                    // Prevent child drop lists from picking up the same group as their parent.\r\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\r\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\r\n                ],\r\n                host: {\r\n                    'class': 'cdk-drop-list',\r\n                    '[attr.id]': 'id',\r\n                    '[class.cdk-drop-list-disabled]': 'disabled',\r\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: CdkDropListGroup, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_DROP_LIST_GROUP]\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_DRAG_CONFIG]\r\n            }] }]; }, { connectedTo: [{\r\n            type: Input,\r\n            args: ['cdkDropListConnectedTo']\r\n        }], id: [{\r\n            type: Input\r\n        }], enterPredicate: [{\r\n            type: Input,\r\n            args: ['cdkDropListEnterPredicate']\r\n        }], sortPredicate: [{\r\n            type: Input,\r\n            args: ['cdkDropListSortPredicate']\r\n        }], dropped: [{\r\n            type: Output,\r\n            args: ['cdkDropListDropped']\r\n        }], entered: [{\r\n            type: Output,\r\n            args: ['cdkDropListEntered']\r\n        }], exited: [{\r\n            type: Output,\r\n            args: ['cdkDropListExited']\r\n        }], sorted: [{\r\n            type: Output,\r\n            args: ['cdkDropListSorted']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkDropListDisabled']\r\n        }], sortingDisabled: [{\r\n            type: Input,\r\n            args: ['cdkDropListSortingDisabled']\r\n        }], autoScrollDisabled: [{\r\n            type: Input,\r\n            args: ['cdkDropListAutoScrollDisabled']\r\n        }], orientation: [{\r\n            type: Input,\r\n            args: ['cdkDropListOrientation']\r\n        }], lockAxis: [{\r\n            type: Input,\r\n            args: ['cdkDropListLockAxis']\r\n        }], data: [{\r\n            type: Input,\r\n            args: ['cdkDropListData']\r\n        }], autoScrollStep: [{\r\n            type: Input,\r\n            args: ['cdkDropListAutoScrollStep']\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\r\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\r\n/** Handle that can be used to drag a CdkDrag instance. */\r\nclass CdkDragHandle {\r\n    constructor(element, parentDrag) {\r\n        this.element = element;\r\n        /** Emits when the state of the handle has changed. */\r\n        this._stateChanges = new Subject();\r\n        this._disabled = false;\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\r\n        }\r\n        this._parentDrag = parentDrag;\r\n    }\r\n    /** Whether starting to drag through this handle is disabled. */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._stateChanges.next(this);\r\n    }\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\r\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\r\nCdkDragHandle.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\r\n];\r\nCdkDragHandle.propDecorators = {\r\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkDragHandle]',\r\n                host: {\r\n                    'class': 'cdk-drag-handle'\r\n                },\r\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_DRAG_PARENT]\r\n            }, {\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }] }]; }, { disabled: [{\r\n            type: Input,\r\n            args: ['cdkDragHandleDisabled']\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\r\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\nclass CdkDragPlaceholder {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\r\nCdkDragPlaceholder.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nCdkDragPlaceholder.propDecorators = {\r\n    data: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'ng-template[cdkDragPlaceholder]',\r\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\r\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\nclass CdkDragPreview {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n        this._matchSize = false;\r\n    }\r\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\r\n    get matchSize() { return this._matchSize; }\r\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\r\n}\r\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\r\nCdkDragPreview.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\nCdkDragPreview.propDecorators = {\r\n    data: [{ type: Input }],\r\n    matchSize: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'ng-template[cdkDragPreview]',\r\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\r\n            type: Input\r\n        }], data: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DRAG_HOST_CLASS = 'cdk-drag';\r\n/** Element that can be moved inside a CdkDropList container. */\r\nclass CdkDrag {\r\n    constructor(\r\n    /** Element that the draggable is attached to. */\r\n    element, \r\n    /** Droppable container that the draggable is a part of. */\r\n    dropContainer, \r\n    /**\r\n     * @deprecated `_document` parameter no longer being used and will be removed.\r\n     * @breaking-change 12.0.0\r\n     */\r\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\r\n        this.element = element;\r\n        this.dropContainer = dropContainer;\r\n        this._ngZone = _ngZone;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._dir = _dir;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._selfHandle = _selfHandle;\r\n        this._parentDrag = _parentDrag;\r\n        this._destroyed = new Subject();\r\n        /** Emits when the user starts dragging the item. */\r\n        this.started = new EventEmitter();\r\n        /** Emits when the user has released a drag item, before any animations have started. */\r\n        this.released = new EventEmitter();\r\n        /** Emits when the user stops dragging an item in the container. */\r\n        this.ended = new EventEmitter();\r\n        /** Emits when the user has moved the item into a new container. */\r\n        this.entered = new EventEmitter();\r\n        /** Emits when the user removes the item its container by dragging it into another container. */\r\n        this.exited = new EventEmitter();\r\n        /** Emits when the user drops the item inside a container. */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = new Observable((observer) => {\r\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\r\n                source: this,\r\n                pointerPosition: movedEvent.pointerPosition,\r\n                event: movedEvent.event,\r\n                delta: movedEvent.delta,\r\n                distance: movedEvent.distance\r\n            }))).subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n            };\r\n        });\r\n        this._dragRef = dragDrop.createDrag(element, {\r\n            dragStartThreshold: config && config.dragStartThreshold != null ?\r\n                config.dragStartThreshold : 5,\r\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\r\n                config.pointerDirectionChangeThreshold : 5,\r\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\r\n        });\r\n        this._dragRef.data = this;\r\n        // We have to keep track of the drag instances in order to be able to match an element to\r\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\r\n        // element could be different.\r\n        CdkDrag._dragInstances.push(this);\r\n        if (config) {\r\n            this._assignDefaults(config);\r\n        }\r\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\r\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\r\n        // where there are no items on the first change detection pass, but the items get picked up as\r\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\r\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\r\n        // is too late since the two modes save different kinds of information. We work around it by\r\n        // assigning the drop container both from here and the list.\r\n        if (dropContainer) {\r\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\r\n            dropContainer.addItem(this);\r\n        }\r\n        this._syncInputs(this._dragRef);\r\n        this._handleEvents(this._dragRef);\r\n    }\r\n    /** Whether starting to drag this element is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._dragRef.disabled = this._disabled;\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._dragRef.getPlaceholderElement();\r\n    }\r\n    /** Returns the root draggable element. */\r\n    getRootElement() {\r\n        return this._dragRef.getRootElement();\r\n    }\r\n    /** Resets a standalone drag item to its initial position. */\r\n    reset() {\r\n        this._dragRef.reset();\r\n    }\r\n    /**\r\n     * Gets the pixel coordinates of the draggable outside of a drop container.\r\n     */\r\n    getFreeDragPosition() {\r\n        return this._dragRef.getFreeDragPosition();\r\n    }\r\n    ngAfterViewInit() {\r\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\r\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            // We need to wait for the zone to stabilize, in order for the reference\r\n            // element to be in the proper place in the DOM. This is mostly relevant\r\n            // for draggable elements inside portals since they get stamped out in\r\n            // their original DOM position and then they get transferred to the portal.\r\n            this._ngZone.onStable\r\n                .pipe(take(1), takeUntil(this._destroyed))\r\n                .subscribe(() => {\r\n                this._updateRootElement();\r\n                this._setupHandlesListener();\r\n                if (this.freeDragPosition) {\r\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        const rootSelectorChange = changes['rootElementSelector'];\r\n        const positionChange = changes['freeDragPosition'];\r\n        // We don't have to react to the first change since it's being\r\n        // handled in `ngAfterViewInit` where it needs to be deferred.\r\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n            this._updateRootElement();\r\n        }\r\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dropContainer) {\r\n            this.dropContainer.removeItem(this);\r\n        }\r\n        const index = CdkDrag._dragInstances.indexOf(this);\r\n        if (index > -1) {\r\n            CdkDrag._dragInstances.splice(index, 1);\r\n        }\r\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._destroyed.next();\r\n            this._destroyed.complete();\r\n            this._dragRef.dispose();\r\n        });\r\n    }\r\n    /** Syncs the root element with the `DragRef`. */\r\n    _updateRootElement() {\r\n        const element = this.element.nativeElement;\r\n        const rootElement = this.rootElementSelector ?\r\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\r\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            assertElementNode(rootElement, 'cdkDrag');\r\n        }\r\n        this._dragRef.withRootElement(rootElement || element);\r\n    }\r\n    /** Gets the boundary element, based on the `boundaryElement` value. */\r\n    _getBoundaryElement() {\r\n        const boundary = this.boundaryElement;\r\n        if (!boundary) {\r\n            return null;\r\n        }\r\n        if (typeof boundary === 'string') {\r\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\r\n        }\r\n        const element = coerceElement(boundary);\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n            !element.contains(this.element.nativeElement)) {\r\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\r\n        }\r\n        return element;\r\n    }\r\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n    _syncInputs(ref) {\r\n        ref.beforeStarted.subscribe(() => {\r\n            if (!ref.isDragging()) {\r\n                const dir = this._dir;\r\n                const dragStartDelay = this.dragStartDelay;\r\n                const placeholder = this._placeholderTemplate ? {\r\n                    template: this._placeholderTemplate.templateRef,\r\n                    context: this._placeholderTemplate.data,\r\n                    viewContainer: this._viewContainerRef\r\n                } : null;\r\n                const preview = this._previewTemplate ? {\r\n                    template: this._previewTemplate.templateRef,\r\n                    context: this._previewTemplate.data,\r\n                    matchSize: this._previewTemplate.matchSize,\r\n                    viewContainer: this._viewContainerRef\r\n                } : null;\r\n                ref.disabled = this.disabled;\r\n                ref.lockAxis = this.lockAxis;\r\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\r\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\r\n                ref.constrainPosition = this.constrainPosition;\r\n                ref.previewClass = this.previewClass;\r\n                ref\r\n                    .withBoundaryElement(this._getBoundaryElement())\r\n                    .withPlaceholderTemplate(placeholder)\r\n                    .withPreviewTemplate(preview)\r\n                    .withPreviewContainer(this.previewContainer || 'global');\r\n                if (dir) {\r\n                    ref.withDirection(dir.value);\r\n                }\r\n            }\r\n        });\r\n        // This only needs to be resolved once.\r\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\r\n            var _a, _b;\r\n            // If we managed to resolve a parent through DI, use it.\r\n            if (this._parentDrag) {\r\n                ref.withParent(this._parentDrag._dragRef);\r\n                return;\r\n            }\r\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\r\n            // the item was projected into another item by something like `ngTemplateOutlet`.\r\n            let parent = this.element.nativeElement.parentElement;\r\n            while (parent) {\r\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\r\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\r\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\r\n                        return drag.element.nativeElement === parent;\r\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\r\n                    break;\r\n                }\r\n                parent = parent.parentElement;\r\n            }\r\n        });\r\n    }\r\n    /** Handles the events from the underlying `DragRef`. */\r\n    _handleEvents(ref) {\r\n        ref.started.subscribe(() => {\r\n            this.started.emit({ source: this });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.released.subscribe(() => {\r\n            this.released.emit({ source: this });\r\n        });\r\n        ref.ended.subscribe(event => {\r\n            this.ended.emit({\r\n                source: this,\r\n                distance: event.distance,\r\n                dropPoint: event.dropPoint\r\n            });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.entered.subscribe(event => {\r\n            this.entered.emit({\r\n                container: event.container.data,\r\n                item: this,\r\n                currentIndex: event.currentIndex\r\n            });\r\n        });\r\n        ref.exited.subscribe(event => {\r\n            this.exited.emit({\r\n                container: event.container.data,\r\n                item: this\r\n            });\r\n        });\r\n        ref.dropped.subscribe(event => {\r\n            this.dropped.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                previousContainer: event.previousContainer.data,\r\n                container: event.container.data,\r\n                isPointerOverContainer: event.isPointerOverContainer,\r\n                item: this,\r\n                distance: event.distance,\r\n                dropPoint: event.dropPoint\r\n            });\r\n        });\r\n    }\r\n    /** Assigns the default input values based on a provided config object. */\r\n    _assignDefaults(config) {\r\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\r\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n        this.dragStartDelay = dragStartDelay || 0;\r\n        if (lockAxis) {\r\n            this.lockAxis = lockAxis;\r\n        }\r\n        if (constrainPosition) {\r\n            this.constrainPosition = constrainPosition;\r\n        }\r\n        if (previewClass) {\r\n            this.previewClass = previewClass;\r\n        }\r\n        if (boundaryElement) {\r\n            this.boundaryElement = boundaryElement;\r\n        }\r\n        if (rootElementSelector) {\r\n            this.rootElementSelector = rootElementSelector;\r\n        }\r\n        if (previewContainer) {\r\n            this.previewContainer = previewContainer;\r\n        }\r\n    }\r\n    /** Sets up the listener that syncs the handles with the drag ref. */\r\n    _setupHandlesListener() {\r\n        // Listen for any newly-added handles.\r\n        this._handles.changes.pipe(startWith(this._handles), \r\n        // Sync the new handles with the DragRef.\r\n        tap((handles) => {\r\n            const childHandleElements = handles\r\n                .filter(handle => handle._parentDrag === this)\r\n                .map(handle => handle.element);\r\n            // Usually handles are only allowed to be a descendant of the drag element, but if\r\n            // the consumer defined a different drag root, we should allow the drag element\r\n            // itself to be a handle too.\r\n            if (this._selfHandle && this.rootElementSelector) {\r\n                childHandleElements.push(this.element);\r\n            }\r\n            this._dragRef.withHandles(childHandleElements);\r\n        }), \r\n        // Listen if the state of any of the handles changes.\r\n        switchMap((handles) => {\r\n            return merge(...handles.map(item => {\r\n                return item._stateChanges.pipe(startWith(item));\r\n            }));\r\n        }), takeUntil(this._destroyed)).subscribe(handleInstance => {\r\n            // Enabled/disable the handle that changed in the DragRef.\r\n            const dragRef = this._dragRef;\r\n            const handle = handleInstance.element.nativeElement;\r\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n        });\r\n    }\r\n}\r\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\r\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\r\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\r\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkDrag._dragInstances = [];\r\nCdkDrag.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: NgZone },\r\n    { type: ViewContainerRef },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: DragDrop },\r\n    { type: ChangeDetectorRef },\r\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\r\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\r\n];\r\nCdkDrag.propDecorators = {\r\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\r\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\r\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\r\n    data: [{ type: Input, args: ['cdkDragData',] }],\r\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\r\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\r\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\r\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\r\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\r\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\r\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\r\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\r\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\r\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\r\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\r\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\r\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\r\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\r\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\r\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[cdkDrag]',\r\n                exportAs: 'cdkDrag',\r\n                host: {\r\n                    'class': DRAG_HOST_CLASS,\r\n                    '[class.cdk-drag-disabled]': 'disabled',\r\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\r\n                },\r\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [CDK_DROP_LIST]\r\n            }, {\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_DRAG_CONFIG]\r\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Self\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_DRAG_HANDLE]\r\n            }] }, { type: CdkDrag, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_DRAG_PARENT]\r\n            }] }]; }, { started: [{\r\n            type: Output,\r\n            args: ['cdkDragStarted']\r\n        }], released: [{\r\n            type: Output,\r\n            args: ['cdkDragReleased']\r\n        }], ended: [{\r\n            type: Output,\r\n            args: ['cdkDragEnded']\r\n        }], entered: [{\r\n            type: Output,\r\n            args: ['cdkDragEntered']\r\n        }], exited: [{\r\n            type: Output,\r\n            args: ['cdkDragExited']\r\n        }], dropped: [{\r\n            type: Output,\r\n            args: ['cdkDragDropped']\r\n        }], moved: [{\r\n            type: Output,\r\n            args: ['cdkDragMoved']\r\n        }], disabled: [{\r\n            type: Input,\r\n            args: ['cdkDragDisabled']\r\n        }], dragStartDelay: [{\r\n            type: Input,\r\n            args: ['cdkDragStartDelay']\r\n        }], lockAxis: [{\r\n            type: Input,\r\n            args: ['cdkDragLockAxis']\r\n        }], constrainPosition: [{\r\n            type: Input,\r\n            args: ['cdkDragConstrainPosition']\r\n        }], previewClass: [{\r\n            type: Input,\r\n            args: ['cdkDragPreviewClass']\r\n        }], boundaryElement: [{\r\n            type: Input,\r\n            args: ['cdkDragBoundary']\r\n        }], rootElementSelector: [{\r\n            type: Input,\r\n            args: ['cdkDragRootElement']\r\n        }], previewContainer: [{\r\n            type: Input,\r\n            args: ['cdkDragPreviewContainer']\r\n        }], _handles: [{\r\n            type: ContentChildren,\r\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\r\n        }], _previewTemplate: [{\r\n            type: ContentChild,\r\n            args: [CDK_DRAG_PREVIEW]\r\n        }], _placeholderTemplate: [{\r\n            type: ContentChild,\r\n            args: [CDK_DRAG_PLACEHOLDER]\r\n        }], data: [{\r\n            type: Input,\r\n            args: ['cdkDragData']\r\n        }], freeDragPosition: [{\r\n            type: Input,\r\n            args: ['cdkDragFreeDragPosition']\r\n        }] }); })();\r\n/** Gets the closest ancestor of an element that matches a selector. */\r\nfunction getClosestMatchingAncestor(element, selector) {\r\n    let currentElement = element.parentElement;\r\n    while (currentElement) {\r\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\r\n        if (currentElement.matches ? currentElement.matches(selector) :\r\n            currentElement.msMatchesSelector(selector)) {\r\n            return currentElement;\r\n        }\r\n        currentElement = currentElement.parentElement;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass DragDropModule {\r\n}\r\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\r\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\r\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        DragDrop,\r\n    ], imports: [CdkScrollableModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [\r\n                    CdkDropList,\r\n                    CdkDropListGroup,\r\n                    CdkDrag,\r\n                    CdkDragHandle,\r\n                    CdkDragPreview,\r\n                    CdkDragPlaceholder,\r\n                ],\r\n                exports: [\r\n                    CdkScrollableModule,\r\n                    CdkDropList,\r\n                    CdkDropListGroup,\r\n                    CdkDrag,\r\n                    CdkDragHandle,\r\n                    CdkDragPreview,\r\n                    CdkDragPlaceholder,\r\n                ],\r\n                providers: [\r\n                    DragDrop,\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\r\n\r\n//# sourceMappingURL=drag-drop.js.map","import { asyncScheduler } from '../scheduler/async';\r\nimport { timer } from './timer';\r\nexport function interval(period, scheduler) {\r\n    if (period === void 0) { period = 0; }\r\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\r\n    if (period < 0) {\r\n        period = 0;\r\n    }\r\n    return timer(period, period, scheduler);\r\n}\r\n//# sourceMappingURL=interval.js.map","import { AfterViewInit, Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\r\nimport { ToasServiceService } from \"src/app/core/service/toast-service/toas-service.service\";\r\nimport { FormComponent } from \"./form/form.component\";\r\n\r\n@Component({\r\n  selector: \"app-appointments\",\r\n  templateUrl: \"./appointments.component.html\",\r\n  styleUrls: [\"./appointments.component.sass\"],\r\n})\r\nexport class AppointmentsComponent implements OnInit, AfterViewInit\r\n{\r\n  displayedColumns = [\r\n    \"nom\",\r\n    \"dateTime\",\r\n    \"telephone\",\r\n    \"email\",\r\n    \"genre\",\r\n    \"symptom\",\r\n    \"isValid\",\r\n    \"actions\"\r\n  ];\r\n\r\n  public currentUser: any;\r\n  public myAllRDV: any = new MatTableDataSource([]);\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(public dialog: MatDialog, private restApi: RestApiService, private toatr: ToasServiceService){}\r\n\r\n  ngOnInit(){\r\n    this.refreshList();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n      this.myAllRDV.paginator = this.paginator; //Add pagination\r\n      this.myAllRDV.sort = this.sort;\r\n  }\r\n\r\n  //Search filter table\r\n  applyFilter(filterValue: string)\r\n  {\r\n    filterValue = filterValue.trim();\r\n    filterValue = filterValue.toLowerCase();\r\n\r\n    this.myAllRDV.filter = filterValue;\r\n  }\r\n\r\n  refreshList()\r\n  {\r\n    this.restApi.getPersonByUsername(localStorage.getItem(\"username\"), localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result=>{\r\n          this.currentUser = result;\r\n          \r\n          let postBody = {\"idPerson\": this.currentUser.idPerson, \"person_type\": \"MEDECIN\"};\r\n          \r\n          //Get all RDV for the current medecin\r\n          this.restApi.getRDVByMedecin(postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result =>{\r\n                this.myAllRDV.data = result;\r\n              }\r\n            }\r\n          );         \r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  validRDV(row: any){\r\n    this.restApi.validRDV(row.idRDV, true, localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          if(result)\r\n          {\r\n            this.refreshList();\r\n          }\r\n          this.toatr.showSuccessMessage(\"Rendez-vous accepté !\")\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  cancel(row: any){\r\n    this.restApi.validRDV(row.idRDV, false, localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          if(!result)\r\n          {\r\n            this.refreshList();\r\n          }\r\n          this.toatr.showSuccessMessage(\"Rendez-vous annulé !\")\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  detailsCall(row) {\r\n    let tempDirection;\r\n    if (localStorage.getItem(\"isRtl\") === \"true\") {\r\n      tempDirection = \"rtl\";\r\n    } else {\r\n      tempDirection = \"ltr\";\r\n    }\r\n    this.dialog.open(FormComponent, {\r\n      data: {\r\n        rdv: row,\r\n        action: \"details\",\r\n      },\r\n      direction: tempDirection,\r\n      height: \"60%\",\r\n      width: \"50%\",\r\n    });\r\n  }  \r\n}","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Tous les rendez-vous</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/doctor/dashboard\">\r\n                <i class=\"fas fa-home\"></i>Accueil</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Rendez-vous</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"table-responsive\">\r\n                    <div class=\"materialTableHeader\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-8\">\r\n                          <ul class=\"header-buttons-left ms-0\">\r\n                            <li class=\"dropdown\">\r\n                              <h2>\r\n                                <strong>Rendez-vous</strong></h2>\r\n                            </li>\r\n                            <li class=\"dropdown m-l-20\">\r\n                              <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\r\n                              <input placeholder=\"Recherche\" (keyup)=\"applyFilter($event.target.value)\" type=\"text\" class=\"browser-default search-field\"\r\n                                aria-label=\"Search box\">\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <mat-table #table [dataSource]=\"myAllRDV\" matSort class=\"mat-cell\">\r\n                      <ng-container matColumnDef=\"nom\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Nom Patient</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.nom}} {{row.patient.prenom}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"dateTime\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Date et Heure\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">\r\n                          {{row.rdvDate | date: 'dd/MM/yyyy'}}, {{row.rdvHeure}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"telephone\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Téléphone\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.patient.telephone}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.patient.email}}</mat-cell>\r\n                      </ng-container>\r\n\r\n                      <ng-container matColumnDef=\"genre\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Genre\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.genre}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"symptom\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Symptôme</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.symptom}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"isValid\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Accepter</mat-header-cell>\r\n                        <ng-container *matCellDef=\"let row\">\r\n                          <mat-cell *ngIf=\"row.isValid===null\" class=\"col-red\">En attente</mat-cell>\r\n                          <mat-cell *ngIf=\"row.isValid===false\" class=\"col-red\">Non</mat-cell>\r\n                          <mat-cell *ngIf=\"row.isValid===true\" class=\"col-green\">Oui</mat-cell>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                      <!-- actions -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                        <mat-header-cell class=\"tbl-col-width-per-10\" *matHeaderCellDef>Actions</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row;\" class=\"tbl-col-width-per-10\">\r\n                          <button mat-icon-button (click)=\"detailsCall(row)\" style=\"color: #40ea48;\">\r\n                            <i class=\"material-icons\">visibility</i>\r\n                          </button>\r\n                          <button mat-icon-button style=\"color: #3F51B5;\" [matMenuTriggerFor]=\"menu\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                          </button>\r\n                          <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item style=\"color: #40ea48;\" (click)=\"validRDV(row)\">\r\n                              <i class=\"material-icons-two-tone align-middle msr-2\">done</i>\r\n                              <span>Valider</span>\r\n                            </button>\r\n                            <button mat-menu-item style=\"color: #ee2525;\" (click)=\"cancel(row)\">\r\n                              <i class=\"material-icons align-middle msr-2\">cancel</i>\r\n                              <span>Annuler</span>\r\n                            </button>\r\n                          </mat-menu>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-header-row *matHeaderRowDef=\"displayedColumns\">\r\n                      </mat-header-row>\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n                      </mat-row>\r\n                    </mat-table>\r\n                    <div *ngIf=\"myAllRDV.data.length === 0\" class=\"no-results text-center mt-3\">\r\n                      Vous n'avez pas encore de rendez-vous !\r\n                    </div>\r\n                    <mat-paginator #paginator [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Component, Inject } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-form\",\r\n  templateUrl: \"./form.component.html\",\r\n  styleUrls: [\"./form.component.sass\"],\r\n})\r\nexport class FormComponent {\r\n  action: string;\r\n  isDetails = false;\r\n  rdv: any;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    // Set the defaults\r\n    this.action = data.action;\r\n    if (this.action === \"details\") {\r\n      this.rdv = data.rdv;\r\n      this.isDetails = true;\r\n    } else {\r\n      this.isDetails = false;\r\n    }\r\n  }\r\n  \r\n  submit() {\r\n    // emppty stuff\r\n  }\r\n  \r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div class=\"addContainer\">\r\n  <div *ngIf=\"isDetails\" class=\"contact-details\">\r\n    <div class=\"modalHeader\">\r\n      <div class=\"editRowModal\">\r\n        <div class=\"modalHeader clearfix\">\r\n          <div class=\"modal-about contact-header\">\r\n            <div class=\"contact-details-heading\">\r\n              <div class=\"contact-details-name mb-2\">{{rdv.patient.prenom}} {{rdv.patient.nom}}</div>\r\n              <div class=\"badge col-green\">Patient</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div mat-dialog-content>\r\n      <mat-card-content>\r\n        <div class=\"contact-details-field\" matTooltip=\"Date et l'heure du rendez-vous\" [matTooltipPosition]=\"'above'\">\r\n          <i class=\"material-icons-two-tone color-icon\">event_note</i>\r\n          <div class=\"contact-detail-info\"> {{rdv.rdvDate | date: 'd MMMM, yyyy'}} à {{rdv.rdvHeure}}</div>\r\n        </div>\r\n        <div class=\"contact-details-field\" matTooltip=\"L'E-mail du patient\" [matTooltipPosition]=\"'above'\">\r\n          <i class=\"material-icons-two-tone color-icon\">email</i>\r\n          <div class=\"contact-detail-info\"> {{rdv.patient.email}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\" matTooltip=\"Numéro de téléphone du patient\" [matTooltipPosition]=\"'above'\">\r\n          <i class=\"material-icons-two-tone color-icon\">phonelink_ring</i>\r\n          <div class=\"contact-detail-info\"> {{rdv.patient.telephone}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\" matTooltip=\"Patient Address\" [matTooltipPosition]=\"'above'\">\r\n          <i class=\"material-icons-two-tone color-icon\">location_on</i>\r\n          <div class=\"contact-detail-info\"> {{rdv.patient.adresse}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\" matTooltip=\"Patient Disease\" [matTooltipPosition]=\"'above'\">\r\n          <i class=\"material-icons-two-tone color-icon\">healing</i>\r\n          <div class=\"contact-detail-info\"> {{rdv.symptom}}\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { DatePipe, formatDate } from \"@angular/common\";\r\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"./dashboard.component.html\",\r\n  styleUrls: [\"./dashboard.component.sass\"],\r\n  providers: [DatePipe]\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  displayedColumns: string[] = [\r\n    \"nom\",\r\n    \"email\",\r\n    \"genre\",\r\n    \"rdvDate\",\r\n    \"rdvHeure\",\r\n    \"telephone\",\r\n    \"symptom\",\r\n    \"isValid\"\r\n  ];\r\n\r\n  public myAllPatient: any;\r\n  public myTodayPatient: any;\r\n  public myAllRDV: any;\r\n  public myTodayRDV: any = new MatTableDataSource([]);\r\n  public currentDate = formatDate(new Date(), 'yyyy-MM-dd', 'en');\r\n  public currentUser: any;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  ngAfterViewInit() {\r\n    this.myTodayRDV.paginator = this.paginator;\r\n    this.myTodayRDV.sort = this.sort;\r\n  }\r\n\r\n  constructor(private restApi: RestApiService){}\r\n\r\n  ngOnInit() {\r\n    this.restApi.getPersonByUsername(localStorage.getItem(\"username\"), localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result=>{\r\n          this.currentUser = result;\r\n          \r\n          let postBody = {\"idPerson\": this.currentUser.idPerson, \"person_type\": \"MEDECIN\"};          \r\n          \r\n          //Get all today's distinct patient for the current medecin\r\n          this.restApi.getDistinctPatientByMedecinAndDate(this.currentDate, postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result=>{\r\n                this.myTodayPatient = result;\r\n              }\r\n            }\r\n          );\r\n\r\n          //Get all distinct patient for the current medecin\r\n          this.restApi.getDistinctPatientByMedecin(postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result=>{\r\n                this.myAllPatient = result;\r\n              }\r\n            }\r\n          );\r\n\r\n          //Get all RDV for the current medecin\r\n          this.restApi.getRDVByMedecin(postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result =>{\r\n                this.myAllRDV = result;\r\n              }\r\n            }\r\n          );\r\n          \r\n          //Get today'RDV\r\n          this.restApi.getRDVByMedecinAndDate(this.currentDate, postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result=>{\r\n                this.myTodayRDV.data = result;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n\r\n\r\n  }\r\n\r\n}\r\n","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Dashboard</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/doctor/dashboard\">\r\n                <i class=\"fas fa-home\"></i>Accueil</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Médecin Dashboard</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Widgets -->\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-3 col-sm-6\">\r\n        <div class=\"info-box7 l-bg-card1 order-info-box7\">\r\n          <div class=\"info-box7-block\">\r\n            <h5 class=\"m-b-15\">Patients du jour</h5>\r\n            <h2 class=\"text-end\"><i class=\"fas fa-user-injured float-start\"></i><span>{{myTodayPatient?.length}}</span></h2>\r\n            <p class=\"m-b-0\">Mes patients d'aujourd'hui</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-lg-3 col-sm-6\">\r\n        <div class=\"info-box7 l-bg-card2 order-info-box7\">\r\n          <div class=\"info-box7-block\">\r\n            <h5 class=\"m-b-15\">Rendez-vous du jour</h5>\r\n            <h2 class=\"text-end\"><i class=\"far fa-calendar-check float-start\"></i><span>{{myTodayRDV.data.length}}</span></h2>\r\n            <p class=\"m-b-0\">Mes rendez-vous d'aujourd'hui</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-lg-3 col-sm-6\">\r\n        <div class=\"info-box7 l-bg-card3 order-info-box7\">\r\n          <div class=\"info-box7-block\">\r\n            <h5 class=\"m-b-15\">Tous mes patients</h5>\r\n            <h2 class=\"text-end\"><i class=\"fa fa-users float-start\" aria-hidden=\"true\"></i><span>{{myAllPatient?.length}}</span></h2>\r\n            <p class=\"m-b-0\">Le total de mes patients</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-lg-3 col-sm-6\">\r\n        <div class=\"info-box7 l-bg-card4 order-info-box7\">\r\n          <div class=\"info-box7-block\">\r\n            <h5 class=\"m-b-15\">Tous mes rendez-vous</h5>\r\n            <h2 class=\"text-end\"><i class=\"far fa-calendar-check float-start\"></i><span>{{myAllRDV?.length}}</span></h2>\r\n            <p class=\"m-b-0\">Le total de mes rendez-vous</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- #END# Widgets -->\r\n    <h5>La liste des rendez-vous d'aujourd'hui</h5>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"table-responsive mat-elevation-z8\">\r\n                    <mat-table [dataSource]=\"myTodayRDV\" matSort class=\"mat-cell\">\r\n                      <ng-container matColumnDef=\"nom\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Nom patient</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.nom}} {{row.patient.prenom}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email patient</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.email}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"genre\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Genre</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.genre}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"rdvDate\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Date</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.rdvDate | date: 'dd/MM/yyyy' }}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"rdvHeure\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Heure</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.rdvHeure}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"telephone\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Tél Patient</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.patient.telephone}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"symptom\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Symptôme</mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.symptom}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"isValid\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Accepter</mat-header-cell>\r\n                        <ng-container *matCellDef=\"let row\">\r\n                          <mat-cell *ngIf=\"row.isValid===null\" class=\"col-red\">En attente</mat-cell>\r\n                          <mat-cell *ngIf=\"row.isValid===false\" class=\"col-red\">Non</mat-cell>\r\n                          <mat-cell *ngIf=\"row.isValid===true\" class=\"col-green\">Oui</mat-cell>\r\n                        </ng-container>\r\n                      </ng-container>\r\n                      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\">\r\n                      </mat-row>\r\n                    </mat-table>\r\n                    <div *ngIf=\"myTodayRDV.data.length === 0\" class=\"no-results text-center mb-3 mt-3\">\r\n                      Vous n'avez pas encore de rendez-vous !\r\n                    </div>\r\n                    <mat-paginator #paginator [pageIndex]=\"0\" [pageSize]=\"10\"\r\n                      [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n                    </mat-paginator>              \r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\r\nimport { AppointmentsComponent } from \"./appointments/appointments.component\";\r\nimport { DoctorsComponent } from \"./doctors/doctors.component\";\r\nimport { PatientsComponent } from \"./patients/patients.component\";\r\nimport { SettingsComponent } from \"./settings/settings.component\";\r\nconst routes: Routes = [\r\n  {\r\n    path: \"dashboard\",\r\n    component: DashboardComponent,\r\n  },\r\n  {\r\n    path: \"appointments\",\r\n    component: AppointmentsComponent,\r\n  },\r\n  {\r\n    path: \"doctors\",\r\n    component: DoctorsComponent,\r\n  },\r\n  {\r\n    path: \"patients\",\r\n    component: PatientsComponent,\r\n  },\r\n  {\r\n    path: \"settings\",\r\n    component: SettingsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DoctorRoutingModule {}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { PerfectScrollbarModule } from \"ngx-perfect-scrollbar\";\r\nimport { ChartsModule as chartjsModule } from \"ng2-charts\";\r\nimport { NgxEchartsModule } from \"ngx-echarts\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { NgApexchartsModule } from \"ng-apexcharts\";\r\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\r\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatSortModule } from \"@angular/material/sort\";\r\nimport { MatTabsModule } from \"@angular/material/tabs\";\r\nimport { MatMenuModule } from \"@angular/material/menu\";\r\nimport { MatDatepickerModule } from \"@angular/material/datepicker\";\r\nimport { MatTableModule } from \"@angular/material/table\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { MatCheckboxModule } from \"@angular/material/checkbox\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\r\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\r\n\r\nimport { DoctorRoutingModule } from \"./doctor-routing.module\";\r\nimport { DashboardComponent } from \"./dashboard/dashboard.component\";\r\nimport { AppointmentsComponent } from \"./appointments/appointments.component\";\r\nimport { FormComponent } from \"./appointments/form/form.component\";\r\nimport { DoctorsComponent } from \"./doctors/doctors.component\";\r\nimport { PatientsComponent } from \"./patients/patients.component\";\r\nimport { SettingsComponent } from \"./settings/settings.component\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent,\r\n    AppointmentsComponent,\r\n    FormComponent,\r\n    DoctorsComponent,\r\n    PatientsComponent,\r\n    SettingsComponent,\r\n  ],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    DoctorRoutingModule,\r\n    chartjsModule,\r\n    NgxEchartsModule.forRoot({\r\n      echarts: () => import(\"echarts\"),\r\n    }),\r\n    PerfectScrollbarModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    NgApexchartsModule,\r\n    MatPaginatorModule,\r\n    MatSnackBarModule,\r\n    MatFormFieldModule,\r\n    MatSortModule,\r\n    MatTabsModule,\r\n    MatMenuModule,\r\n    MatDatepickerModule,\r\n    MatTableModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatRadioModule,\r\n    DragDropModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class DoctorModule {}\r\n","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Médecins</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/doctor/dashboard\">\r\n                <i class=\"fas fa-home\"></i>Accueil</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Médecins</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row clearfix\">\r\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n        <div class=\"card\">\r\n          <div class=\"body\" *ngFor=\"let item of allMedecins\">\r\n            <div class=\"row\">\r\n              <div class=\"col-12\">\r\n                <div class=\"card p-3\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-12 col-md-2 mb-0\">\r\n                      <img class=\"img-circle doc-card-image\" style=\"width: 150px;\" src=\"{{userProfileImg}}{{item.username}}\">\r\n                    </div>\r\n                    <div class=\"col-md-6 border-right mb-0\">\r\n                      <div class=\"doc-card-title\">\r\n                        <h4>{{item.nom}} {{item.prenom}}</h4>\r\n                      </div>\r\n                      <p>\r\n                        <strong>{{item.specialite.nom}}</strong><br>\r\n                        <i>{{item.cabinetMedicale.nom}}</i><br>\r\n                        <i>{{item.cabinetMedicale.rive.nomRive}}, {{item.cabinetMedicale.adresse}}</i>\r\n                      </p>\r\n                      <div class=\"description\">\r\n                        <p>{{item.nom}} {{item.prenom}} est l'un de nos médecins qui ont beaucoup d'expériences avec comme spécialité {{item.specialite.nom}} !<br></p>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"d-flex col-md-4 mb-0\">\r\n                      <div class=\"d-flex flex-column justify-content-start user-profile w-100\">\r\n                        <div><i class=\"fas fa-map-marker-alt pt-3 psr-3\"></i>{{item.adresse}}</div>\r\n                        <div><i class=\"fas fa-envelope pt-3 psr-3\"></i>{{item.email}}</div>\r\n                        <div><i class=\"fas fa-phone pt-3 psr-3\"></i>{{item.telephone}}</div>\r\n                        <div><i class=\"fas fa-briefcase pt-3 psr-3\"></i>{{item.etat}}</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\r\n\r\n@Component({\r\n  selector: \"app-doctors\",\r\n  templateUrl: \"./doctors.component.html\",\r\n  styleUrls: [\"./doctors.component.sass\"],\r\n})\r\nexport class DoctorsComponent implements OnInit {\r\n  public allMedecins: any;\r\n  public userProfileImg: any = this.restApi.userLink+'/getProfileImg/';\r\n\r\n  constructor(private restApi: RestApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.restApi.getUserByProfile('MEDECIN', localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          this.allMedecins = result;\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Patients</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/doctor/dashboard\">\r\n                <i class=\"fas fa-home\"></i>Accueil</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Patients</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div *ngIf=\"myAllPatient?.length === 0\" class=\"text-center\"><h6>Vous n'avez pas encore de patients !</h6></div>\r\n      <div class=\"col-xs-12 col-sm-12 col-md-4 col-lg-4\" *ngFor=\"let item of myAllPatient\">\r\n        <div class=\"card py-3 py-md-3\">\r\n          <div class=\" d-flex justify-content-between px-3 px-md-4\">\r\n            <img src=\"{{userProfileImg}}{{item.username}}\" height=\"55px\" width=\"55px\" alt=\"\" class=\"rounded-circle\">\r\n            <div class=\"\">\r\n              <h6 class=\"col-green\">{{item.nom}} {{item.prenom}}</h6>\r\n              <p>Profession : {{item.profession}}</p>\r\n            </div>\r\n          </div>\r\n          <hr class=\"light-hr\">\r\n          <div class=\"d-flex flex-column justify-content-start w-100 px-3 px-md-4\">\r\n            <div><i class=\"fas fa-map-marker-alt pt-3 psr-3\"></i>{{item.adresse}}</div>\r\n            <div><i class=\"fas fa-phone pt-3 psr-3\"></i>{{item.telephone}}</div>\r\n            <div><i class=\"fas fa-envelope pt-3 psr-3\"></i>{{item.email}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\r\n\r\n@Component({\r\n  selector: \"app-patients\",\r\n  templateUrl: \"./patients.component.html\",\r\n  styleUrls: [\"./patients.component.sass\"],\r\n})\r\nexport class PatientsComponent implements OnInit {\r\n  public currentUser: any;\r\n  public myAllPatient: any;\r\n  public userProfileImg: any = this.restApi.userLink+'/getProfileImg/';\r\n\r\n  constructor(private restApi: RestApiService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.restApi.getPersonByUsername(localStorage.getItem(\"username\"), localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          this.currentUser = result;\r\n          let postBody = {\"idPerson\": this.currentUser.idPerson, \"person_type\": \"MEDECIN\"};\r\n          //Get all distinct patient for the current medecin\r\n          this.restApi.getDistinctPatientByMedecin(postBody, localStorage.getItem(\"token\")).subscribe(\r\n            {\r\n              next: result=>{\r\n                this.myAllPatient = result;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","<style>\r\n  .card1{\r\n    height: 35vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  #img{\r\n    height: 200px;\r\n    width: 1000px;\r\n    border-radius: 26px;\r\n  }\r\n  .profile>img{\r\n    height: 55px;\r\n    width: auto;\r\n    border-radius: 50%;\r\n  }\r\n  .profile{\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    font-size: 8px;\r\n    width: 300px;\r\n    height: 70px;\r\n    border-radius: 50px;\r\n    box-shadow: 5px 6px 8px 0px #00000065;\r\n    margin-top: -72px;\r\n    margin-left: 12em;\r\n    position: absolute;\r\n    z-index: 99;\r\n    background-color: rgb(255, 255, 255);\r\n  }\r\n</style>\r\n<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Profile</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a routerLink=\"/doctor/dashboard\">\r\n                <i class=\"fas fa-home\"></i>Accueil</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Profile</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card\">\r\n      <div class=\"m-b-20\">\r\n        <div class=\"contact-grid\">\r\n          <div class=\"profile-header\" style=\"background-color: #99B9EC;\">\r\n            <div class=\"user-name\">{{myProfile?.nom}} {{myProfile?.prenom}}</div>\r\n            <div class=\"name-center\">{{myProfile?.specialite.nom}}</div>\r\n          </div>\r\n          <img src=\"{{userProfileImg}}\" class=\"user-img\" alt=\"User profile\">\r\n          <label for=\"imgProfile\" style=\"margin-left: -18px;\"><i class=\"fas fa-edit\" style=\"font-size: 20px;\"></i></label>\r\n          <input type=\"file\" (change)=\"getPhoto($event)\" id=\"imgProfile\" style=\"display: none; visibility: none;\">\r\n          <p>Adresse : {{myProfile?.adresse}}</p>\r\n          <p>Cabinet Médicale : {{myProfile?.cabinetMedicale.nom}}</p>\r\n          <div>\r\n            <span class=\"phone\">\r\n              <i class=\"material-icons\">phone</i>{{myProfile?.telephone}}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card\">\r\n      <div class=\"header\">\r\n        <h2>\r\n          <strong>Modifier votre mot de passe</strong></h2>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"example-container\">\r\n          <form #changePassword=\"ngForm\" (ngSubmit)=\"updatePassword(changePassword)\">\r\n            <div *ngIf=\"errorMsg1\" class=\"mb-2 col-red\">{{errorMsg1}}</div>\r\n            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n              <mat-label>Nom d'utilisateur</mat-label>\r\n              <input matInput name=\"username\" ngModel required>\r\n              <mat-error *ngIf=\"!changePassword.valid\">Veuilez remplir ce champ !</mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n              <mat-label>Nouveau Password</mat-label>\r\n              <input matInput type=\"password\" name=\"newPassword\" ngModel required>\r\n              <mat-error *ngIf=\"!changePassword.valid\">Veuilez remplir ce champ !</mat-error>\r\n            </mat-form-field>\r\n            <button mat-raised-button color=\"primary\" [class.auth-spinner]=\"passwordloading\" [disabled]=\"!changePassword.valid\">Envoyer</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"card\">\r\n      <div class=\"header\">\r\n        <h2>\r\n          <strong>Account</strong> Settings</h2>\r\n      </div>\r\n      <div class=\"body\">\r\n        <form #changeUSer=\"ngForm\" (ngSubmit)=\"userUpdate(changeUSer)\">\r\n          <div class=\"row clearfix\">\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Nom d'utilisateur</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.username\" name=\"username\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Prénom</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.prenom\" name=\"prenom\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Nom</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.nom\" name=\"nom\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Adress</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.adresse\" name=\"adresse\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Email</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.email\" name=\"email\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-4 col-md-12\">\r\n              <div class=\"form-group\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"fill\">\r\n                  <mat-label>Téléphone</mat-label>\r\n                  <input matInput [ngModel]=\"myProfile?.telephone\" name=\"telephone\" ngModel required>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button [class.auth-spinner]=\"loading\" color=\"primary\" [disabled]=\"!changeUSer.valid\">Enregistrer </button>\r\n            </div>\r\n          </div>\r\n      </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { RestApiService } from \"src/app/core/service/api-services/rest-api.service\";\r\nimport { ToasServiceService } from \"src/app/core/service/toast-service/toas-service.service\";\r\n\r\n@Component({\r\n  selector: \"app-settings\",\r\n  templateUrl: \"./settings.component.html\",\r\n  styleUrls: [\"./settings.component.sass\"],\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n  public passwordloading = false;\r\n  public loading = false;\r\n  public errorMsg1: any;\r\n  public myProfile: any;\r\n  public updateBody: any;\r\n  public uploadImg: any;\r\n  public userProfileImg: any = this.restApi.userLink+'/getProfileImg/'+localStorage.getItem(\"username\");\r\n\r\n  constructor(private restApi: RestApiService, private toastr: ToasServiceService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.restApi.getPersonByUsername(localStorage.getItem(\"username\"), localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          this.myProfile = result;\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  refreshPage() {\r\n    window.location.reload();\r\n   }\r\n\r\n  getPhoto(event)\r\n  {\r\n    this.uploadImg = event.target.files[0];\r\n    this.restApi.updateUserProfile(this.myProfile.username, this.uploadImg, localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          if(!result)\r\n          {\r\n            this.toastr.showWarningMessage(\"Veuillez changer le nom de votre image !\");\r\n            return;\r\n          }\r\n          \r\n          this.toastr.showSuccessMessage(\"Profile image modifié avec succès !\");\r\n          this.refreshPage();\r\n        },\r\n        error: error =>{\r\n          this.toastr.showWarningMessage(\"Veuillez choisir une autre photo !\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  updatePassword(changePassword: NgForm)\r\n  {\r\n    this.passwordloading = true;\r\n    this.restApi.changeUserPassword(changePassword.value.username, localStorage.getItem(\"token\")).subscribe(\r\n     {\r\n      next: result =>{\r\n        this.passwordloading = false;\r\n        this.toastr.showSuccessMessage(\"Mot de passe modifié avec succès !\");\r\n        changePassword.resetForm();\r\n      },\r\n      error: error =>{\r\n        this.passwordloading = false;\r\n        this.errorMsg1 = \"Nom d'utilisateur non trouvé !\";\r\n      }\r\n     }\r\n   );\r\n  }\r\n\r\n  userUpdate(changeUSer)\r\n  {\r\n    this.loading = true;\r\n    this.updateBody = {\r\n      \"person_type\": \"MEDECIN\",\r\n      \"profile\": \"MEDECIN\",\r\n      \"nom\": changeUSer.value.nom,\r\n      \"prenom\": changeUSer.value.prenom,\r\n      \"adresse\": changeUSer.value.adresse,\r\n      \"telephone\": changeUSer.value.telephone,\r\n      \"email\": changeUSer.value.email,\r\n      \"genre\": this.myProfile.genre,\r\n      \"username\": changeUSer.value.username,\r\n      \"password\": null,\r\n      \"imageProfile\": \"imageLinnnkkk\",\r\n      \"roles\": [\r\n        {\"idRole\": 3}\r\n      ]\r\n    };\r\n\r\n    this.restApi.updateUser(this.myProfile.idPerson, this.updateBody, localStorage.getItem(\"token\")).subscribe(\r\n      {\r\n        next: result =>{\r\n          this.loading = false;\r\n          localStorage.setItem(\"username\", changeUSer.value.username);\r\n          this.toastr.showSuccessMessage(\"Votre profile a été modifié avec succès !\");\r\n          this.router.navigate(['/doctor/dashboard']);\r\n        },\r\n        error: error =>{\r\n          this.loading = false;\r\n          this.toastr.showErrorMessage(\"Modification non éffectuée !\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}