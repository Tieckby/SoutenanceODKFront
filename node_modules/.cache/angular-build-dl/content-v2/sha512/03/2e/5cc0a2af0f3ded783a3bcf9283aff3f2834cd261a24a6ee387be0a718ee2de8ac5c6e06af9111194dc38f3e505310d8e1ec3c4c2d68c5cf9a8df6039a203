{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatSelectChange","source","value","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","type","selectors","features","useExisting","ngDevMode","Directive","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","Subject","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","_placeholder","stateChanges","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","coerceNumberProperty","_id","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","isOpen","ids","_ariaDescribedby","_MatSelectBase_Factory","MAT_FORM_FIELD","viewQuery","_MatSelectBase_Query","CdkConnectedOverlay","_t","first","inputs","required","compareWith","errorStateMatcher","outputs","ctorParameters","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","MatFormField","Inject","NgControl","Self","String","Attribute","LiveAnnouncer","propDecorators","ViewChild","Input","Output","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","scrollTop","_getOptionScrollPosition","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵcmp","contentQueries","MatSelect_ContentQueries","dirIndex","MatOption","MAT_OPTGROUP","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","toString","errorState","_getAriaActiveDescendant","disableRipple","exportAs","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","MatSelect_Template_div_click_0_listener","toggle","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","directives","styles","encapsulation","data","animation","changeDetection","ContentChildren","descendants","ContentChild","Component","ViewEncapsulation","ChangeDetectionStrategy","host","animations","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","NgModule","exports","declarations","ngJitMode"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_select_js-es5.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\r\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\r\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\r\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\r\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\r\nimport { Subject, defer, merge } from 'rxjs';\r\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\r\nimport * as ɵngcc2 from '@angular/material/core';\r\nimport * as ɵngcc3 from '@angular/cdk/bidi';\r\nimport * as ɵngcc4 from '@angular/forms';\r\nimport * as ɵngcc5 from '@angular/cdk/a11y';\r\nimport * as ɵngcc6 from '@angular/material/form-field';\r\nimport * as ɵngcc7 from '@angular/cdk/overlay';\r\nimport * as ɵngcc8 from '@angular/common';\r\n\r\nconst _c0 = [\"trigger\"];\r\nconst _c1 = [\"panel\"];\r\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\r\n} }\r\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\r\n} }\r\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\r\n} }\r\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\r\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\r\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n} }\r\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\r\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\r\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\r\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\r\n    ɵngcc0.ɵɵprojection(3, 1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\r\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\r\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\r\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\r\n} }\r\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\r\nconst _c3 = [\"mat-select-trigger\", \"*\"];\r\nconst matSelectAnimations = {\r\n    /**\r\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n     * closing the select.\r\n     * This is needed due to https://github.com/angular/angular/issues/23302\r\n     */\r\n    transformPanelWrap: trigger('transformPanelWrap', [\r\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\r\n    ]),\r\n    /**\r\n     * This animation transforms the select's overlay panel on and off the page.\r\n     *\r\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n     * side to ensure the option text correctly overlaps the trigger text.\r\n     *\r\n     * When the panel is removed from the DOM, it simply fades out linearly.\r\n     */\r\n    transformPanel: trigger('transformPanel', [\r\n        state('void', style({\r\n            transform: 'scaleY(0.8)',\r\n            minWidth: '100%',\r\n            opacity: 0\r\n        })),\r\n        state('showing', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 32px)',\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        state('showing-multiple', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 64px)',\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\r\n    ])\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nfunction getMatSelectDynamicMultipleError() {\r\n    return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nfunction getMatSelectNonArrayValueError() {\r\n    return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nfunction getMatSelectNonFunctionValueError() {\r\n    return Error('`compareWith` must be a function.');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet nextUniqueId = 0;\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n/** The max height of the select's overlay panel. */\r\nconst SELECT_PANEL_MAX_HEIGHT = 256;\r\n/** The panel's padding on the x-axis. */\r\nconst SELECT_PANEL_PADDING_X = 16;\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n/** The height of the select items in `em` units. */\r\nconst SELECT_ITEM_HEIGHT_EM = 3;\r\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n */\r\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.reposition();\r\n}\r\n/** Injection token that can be used to provide the default options the select module. */\r\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\r\n/** @docs-private */\r\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_SELECT_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/** Change event object that is emitted when the select value has changed. */\r\nclass MatSelectChange {\r\n    constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    source, \r\n    /** Current value of the select that emitted the event. */\r\n    value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\r\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\r\n        this._elementRef = _elementRef;\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n}))));\r\n/**\r\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\r\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\nclass MatSelectTrigger {\r\n}\r\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\r\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-select-trigger',\r\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\r\n            }]\r\n    }], null, null); })();\r\n/** Base class with all of the `MatSelect` functionality. */\r\nclass _MatSelectBase extends _MatSelectMixinBase {\r\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\r\n        var _a, _b, _c;\r\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._viewportRuler = _viewportRuler;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._ngZone = _ngZone;\r\n        this._dir = _dir;\r\n        this._parentFormField = _parentFormField;\r\n        this._liveAnnouncer = _liveAnnouncer;\r\n        this._defaultOptions = _defaultOptions;\r\n        /** Whether or not the overlay panel is open. */\r\n        this._panelOpen = false;\r\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n        this._compareWith = (o1, o2) => o1 === o2;\r\n        /** Unique id for this input. */\r\n        this._uid = `mat-select-${nextUniqueId++}`;\r\n        /** Current `ariar-labelledby` value for the select trigger. */\r\n        this._triggerAriaLabelledBy = null;\r\n        /** Emits whenever the component is destroyed. */\r\n        this._destroy = new Subject();\r\n        /** `View -> model callback called when value changes` */\r\n        this._onChange = () => { };\r\n        /** `View -> model callback called when select has been touched` */\r\n        this._onTouched = () => { };\r\n        /** ID for the DOM node containing the select's value. */\r\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\r\n        /** Emits when the panel element is finished transforming in. */\r\n        this._panelDoneAnimatingStream = new Subject();\r\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\r\n        this._focused = false;\r\n        /** A name for this control that can be used by `mat-form-field`. */\r\n        this.controlType = 'mat-select';\r\n        this._required = false;\r\n        this._multiple = false;\r\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\r\n        /** Aria label of the select. */\r\n        this.ariaLabel = '';\r\n        /** Combined stream of all of the child options' change events. */\r\n        this.optionSelectionChanges = defer(() => {\r\n            const options = this.options;\r\n            if (options) {\r\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\r\n            }\r\n            return this._ngZone.onStable\r\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n        });\r\n        /** Event emitted when the select panel has been toggled. */\r\n        this.openedChange = new EventEmitter();\r\n        /** Event emitted when the select has been opened. */\r\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\r\n        /** Event emitted when the select has been closed. */\r\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\r\n        /** Event emitted when the selected value has been changed by the user. */\r\n        this.selectionChange = new EventEmitter();\r\n        /**\r\n         * Event that emits whenever the raw value of the select changes. This is here primarily\r\n         * to facilitate the two-way binding for the `value` input.\r\n         * @docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        if (this.ngControl) {\r\n            // Note: we provide the value accessor through here, instead of\r\n            // the `providers` to avoid running into a circular import.\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\r\n        // stay as `undefined` so that it falls back to the default in the key manager.\r\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\r\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\r\n        }\r\n        this._scrollStrategyFactory = scrollStrategyFactory;\r\n        this._scrollStrategy = this._scrollStrategyFactory();\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n        // Force setter to be called in case id was not specified.\r\n        this.id = this.id;\r\n    }\r\n    /** Whether the select is focused. */\r\n    get focused() {\r\n        return this._focused || this._panelOpen;\r\n    }\r\n    /** Placeholder to be shown if no value has been selected. */\r\n    get placeholder() { return this._placeholder; }\r\n    set placeholder(value) {\r\n        this._placeholder = value;\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether the component is required. */\r\n    get required() { return this._required; }\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether the user should be allowed to select multiple options. */\r\n    get multiple() { return this._multiple; }\r\n    set multiple(value) {\r\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatSelectDynamicMultipleError();\r\n        }\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    /** Whether to center the active option over the trigger. */\r\n    get disableOptionCentering() { return this._disableOptionCentering; }\r\n    set disableOptionCentering(value) {\r\n        this._disableOptionCentering = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Function to compare the option values with the selected values. The first argument\r\n     * is a value from an option. The second is a value from the selection. A boolean\r\n     * should be returned.\r\n     */\r\n    get compareWith() { return this._compareWith; }\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatSelectNonFunctionValueError();\r\n        }\r\n        this._compareWith = fn;\r\n        if (this._selectionModel) {\r\n            // A different comparator means the selection could change.\r\n            this._initializeSelection();\r\n        }\r\n    }\r\n    /** Value of the select control. */\r\n    get value() { return this._value; }\r\n    set value(newValue) {\r\n        // Always re-assign an array, because it might have been mutated.\r\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\r\n            if (this.options) {\r\n                this._setSelectionByValue(newValue);\r\n            }\r\n            this._value = newValue;\r\n        }\r\n    }\r\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\r\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\r\n    set typeaheadDebounceInterval(value) {\r\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\r\n    }\r\n    /** Unique id of the element. */\r\n    get id() { return this._id; }\r\n    set id(value) {\r\n        this._id = value || this._uid;\r\n        this.stateChanges.next();\r\n    }\r\n    ngOnInit() {\r\n        this._selectionModel = new SelectionModel(this.multiple);\r\n        this.stateChanges.next();\r\n        // We need `distinctUntilChanged` here, because some browsers will\r\n        // fire the animation end event twice for the same animation. See:\r\n        // https://github.com/angular/angular/issues/24084\r\n        this._panelDoneAnimatingStream\r\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\r\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\r\n    }\r\n    ngAfterContentInit() {\r\n        this._initKeyManager();\r\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\r\n            event.added.forEach(option => option.select());\r\n            event.removed.forEach(option => option.deselect());\r\n        });\r\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n            this._resetOptions();\r\n            this._initializeSelection();\r\n        });\r\n    }\r\n    ngDoCheck() {\r\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\r\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\r\n        // is computed as a result of a content query which can cause this binding to trigger a\r\n        // \"changed after checked\" error.\r\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\r\n            const element = this._elementRef.nativeElement;\r\n            this._triggerAriaLabelledBy = newAriaLabelledby;\r\n            if (newAriaLabelledby) {\r\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\r\n            }\r\n            else {\r\n                element.removeAttribute('aria-labelledby');\r\n            }\r\n        }\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n        // the parent form field know to run change detection when the disabled state changes.\r\n        if (changes['disabled']) {\r\n            this.stateChanges.next();\r\n        }\r\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\r\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroy.next();\r\n        this._destroy.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n    /** Toggles the overlay panel open or closed. */\r\n    toggle() {\r\n        this.panelOpen ? this.close() : this.open();\r\n    }\r\n    /** Opens the overlay panel. */\r\n    open() {\r\n        if (this._canOpen()) {\r\n            this._panelOpen = true;\r\n            this._keyManager.withHorizontalOrientation(null);\r\n            this._highlightCorrectOption();\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /** Closes the overlay panel and focuses the host element. */\r\n    close() {\r\n        if (this._panelOpen) {\r\n            this._panelOpen = false;\r\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n            this._changeDetectorRef.markForCheck();\r\n            this._onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the select's value. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param value New value to be written to the model.\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select's value\r\n     * changes from user input. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the value changes.\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select is blurred\r\n     * by the user. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the component has been touched.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Disables the select. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param isDisabled Sets whether the component is disabled.\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether or not the overlay panel is open. */\r\n    get panelOpen() {\r\n        return this._panelOpen;\r\n    }\r\n    /** The currently selected option. */\r\n    get selected() {\r\n        var _a, _b;\r\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\r\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\r\n    }\r\n    /** The value displayed in the trigger. */\r\n    get triggerValue() {\r\n        if (this.empty) {\r\n            return '';\r\n        }\r\n        if (this._multiple) {\r\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n            if (this._isRtl()) {\r\n                selectedOptions.reverse();\r\n            }\r\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n            return selectedOptions.join(', ');\r\n        }\r\n        return this._selectionModel.selected[0].viewValue;\r\n    }\r\n    /** Whether the element is in RTL mode. */\r\n    _isRtl() {\r\n        return this._dir ? this._dir.value === 'rtl' : false;\r\n    }\r\n    /** Handles all keydown events on the select. */\r\n    _handleKeydown(event) {\r\n        if (!this.disabled) {\r\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n        }\r\n    }\r\n    /** Handles keyboard events while the select is closed. */\r\n    _handleClosedKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n        const manager = this._keyManager;\r\n        // Open the select on ALT + arrow key to match the native <select>\r\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\r\n            ((this.multiple || event.altKey) && isArrowKey)) {\r\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n            this.open();\r\n        }\r\n        else if (!this.multiple) {\r\n            const previouslySelectedOption = this.selected;\r\n            manager.onKeydown(event);\r\n            const selectedOption = this.selected;\r\n            // Since the value has changed, we need to announce it ourselves.\r\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\r\n                // We set a duration on the live announcement, because we want the live element to be\r\n                // cleared after a while so that users can't navigate to it using the arrow keys.\r\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\r\n            }\r\n        }\r\n    }\r\n    /** Handles keyboard events when the selected is open. */\r\n    _handleOpenKeydown(event) {\r\n        const manager = this._keyManager;\r\n        const keyCode = event.keyCode;\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n        const isTyping = manager.isTyping();\r\n        if (isArrowKey && event.altKey) {\r\n            // Close the select on ALT + arrow key to match the native <select>\r\n            event.preventDefault();\r\n            this.close();\r\n            // Don't do anything in this case if the user is typing,\r\n            // because the typing sequence can include the space key.\r\n        }\r\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\r\n            !hasModifierKey(event)) {\r\n            event.preventDefault();\r\n            manager.activeItem._selectViaInteraction();\r\n        }\r\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\r\n            event.preventDefault();\r\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\r\n            this.options.forEach(option => {\r\n                if (!option.disabled) {\r\n                    hasDeselectedOptions ? option.select() : option.deselect();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            const previouslyFocusedIndex = manager.activeItemIndex;\r\n            manager.onKeydown(event);\r\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n                manager.activeItemIndex !== previouslyFocusedIndex) {\r\n                manager.activeItem._selectViaInteraction();\r\n            }\r\n        }\r\n    }\r\n    _onFocus() {\r\n        if (!this.disabled) {\r\n            this._focused = true;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n     * \"blur\" to the panel when it opens, causing a false positive.\r\n     */\r\n    _onBlur() {\r\n        this._focused = false;\r\n        if (!this.disabled && !this.panelOpen) {\r\n            this._onTouched();\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Callback that is invoked when the overlay panel has been attached.\r\n     */\r\n    _onAttached() {\r\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n            this._changeDetectorRef.detectChanges();\r\n            this._positioningSettled();\r\n        });\r\n    }\r\n    /** Returns the theme to be used on the panel. */\r\n    _getPanelTheme() {\r\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n    }\r\n    /** Whether the select has a value. */\r\n    get empty() {\r\n        return !this._selectionModel || this._selectionModel.isEmpty();\r\n    }\r\n    _initializeSelection() {\r\n        // Defer setting the value in order to avoid the \"Expression\r\n        // has changed after it was checked\" errors from Angular.\r\n        Promise.resolve().then(() => {\r\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the selected option based on a value. If no option can be\r\n     * found with the designated value, the select trigger is cleared.\r\n     */\r\n    _setSelectionByValue(value) {\r\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\r\n        this._selectionModel.clear();\r\n        if (this.multiple && value) {\r\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getMatSelectNonArrayValueError();\r\n            }\r\n            value.forEach((currentValue) => this._selectValue(currentValue));\r\n            this._sortValues();\r\n        }\r\n        else {\r\n            const correspondingOption = this._selectValue(value);\r\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n            // mode, because we don't know what option the user interacted with last.\r\n            if (correspondingOption) {\r\n                this._keyManager.updateActiveItem(correspondingOption);\r\n            }\r\n            else if (!this.panelOpen) {\r\n                // Otherwise reset the highlighted option. Note that we only want to do this while\r\n                // closed, because doing it while open can shift the user's focus unnecessarily.\r\n                this._keyManager.updateActiveItem(-1);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Finds and selects and option based on its value.\r\n     * @returns Option that has the corresponding value.\r\n     */\r\n    _selectValue(value) {\r\n        const correspondingOption = this.options.find((option) => {\r\n            // Skip options that are already in the model. This allows us to handle cases\r\n            // where the same primitive value is selected multiple times.\r\n            if (this._selectionModel.isSelected(option)) {\r\n                return false;\r\n            }\r\n            try {\r\n                // Treat null as a special reset value.\r\n                return option.value != null && this._compareWith(option.value, value);\r\n            }\r\n            catch (error) {\r\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                    // Notify developers of errors in their comparator.\r\n                    console.warn(error);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (correspondingOption) {\r\n            this._selectionModel.select(correspondingOption);\r\n        }\r\n        return correspondingOption;\r\n    }\r\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n    _initKeyManager() {\r\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\r\n            .withTypeAhead(this._typeaheadDebounceInterval)\r\n            .withVerticalOrientation()\r\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\r\n            .withHomeAndEnd()\r\n            .withAllowedModifierKeys(['shiftKey']);\r\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this.panelOpen) {\r\n                // Select the active item when tabbing away. This is consistent with how the native\r\n                // select behaves. Note that we only want to do this in single selection mode.\r\n                if (!this.multiple && this._keyManager.activeItem) {\r\n                    this._keyManager.activeItem._selectViaInteraction();\r\n                }\r\n                // Restore focus to the trigger before closing. Ensures that the focus\r\n                // position won't be lost if the user got focus into the overlay.\r\n                this.focus();\r\n                this.close();\r\n            }\r\n        });\r\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this._panelOpen && this.panel) {\r\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\r\n            }\r\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n                this._keyManager.activeItem._selectViaInteraction();\r\n            }\r\n        });\r\n    }\r\n    /** Drops current option subscriptions and IDs and resets from scratch. */\r\n    _resetOptions() {\r\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\r\n            this._onSelect(event.source, event.isUserInput);\r\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\r\n                this.close();\r\n                this.focus();\r\n            }\r\n        });\r\n        // Listen to changes in the internal state of the options and react accordingly.\r\n        // Handles cases like the labels of the selected options changing.\r\n        merge(...this.options.map(option => option._stateChanges))\r\n            .pipe(takeUntil(changedOrDestroyed))\r\n            .subscribe(() => {\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    /** Invoked when an option is clicked. */\r\n    _onSelect(option, isUserInput) {\r\n        const wasSelected = this._selectionModel.isSelected(option);\r\n        if (option.value == null && !this._multiple) {\r\n            option.deselect();\r\n            this._selectionModel.clear();\r\n            if (this.value != null) {\r\n                this._propagateChanges(option.value);\r\n            }\r\n        }\r\n        else {\r\n            if (wasSelected !== option.selected) {\r\n                option.selected ? this._selectionModel.select(option) :\r\n                    this._selectionModel.deselect(option);\r\n            }\r\n            if (isUserInput) {\r\n                this._keyManager.setActiveItem(option);\r\n            }\r\n            if (this.multiple) {\r\n                this._sortValues();\r\n                if (isUserInput) {\r\n                    // In case the user selected the option with their mouse, we\r\n                    // want to restore focus back to the trigger, in order to\r\n                    // prevent the select keyboard controls from clashing with\r\n                    // the ones from `mat-option`.\r\n                    this.focus();\r\n                }\r\n            }\r\n        }\r\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n            this._propagateChanges();\r\n        }\r\n        this.stateChanges.next();\r\n    }\r\n    /** Sorts the selected values in the selected based on their order in the panel. */\r\n    _sortValues() {\r\n        if (this.multiple) {\r\n            const options = this.options.toArray();\r\n            this._selectionModel.sort((a, b) => {\r\n                return this.sortComparator ? this.sortComparator(a, b, options) :\r\n                    options.indexOf(a) - options.indexOf(b);\r\n            });\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /** Emits change event to set the model value. */\r\n    _propagateChanges(fallbackValue) {\r\n        let valueToEmit = null;\r\n        if (this.multiple) {\r\n            valueToEmit = this.selected.map(option => option.value);\r\n        }\r\n        else {\r\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n        }\r\n        this._value = valueToEmit;\r\n        this.valueChange.emit(valueToEmit);\r\n        this._onChange(valueToEmit);\r\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Highlights the selected item. If no option is selected, it will highlight\r\n     * the first item instead.\r\n     */\r\n    _highlightCorrectOption() {\r\n        if (this._keyManager) {\r\n            if (this.empty) {\r\n                this._keyManager.setFirstItemActive();\r\n            }\r\n            else {\r\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\r\n            }\r\n        }\r\n    }\r\n    /** Whether the panel is allowed to open. */\r\n    _canOpen() {\r\n        var _a;\r\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\r\n    }\r\n    /** Focuses the select element. */\r\n    focus(options) {\r\n        this._elementRef.nativeElement.focus(options);\r\n    }\r\n    /** Gets the aria-labelledby for the select panel. */\r\n    _getPanelAriaLabelledby() {\r\n        var _a;\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\r\n        const labelExpression = (labelId ? labelId + ' ' : '');\r\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\r\n    }\r\n    /** Determines the `aria-activedescendant` to be set on the host. */\r\n    _getAriaActiveDescendant() {\r\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n            return this._keyManager.activeItem.id;\r\n        }\r\n        return null;\r\n    }\r\n    /** Gets the aria-labelledby of the select component trigger. */\r\n    _getTriggerAriaLabelledby() {\r\n        var _a;\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\r\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\r\n        if (this.ariaLabelledby) {\r\n            value += ' ' + this.ariaLabelledby;\r\n        }\r\n        return value;\r\n    }\r\n    /** Called when the overlay panel is done animating. */\r\n    _panelDoneAnimating(isOpen) {\r\n        this.openedChange.emit(isOpen);\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    onContainerClick() {\r\n        this.focus();\r\n        this.open();\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get shouldLabelFloat() {\r\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\r\n    }\r\n}\r\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\r\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\r\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\r\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\r\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\n_MatSelectBase.ctorParameters = () => [\r\n    { type: ViewportRuler },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone },\r\n    { type: ErrorStateMatcher },\r\n    { type: ElementRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: NgForm, decorators: [{ type: Optional }] },\r\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\r\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\r\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\r\n    { type: LiveAnnouncer },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\r\n];\r\n_MatSelectBase.propDecorators = {\r\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\r\n    panel: [{ type: ViewChild, args: ['panel',] }],\r\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\r\n    panelClass: [{ type: Input }],\r\n    placeholder: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    multiple: [{ type: Input }],\r\n    disableOptionCentering: [{ type: Input }],\r\n    compareWith: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    errorStateMatcher: [{ type: Input }],\r\n    typeaheadDebounceInterval: [{ type: Input }],\r\n    sortComparator: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    openedChange: [{ type: Output }],\r\n    _openedStream: [{ type: Output, args: ['opened',] }],\r\n    _closedStream: [{ type: Output, args: ['closed',] }],\r\n    selectionChange: [{ type: Output }],\r\n    valueChange: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_FORM_FIELD]\r\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\r\n                type: Self\r\n            }, {\r\n                type: Optional\r\n            }] }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['tabindex']\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SELECT_SCROLL_STRATEGY]\r\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_SELECT_CONFIG]\r\n            }] }]; }, { ariaLabel: [{\r\n            type: Input,\r\n            args: ['aria-label']\r\n        }], openedChange: [{\r\n            type: Output\r\n        }], _openedStream: [{\r\n            type: Output,\r\n            args: ['opened']\r\n        }], _closedStream: [{\r\n            type: Output,\r\n            args: ['closed']\r\n        }], selectionChange: [{\r\n            type: Output\r\n        }], valueChange: [{\r\n            type: Output\r\n        }], id: [{\r\n            type: Input\r\n        }], placeholder: [{\r\n            type: Input\r\n        }], required: [{\r\n            type: Input\r\n        }], multiple: [{\r\n            type: Input\r\n        }], disableOptionCentering: [{\r\n            type: Input\r\n        }], compareWith: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }], typeaheadDebounceInterval: [{\r\n            type: Input\r\n        }], trigger: [{\r\n            type: ViewChild,\r\n            args: ['trigger']\r\n        }], panel: [{\r\n            type: ViewChild,\r\n            args: ['panel']\r\n        }], _overlayDir: [{\r\n            type: ViewChild,\r\n            args: [CdkConnectedOverlay]\r\n        }], panelClass: [{\r\n            type: Input\r\n        }], ariaLabelledby: [{\r\n            type: Input,\r\n            args: ['aria-labelledby']\r\n        }], errorStateMatcher: [{\r\n            type: Input\r\n        }], sortComparator: [{\r\n            type: Input\r\n        }] }); })();\r\nclass MatSelect extends _MatSelectBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n        this._scrollTop = 0;\r\n        /** The cached font-size of the trigger element. */\r\n        this._triggerFontSize = 0;\r\n        /** The value of the select panel's transform-origin property. */\r\n        this._transformOrigin = 'top';\r\n        /**\r\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n         * This must be adjusted to align the selected option text over the trigger text.\r\n         * when the panel opens. Will change based on the y-position of the selected option.\r\n         */\r\n        this._offsetY = 0;\r\n        this._positions = [\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'top',\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom',\r\n            },\r\n        ];\r\n    }\r\n    /**\r\n     * Calculates the scroll position of the select's overlay panel.\r\n     *\r\n     * Attempts to center the selected option in the panel. If the option is\r\n     * too high or too low in the panel to be scrolled to the center, it clamps the\r\n     * scroll position to the min or max scroll positions respectively.\r\n     */\r\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n        const halfOptionHeight = itemHeight / 2;\r\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n        // the center of the overlay panel. Half the option height must be re-added to the\r\n        // scrollTop so the option is centered based on its middle, not its top edge.\r\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n    }\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this.panelOpen) {\r\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        });\r\n    }\r\n    open() {\r\n        if (super._canOpen()) {\r\n            super.open();\r\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n            this._triggerFontSize =\r\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\r\n            this._calculateOverlayPosition();\r\n            // Set the font size on the panel element once it exists.\r\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\r\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\r\n                    this._overlayDir.overlayRef.overlayElement) {\r\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /** Scrolls the active option into view. */\r\n    _scrollOptionIntoView(index) {\r\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\r\n        const itemHeight = this._getItemHeight();\r\n        if (index === 0 && labelCount === 1) {\r\n            // If we've got one group label before the option and we're at the top option,\r\n            // scroll the list to the top. This is better UX than scrolling the list to the\r\n            // top of the option, because it allows the user to read the top group's label.\r\n            this.panel.nativeElement.scrollTop = 0;\r\n        }\r\n        else {\r\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\r\n        }\r\n    }\r\n    _positioningSettled() {\r\n        this._calculateOverlayOffsetX();\r\n        this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    }\r\n    _panelDoneAnimating(isOpen) {\r\n        if (this.panelOpen) {\r\n            this._scrollTop = 0;\r\n        }\r\n        else {\r\n            this._overlayDir.offsetX = 0;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        super._panelDoneAnimating(isOpen);\r\n    }\r\n    _getChangeEvent(value) {\r\n        return new MatSelectChange(this, value);\r\n    }\r\n    /**\r\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n     * This must be adjusted to align the selected option text over the trigger text when\r\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n     * can't be calculated until the panel has been attached, because we need to know the\r\n     * content width in order to constrain the panel within the viewport.\r\n     */\r\n    _calculateOverlayOffsetX() {\r\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        const isRtl = this._isRtl();\r\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n            SELECT_PANEL_PADDING_X * 2;\r\n        let offsetX;\r\n        // Adjust the offset, depending on the option padding.\r\n        if (this.multiple) {\r\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n        }\r\n        else if (this.disableOptionCentering) {\r\n            offsetX = SELECT_PANEL_PADDING_X;\r\n        }\r\n        else {\r\n            let selected = this._selectionModel.selected[0] || this.options.first;\r\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n        }\r\n        // Invert the offset in LTR.\r\n        if (!isRtl) {\r\n            offsetX *= -1;\r\n        }\r\n        // Determine how much the select overflows on each side.\r\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n            + (isRtl ? 0 : paddingWidth);\r\n        // If the element overflows on either side, reduce the offset to allow it to fit.\r\n        if (leftOverflow > 0) {\r\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        else if (rightOverflow > 0) {\r\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        // Set the offset directly in order to avoid having to go through change detection and\r\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\r\n        // blurry content in some browsers.\r\n        this._overlayDir.offsetX = Math.round(offsetX);\r\n        this._overlayDir.overlayRef.updatePosition();\r\n    }\r\n    /**\r\n     * Calculates the y-offset of the select's overlay panel in relation to the\r\n     * top start corner of the trigger. It has to be adjusted in order for the\r\n     * selected option to be aligned over the trigger when the panel opens.\r\n     */\r\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n        let optionOffsetFromPanelTop;\r\n        // Disable offset if requested by user by returning 0 as value to offset\r\n        if (this.disableOptionCentering) {\r\n            return 0;\r\n        }\r\n        if (this._scrollTop === 0) {\r\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n        }\r\n        else if (this._scrollTop === maxScroll) {\r\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n            // The first item is partially out of the viewport. Therefore we need to calculate what\r\n            // portion of it is shown in the viewport and account for it in our offset.\r\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n            // Because the panel height is longer than the height of the options alone,\r\n            // there is always extra padding at the top or bottom of the panel. When\r\n            // scrolled to the very bottom, this padding is at the top of the panel and\r\n            // must be added to the offset.\r\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n        }\r\n        else {\r\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n            // its offset will be the scroll buffer minus the half height that was added to\r\n            // center it.\r\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n        }\r\n        // The final offset is the option's offset from the top, adjusted for the height difference,\r\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\r\n        // The value is rounded to prevent some browsers from blurring the content.\r\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\r\n    }\r\n    /**\r\n     * Checks that the attempted overlay position will fit within the viewport.\r\n     * If it will not fit, tries to adjust the scroll position and the associated\r\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n     * sets the offset back to 0 to allow the fallback position to take over.\r\n     */\r\n    _checkOverlayWithinViewport(maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n        const panelHeightTop = Math.abs(this._offsetY);\r\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n        if (panelHeightBottom > bottomSpaceAvailable) {\r\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n        }\r\n        else if (panelHeightTop > topSpaceAvailable) {\r\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n        }\r\n        else {\r\n            this._transformOrigin = this._getOriginBasedOnOption();\r\n        }\r\n    }\r\n    /** Adjusts the overlay panel up to fit in the viewport. */\r\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n        // Scrolls the panel up by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel up into the viewport.\r\n        this._scrollTop -= distanceBelowViewport;\r\n        this._offsetY -= distanceBelowViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n        // effect.\r\n        if (this._scrollTop <= 0) {\r\n            this._scrollTop = 0;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% bottom 0px`;\r\n        }\r\n    }\r\n    /** Adjusts the overlay panel down to fit in the viewport. */\r\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n        // Scrolls the panel down by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel down into the viewport.\r\n        this._scrollTop += distanceAboveViewport;\r\n        this._offsetY += distanceAboveViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n        // to take effect.\r\n        if (this._scrollTop >= maxScroll) {\r\n            this._scrollTop = maxScroll;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% top 0px`;\r\n            return;\r\n        }\r\n    }\r\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n    _calculateOverlayPosition() {\r\n        const itemHeight = this._getItemHeight();\r\n        const items = this._getItemCount();\r\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        const scrollContainerHeight = items * itemHeight;\r\n        // The farthest the panel can be scrolled before it hits the bottom\r\n        const maxScroll = scrollContainerHeight - panelHeight;\r\n        // If no value is selected we open the popup to the first item.\r\n        let selectedOptionOffset;\r\n        if (this.empty) {\r\n            selectedOptionOffset = 0;\r\n        }\r\n        else {\r\n            selectedOptionOffset =\r\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\r\n        }\r\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\r\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n        // center of the overlay panel rather than the top.\r\n        const scrollBuffer = panelHeight / 2;\r\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._checkOverlayWithinViewport(maxScroll);\r\n    }\r\n    /** Sets the transform origin point based on the selected option. */\r\n    _getOriginBasedOnOption() {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n        return `50% ${originY}px 0px`;\r\n    }\r\n    /** Calculates the height of the select's options. */\r\n    _getItemHeight() {\r\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    }\r\n    /** Calculates the amount of items in the select. This includes options and group labels. */\r\n    _getItemCount() {\r\n        return this.options.length + this.optionGroups.length;\r\n    }\r\n}\r\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\r\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\r\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\r\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\r\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            { provide: MatFormFieldControl, useExisting: MatSelect },\r\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\r\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c2);\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\r\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\r\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\r\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\r\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\r\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\r\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\r\n    } if (rf & 2) {\r\n        const _r0 = ɵngcc0.ɵɵreference(1);\r\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\r\n        ɵngcc0.ɵɵadvance(3);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n        ɵngcc0.ɵɵadvance(3);\r\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\r\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], encapsulation: 2, data: { animation: [\r\n            matSelectAnimations.transformPanelWrap,\r\n            matSelectAnimations.transformPanel\r\n        ] }, changeDetection: 0 });\r\nMatSelect.propDecorators = {\r\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\r\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\r\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-select',\r\n                exportAs: 'matSelect',\r\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\r\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'role': 'combobox',\r\n                    'aria-autocomplete': 'none',\r\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\r\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\r\n                    // value. At some point we should try to switch it back to being `listbox`.\r\n                    'aria-haspopup': 'true',\r\n                    'class': 'mat-select',\r\n                    '[attr.id]': 'id',\r\n                    '[attr.tabindex]': 'tabIndex',\r\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\r\n                    '[attr.aria-expanded]': 'panelOpen',\r\n                    '[attr.aria-label]': 'ariaLabel || null',\r\n                    '[attr.aria-required]': 'required.toString()',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[attr.aria-invalid]': 'errorState',\r\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n                    '[class.mat-select-disabled]': 'disabled',\r\n                    '[class.mat-select-invalid]': 'errorState',\r\n                    '[class.mat-select-required]': 'required',\r\n                    '[class.mat-select-empty]': 'empty',\r\n                    '[class.mat-select-multiple]': 'multiple',\r\n                    '(keydown)': '_handleKeydown($event)',\r\n                    '(focus)': '_onFocus()',\r\n                    '(blur)': '_onBlur()'\r\n                },\r\n                animations: [\r\n                    matSelectAnimations.transformPanelWrap,\r\n                    matSelectAnimations.transformPanel\r\n                ],\r\n                providers: [\r\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\r\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\r\n                ],\r\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\r\n            }]\r\n    }], null, { options: [{\r\n            type: ContentChildren,\r\n            args: [MatOption, { descendants: true }]\r\n        }], optionGroups: [{\r\n            type: ContentChildren,\r\n            args: [MAT_OPTGROUP, { descendants: true }]\r\n        }], customTrigger: [{\r\n            type: ContentChild,\r\n            args: [MAT_SELECT_TRIGGER]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatSelectModule {\r\n}\r\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\r\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\r\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\r\n            CommonModule,\r\n            OverlayModule,\r\n            MatOptionModule,\r\n            MatCommonModule,\r\n        ], CdkScrollableModule,\r\n        MatFormFieldModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                    OverlayModule,\r\n                    MatOptionModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [\r\n                    CdkScrollableModule,\r\n                    MatFormFieldModule,\r\n                    MatSelect,\r\n                    MatSelectTrigger,\r\n                    MatOptionModule,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [MatSelect, MatSelectTrigger],\r\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\r\n        OverlayModule,\r\n        MatOptionModule,\r\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\r\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\r\n        MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\r\n\r\n//# sourceMappingURL=select.js.map"]}