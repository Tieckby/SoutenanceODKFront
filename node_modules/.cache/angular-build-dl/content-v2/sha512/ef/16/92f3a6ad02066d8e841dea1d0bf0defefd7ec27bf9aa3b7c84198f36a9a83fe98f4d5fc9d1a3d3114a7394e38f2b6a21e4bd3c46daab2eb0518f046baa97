{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAmF;AACpC;AAC6N;AACG;AAC1J;AACzC;AACE;AAC3B;AACiC;AAC1B;AAC6D;AAChD;AAC1B;AAC6D;AACJ;;AAEtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACS;AACA;AACL;AACH;AACG;AACW;AACR;AACL;;AAE1C;AACA;AACA,6CAA6C;AAC7C,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B,CAAC;AACD,oDAAoD;AACpD,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B,CAAC;AACD,0DAA0D;AAC1D,IAAI,0DAAmB;AACvB,CAAC;AACD,6CAA6C;AAC7C,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,oDAAoD;AACpD,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,yHAAyH,CAAC,2DAAoB,MAAM,gBAAgB,2DAAoB,GAAG,8DAA8D,EAAE,uFAAuF,CAAC,2DAAoB,MAAM,iBAAiB,2DAAoB,GAAG,uCAAuC,EAAE;AACnd,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,oEAA6B;AACjC,IAAI,yDAAkB;AACtB,IAAI,wDAAiB;AACrB,IAAI,yDAAkB;AACtB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;AAC/B,QAAQ,+DAAU,cAAc,0DAAK,qBAAqB,iEAAY,MAAM,iBAAiB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAO;AAC3B,QAAQ,0DAAK,SAAS,0DAAK;AAC3B;AACA;AACA;AACA,SAAS;AACT,QAAQ,0DAAK,YAAY,0DAAK;AAC9B;AACA;AACA;AACA,SAAS;AACT,QAAQ,0DAAK,qBAAqB,0DAAK;AACvC;AACA;AACA;AACA,SAAS;AACT,QAAQ,+DAAU,cAAc,4DAAO;AACvC,QAAQ,+DAAU,cAAc,4DAAO,sBAAsB,0DAAK,EAAE,aAAa;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yDAAc;AACrD;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAc;AAC5C;AACA;AACA;AACA,WAAW,yDAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAAkB,CAAC,qEAAa,CAAC,qEAAa,CAAC,uEAAe;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,+BAA+B,yDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,sCAAsC,+DAAwB,EAAE,yEAAyE,gEAAyB,GAAG,6DAA6D,KAAK;AACvO,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,6BAA6B,6DAA6D;AAC1F,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA,4BAA4B,yCAAO;AACnC;AACA,gCAAgC;AAChC;AACA,iCAAiC;AACjC;AACA,4CAA4C,eAAe;AAC3D;AACA,6CAA6C,yCAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2CAAK;AAC3C;AACA;AACA,4CAA4C,yDAAS,WAAW,yDAAS,OAAO,2CAAK;AACrF;AACA;AACA,sBAAsB,oDAAI,KAAK,yDAAS;AACxC,SAAS;AACT;AACA,gCAAgC,uDAAY;AAC5C;AACA,oDAAoD,uDAAM,UAAU,oDAAG,QAAQ,EAAE;AACjF;AACA,oDAAoD,uDAAM,WAAW,oDAAG,QAAQ,EAAE;AAClF;AACA,mCAAmC,uDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,yBAAyB,6EAAqB;AAC9C;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA,yBAAyB,6EAAqB;AAC9C;AACA;AACA,kCAAkC,qCAAqC;AACvE;AACA,uCAAuC,6EAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA,0CAA0C,4EAAoB;AAC9D;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,qEAAc;AACjD;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAoB,IAAI,0DAAS;AACnD;AACA;AACA;AACA;AACA,0CAA0C,0DAAS;AACnD;AACA;AACA,SAAS;AACT,kCAAkC,yDAAS,QAAQ,0DAAS;AAC5D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAU,gBAAgB,4DAAQ;AACzE,wBAAwB,8DAAU,gBAAgB,+DAAW;AAC7D,sCAAsC,yDAAK,gBAAgB,yDAAK;AAChE;AACA;AACA,kDAAkD,sEAAc;AAChE;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8DAAU,gBAAgB,4DAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,yDAAK,gBAAgB,yDAAK;AACrE,aAAa,sEAAc;AAC3B;AACA;AACA;AACA,4DAA4D,qDAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oDAAI;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,4BAA4B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0EAA0B;AACzD;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC,0DAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mCAAmC,2CAAK;AACxC,yCAAyC,0DAAS;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,2CAAK;AACb,kBAAkB,0DAAS;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kCAAkC,+DAAwB,CAAC,kEAAoB,GAAG,+DAAwB,CAAC,4DAAwB,GAAG,+DAAwB,CAAC,iDAAa,GAAG,+DAAwB,CAAC,qEAAwB,GAAG,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,8DAAqB,MAAM,+DAAwB,CAAC,mDAAa,MAAM,+DAAwB,CAAC,+DAAyB,MAAM,+DAAwB,CAAC,yEAAc,MAAM,+DAAwB,CAAC,sDAAgB,OAAO,+DAAwB,cAAc,+DAAwB,8BAA8B,+DAAwB,CAAC,6DAAoB,GAAG,+DAAwB,wBAAwB;AAC3vB,oCAAoC,+DAAwB,EAAE,0EAA0E;AACxI,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB;AAC1B,QAAQ,yDAAkB,CAAC,qEAAmB;AAC9C,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,4aAA4a,YAAY,iJAAiJ,aAAa,wEAAiC,EAAE,kEAA2B,GAAG;AACzqB;AACA,KAAK,OAAO,kEA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B,oDAAS;AAC3B;AACA,SAAS;AACT,kBAAkB,oDAAS;AAC3B,mBAAmB,qEAAmB;AACtC,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0DAAS;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAI;AAC3C;AACA;AACA,mFAAmF,sBAAsB;AACzG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,qFAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gFAAwB;AACzgCAAgC,qFAA6B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B,uCAAuC,6DAA6D,mEAA4B,8BAA8B,GAAG,EAAE;AAC3O,+BAA+B,+DAAwB,EAAE,qHAAqH;AAC9K,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB,WAAW,6DAAS;AACjD,QAAQ,4DAAqB,WAAW,gEAAY;AACpD,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,gLAAgL;AACvL,QAAQ,wDAAiB,mEAAm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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_select_js-es2015.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\r\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\r\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\r\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\r\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\r\nimport { Subject, defer, merge } from 'rxjs';\r\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\r\nimport * as ɵngcc2 from '@angular/material/core';\r\nimport * as ɵngcc3 from '@angular/cdk/bidi';\r\nimport * as ɵngcc4 from '@angular/forms';\r\nimport * as ɵngcc5 from '@angular/cdk/a11y';\r\nimport * as ɵngcc6 from '@angular/material/form-field';\r\nimport * as ɵngcc7 from '@angular/cdk/overlay';\r\nimport * as ɵngcc8 from '@angular/common';\r\n\r\nconst _c0 = [\"trigger\"];\r\nconst _c1 = [\"panel\"];\r\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\r\n} }\r\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\r\n    ɵngcc0.ɵɵtext(1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\r\n} }\r\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\r\n} }\r\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\r\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\r\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\r\n    ɵngcc0.ɵɵadvance(2);\r\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n} }\r\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\r\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\r\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\r\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14, 15);\r\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\r\n    ɵngcc0.ɵɵprojection(3, 1);\r\n    ɵngcc0.ɵɵelementEnd();\r\n    ɵngcc0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\r\n    ɵngcc0.ɵɵadvance(1);\r\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\r\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\r\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\r\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\r\n} }\r\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\r\nconst _c3 = [\"mat-select-trigger\", \"*\"];\r\nconst matSelectAnimations = {\r\n    /**\r\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n     * closing the select.\r\n     * This is needed due to https://github.com/angular/angular/issues/23302\r\n     */\r\n    transformPanelWrap: trigger('transformPanelWrap', [\r\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\r\n    ]),\r\n    /**\r\n     * This animation transforms the select's overlay panel on and off the page.\r\n     *\r\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n     * side to ensure the option text correctly overlaps the trigger text.\r\n     *\r\n     * When the panel is removed from the DOM, it simply fades out linearly.\r\n     */\r\n    transformPanel: trigger('transformPanel', [\r\n        state('void', style({\r\n            transform: 'scaleY(0.8)',\r\n            minWidth: '100%',\r\n            opacity: 0\r\n        })),\r\n        state('showing', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 32px)',\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        state('showing-multiple', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 64px)',\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\r\n    ])\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * @docs-private\r\n */\r\nfunction getMatSelectDynamicMultipleError() {\r\n    return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * @docs-private\r\n */\r\nfunction getMatSelectNonArrayValueError() {\r\n    return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n */\r\nfunction getMatSelectNonFunctionValueError() {\r\n    return Error('`compareWith` must be a function.');\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet nextUniqueId = 0;\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n/** The max height of the select's overlay panel. */\r\nconst SELECT_PANEL_MAX_HEIGHT = 256;\r\n/** The panel's padding on the x-axis. */\r\nconst SELECT_PANEL_PADDING_X = 16;\r\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\r\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n/** The height of the select items in `em` units. */\r\nconst SELECT_ITEM_HEIGHT_EM = 3;\r\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n */\r\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n */\r\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.reposition();\r\n}\r\n/** Injection token that can be used to provide the default options the select module. */\r\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\r\n/** @docs-private */\r\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_SELECT_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/** Change event object that is emitted when the select value has changed. */\r\nclass MatSelectChange {\r\n    constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    source, \r\n    /** Current value of the select that emitted the event. */\r\n    value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatSelect.\r\n/** @docs-private */\r\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\r\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\r\n        this._elementRef = _elementRef;\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n}))));\r\n/**\r\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\r\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\nclass MatSelectTrigger {\r\n}\r\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\r\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-select-trigger',\r\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\r\n            }]\r\n    }], null, null); })();\r\n/** Base class with all of the `MatSelect` functionality. */\r\nclass _MatSelectBase extends _MatSelectMixinBase {\r\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\r\n        var _a, _b, _c;\r\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._viewportRuler = _viewportRuler;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._ngZone = _ngZone;\r\n        this._dir = _dir;\r\n        this._parentFormField = _parentFormField;\r\n        this._liveAnnouncer = _liveAnnouncer;\r\n        this._defaultOptions = _defaultOptions;\r\n        /** Whether or not the overlay panel is open. */\r\n        this._panelOpen = false;\r\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n        this._compareWith = (o1, o2) => o1 === o2;\r\n        /** Unique id for this input. */\r\n        this._uid = `mat-select-${nextUniqueId++}`;\r\n        /** Current `ariar-labelledby` value for the select trigger. */\r\n        this._triggerAriaLabelledBy = null;\r\n        /** Emits whenever the component is destroyed. */\r\n        this._destroy = new Subject();\r\n        /** `View -> model callback called when value changes` */\r\n        this._onChange = () => { };\r\n        /** `View -> model callback called when select has been touched` */\r\n        this._onTouched = () => { };\r\n        /** ID for the DOM node containing the select's value. */\r\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\r\n        /** Emits when the panel element is finished transforming in. */\r\n        this._panelDoneAnimatingStream = new Subject();\r\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\r\n        this._focused = false;\r\n        /** A name for this control that can be used by `mat-form-field`. */\r\n        this.controlType = 'mat-select';\r\n        this._required = false;\r\n        this._multiple = false;\r\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\r\n        /** Aria label of the select. */\r\n        this.ariaLabel = '';\r\n        /** Combined stream of all of the child options' change events. */\r\n        this.optionSelectionChanges = defer(() => {\r\n            const options = this.options;\r\n            if (options) {\r\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\r\n            }\r\n            return this._ngZone.onStable\r\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\r\n        });\r\n        /** Event emitted when the select panel has been toggled. */\r\n        this.openedChange = new EventEmitter();\r\n        /** Event emitted when the select has been opened. */\r\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\r\n        /** Event emitted when the select has been closed. */\r\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\r\n        /** Event emitted when the selected value has been changed by the user. */\r\n        this.selectionChange = new EventEmitter();\r\n        /**\r\n         * Event that emits whenever the raw value of the select changes. This is here primarily\r\n         * to facilitate the two-way binding for the `value` input.\r\n         * @docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        if (this.ngControl) {\r\n            // Note: we provide the value accessor through here, instead of\r\n            // the `providers` to avoid running into a circular import.\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\r\n        // stay as `undefined` so that it falls back to the default in the key manager.\r\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\r\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\r\n        }\r\n        this._scrollStrategyFactory = scrollStrategyFactory;\r\n        this._scrollStrategy = this._scrollStrategyFactory();\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n        // Force setter to be called in case id was not specified.\r\n        this.id = this.id;\r\n    }\r\n    /** Whether the select is focused. */\r\n    get focused() {\r\n        return this._focused || this._panelOpen;\r\n    }\r\n    /** Placeholder to be shown if no value has been selected. */\r\n    get placeholder() { return this._placeholder; }\r\n    set placeholder(value) {\r\n        this._placeholder = value;\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether the component is required. */\r\n    get required() { return this._required; }\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether the user should be allowed to select multiple options. */\r\n    get multiple() { return this._multiple; }\r\n    set multiple(value) {\r\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatSelectDynamicMultipleError();\r\n        }\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    /** Whether to center the active option over the trigger. */\r\n    get disableOptionCentering() { return this._disableOptionCentering; }\r\n    set disableOptionCentering(value) {\r\n        this._disableOptionCentering = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Function to compare the option values with the selected values. The first argument\r\n     * is a value from an option. The second is a value from the selection. A boolean\r\n     * should be returned.\r\n     */\r\n    get compareWith() { return this._compareWith; }\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatSelectNonFunctionValueError();\r\n        }\r\n        this._compareWith = fn;\r\n        if (this._selectionModel) {\r\n            // A different comparator means the selection could change.\r\n            this._initializeSelection();\r\n        }\r\n    }\r\n    /** Value of the select control. */\r\n    get value() { return this._value; }\r\n    set value(newValue) {\r\n        // Always re-assign an array, because it might have been mutated.\r\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\r\n            if (this.options) {\r\n                this._setSelectionByValue(newValue);\r\n            }\r\n            this._value = newValue;\r\n        }\r\n    }\r\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\r\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\r\n    set typeaheadDebounceInterval(value) {\r\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\r\n    }\r\n    /** Unique id of the element. */\r\n    get id() { return this._id; }\r\n    set id(value) {\r\n        this._id = value || this._uid;\r\n        this.stateChanges.next();\r\n    }\r\n    ngOnInit() {\r\n        this._selectionModel = new SelectionModel(this.multiple);\r\n        this.stateChanges.next();\r\n        // We need `distinctUntilChanged` here, because some browsers will\r\n        // fire the animation end event twice for the same animation. See:\r\n        // https://github.com/angular/angular/issues/24084\r\n        this._panelDoneAnimatingStream\r\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\r\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\r\n    }\r\n    ngAfterContentInit() {\r\n        this._initKeyManager();\r\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\r\n            event.added.forEach(option => option.select());\r\n            event.removed.forEach(option => option.deselect());\r\n        });\r\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\r\n            this._resetOptions();\r\n            this._initializeSelection();\r\n        });\r\n    }\r\n    ngDoCheck() {\r\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\r\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\r\n        // is computed as a result of a content query which can cause this binding to trigger a\r\n        // \"changed after checked\" error.\r\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\r\n            const element = this._elementRef.nativeElement;\r\n            this._triggerAriaLabelledBy = newAriaLabelledby;\r\n            if (newAriaLabelledby) {\r\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\r\n            }\r\n            else {\r\n                element.removeAttribute('aria-labelledby');\r\n            }\r\n        }\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n        // the parent form field know to run change detection when the disabled state changes.\r\n        if (changes['disabled']) {\r\n            this.stateChanges.next();\r\n        }\r\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\r\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroy.next();\r\n        this._destroy.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n    /** Toggles the overlay panel open or closed. */\r\n    toggle() {\r\n        this.panelOpen ? this.close() : this.open();\r\n    }\r\n    /** Opens the overlay panel. */\r\n    open() {\r\n        if (this._canOpen()) {\r\n            this._panelOpen = true;\r\n            this._keyManager.withHorizontalOrientation(null);\r\n            this._highlightCorrectOption();\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /** Closes the overlay panel and focuses the host element. */\r\n    close() {\r\n        if (this._panelOpen) {\r\n            this._panelOpen = false;\r\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n            this._changeDetectorRef.markForCheck();\r\n            this._onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the select's value. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param value New value to be written to the model.\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select's value\r\n     * changes from user input. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the value changes.\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select is blurred\r\n     * by the user. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the component has been touched.\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Disables the select. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param isDisabled Sets whether the component is disabled.\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    /** Whether or not the overlay panel is open. */\r\n    get panelOpen() {\r\n        return this._panelOpen;\r\n    }\r\n    /** The currently selected option. */\r\n    get selected() {\r\n        var _a, _b;\r\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\r\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\r\n    }\r\n    /** The value displayed in the trigger. */\r\n    get triggerValue() {\r\n        if (this.empty) {\r\n            return '';\r\n        }\r\n        if (this._multiple) {\r\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\r\n            if (this._isRtl()) {\r\n                selectedOptions.reverse();\r\n            }\r\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n            return selectedOptions.join(', ');\r\n        }\r\n        return this._selectionModel.selected[0].viewValue;\r\n    }\r\n    /** Whether the element is in RTL mode. */\r\n    _isRtl() {\r\n        return this._dir ? this._dir.value === 'rtl' : false;\r\n    }\r\n    /** Handles all keydown events on the select. */\r\n    _handleKeydown(event) {\r\n        if (!this.disabled) {\r\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n        }\r\n    }\r\n    /** Handles keyboard events while the select is closed. */\r\n    _handleClosedKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n        const manager = this._keyManager;\r\n        // Open the select on ALT + arrow key to match the native <select>\r\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\r\n            ((this.multiple || event.altKey) && isArrowKey)) {\r\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n            this.open();\r\n        }\r\n        else if (!this.multiple) {\r\n            const previouslySelectedOption = this.selected;\r\n            manager.onKeydown(event);\r\n            const selectedOption = this.selected;\r\n            // Since the value has changed, we need to announce it ourselves.\r\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\r\n                // We set a duration on the live announcement, because we want the live element to be\r\n                // cleared after a while so that users can't navigate to it using the arrow keys.\r\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\r\n            }\r\n        }\r\n    }\r\n    /** Handles keyboard events when the selected is open. */\r\n    _handleOpenKeydown(event) {\r\n        const manager = this._keyManager;\r\n        const keyCode = event.keyCode;\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n        const isTyping = manager.isTyping();\r\n        if (isArrowKey && event.altKey) {\r\n            // Close the select on ALT + arrow key to match the native <select>\r\n            event.preventDefault();\r\n            this.close();\r\n            // Don't do anything in this case if the user is typing,\r\n            // because the typing sequence can include the space key.\r\n        }\r\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\r\n            !hasModifierKey(event)) {\r\n            event.preventDefault();\r\n            manager.activeItem._selectViaInteraction();\r\n        }\r\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\r\n            event.preventDefault();\r\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\r\n            this.options.forEach(option => {\r\n                if (!option.disabled) {\r\n                    hasDeselectedOptions ? option.select() : option.deselect();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            const previouslyFocusedIndex = manager.activeItemIndex;\r\n            manager.onKeydown(event);\r\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n                manager.activeItemIndex !== previouslyFocusedIndex) {\r\n                manager.activeItem._selectViaInteraction();\r\n            }\r\n        }\r\n    }\r\n    _onFocus() {\r\n        if (!this.disabled) {\r\n            this._focused = true;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n     * \"blur\" to the panel when it opens, causing a false positive.\r\n     */\r\n    _onBlur() {\r\n        this._focused = false;\r\n        if (!this.disabled && !this.panelOpen) {\r\n            this._onTouched();\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Callback that is invoked when the overlay panel has been attached.\r\n     */\r\n    _onAttached() {\r\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\r\n            this._changeDetectorRef.detectChanges();\r\n            this._positioningSettled();\r\n        });\r\n    }\r\n    /** Returns the theme to be used on the panel. */\r\n    _getPanelTheme() {\r\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n    }\r\n    /** Whether the select has a value. */\r\n    get empty() {\r\n        return !this._selectionModel || this._selectionModel.isEmpty();\r\n    }\r\n    _initializeSelection() {\r\n        // Defer setting the value in order to avoid the \"Expression\r\n        // has changed after it was checked\" errors from Angular.\r\n        Promise.resolve().then(() => {\r\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    /**\r\n     * Sets the selected option based on a value. If no option can be\r\n     * found with the designated value, the select trigger is cleared.\r\n     */\r\n    _setSelectionByValue(value) {\r\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\r\n        this._selectionModel.clear();\r\n        if (this.multiple && value) {\r\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw getMatSelectNonArrayValueError();\r\n            }\r\n            value.forEach((currentValue) => this._selectValue(currentValue));\r\n            this._sortValues();\r\n        }\r\n        else {\r\n            const correspondingOption = this._selectValue(value);\r\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n            // mode, because we don't know what option the user interacted with last.\r\n            if (correspondingOption) {\r\n                this._keyManager.updateActiveItem(correspondingOption);\r\n            }\r\n            else if (!this.panelOpen) {\r\n                // Otherwise reset the highlighted option. Note that we only want to do this while\r\n                // closed, because doing it while open can shift the user's focus unnecessarily.\r\n                this._keyManager.updateActiveItem(-1);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Finds and selects and option based on its value.\r\n     * @returns Option that has the corresponding value.\r\n     */\r\n    _selectValue(value) {\r\n        const correspondingOption = this.options.find((option) => {\r\n            // Skip options that are already in the model. This allows us to handle cases\r\n            // where the same primitive value is selected multiple times.\r\n            if (this._selectionModel.isSelected(option)) {\r\n                return false;\r\n            }\r\n            try {\r\n                // Treat null as a special reset value.\r\n                return option.value != null && this._compareWith(option.value, value);\r\n            }\r\n            catch (error) {\r\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                    // Notify developers of errors in their comparator.\r\n                    console.warn(error);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (correspondingOption) {\r\n            this._selectionModel.select(correspondingOption);\r\n        }\r\n        return correspondingOption;\r\n    }\r\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n    _initKeyManager() {\r\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\r\n            .withTypeAhead(this._typeaheadDebounceInterval)\r\n            .withVerticalOrientation()\r\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\r\n            .withHomeAndEnd()\r\n            .withAllowedModifierKeys(['shiftKey']);\r\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this.panelOpen) {\r\n                // Select the active item when tabbing away. This is consistent with how the native\r\n                // select behaves. Note that we only want to do this in single selection mode.\r\n                if (!this.multiple && this._keyManager.activeItem) {\r\n                    this._keyManager.activeItem._selectViaInteraction();\r\n                }\r\n                // Restore focus to the trigger before closing. Ensures that the focus\r\n                // position won't be lost if the user got focus into the overlay.\r\n                this.focus();\r\n                this.close();\r\n            }\r\n        });\r\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this._panelOpen && this.panel) {\r\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\r\n            }\r\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n                this._keyManager.activeItem._selectViaInteraction();\r\n            }\r\n        });\r\n    }\r\n    /** Drops current option subscriptions and IDs and resets from scratch. */\r\n    _resetOptions() {\r\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\r\n            this._onSelect(event.source, event.isUserInput);\r\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\r\n                this.close();\r\n                this.focus();\r\n            }\r\n        });\r\n        // Listen to changes in the internal state of the options and react accordingly.\r\n        // Handles cases like the labels of the selected options changing.\r\n        merge(...this.options.map(option => option._stateChanges))\r\n            .pipe(takeUntil(changedOrDestroyed))\r\n            .subscribe(() => {\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        });\r\n    }\r\n    /** Invoked when an option is clicked. */\r\n    _onSelect(option, isUserInput) {\r\n        const wasSelected = this._selectionModel.isSelected(option);\r\n        if (option.value == null && !this._multiple) {\r\n            option.deselect();\r\n            this._selectionModel.clear();\r\n            if (this.value != null) {\r\n                this._propagateChanges(option.value);\r\n            }\r\n        }\r\n        else {\r\n            if (wasSelected !== option.selected) {\r\n                option.selected ? this._selectionModel.select(option) :\r\n                    this._selectionModel.deselect(option);\r\n            }\r\n            if (isUserInput) {\r\n                this._keyManager.setActiveItem(option);\r\n            }\r\n            if (this.multiple) {\r\n                this._sortValues();\r\n                if (isUserInput) {\r\n                    // In case the user selected the option with their mouse, we\r\n                    // want to restore focus back to the trigger, in order to\r\n                    // prevent the select keyboard controls from clashing with\r\n                    // the ones from `mat-option`.\r\n                    this.focus();\r\n                }\r\n            }\r\n        }\r\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n            this._propagateChanges();\r\n        }\r\n        this.stateChanges.next();\r\n    }\r\n    /** Sorts the selected values in the selected based on their order in the panel. */\r\n    _sortValues() {\r\n        if (this.multiple) {\r\n            const options = this.options.toArray();\r\n            this._selectionModel.sort((a, b) => {\r\n                return this.sortComparator ? this.sortComparator(a, b, options) :\r\n                    options.indexOf(a) - options.indexOf(b);\r\n            });\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /** Emits change event to set the model value. */\r\n    _propagateChanges(fallbackValue) {\r\n        let valueToEmit = null;\r\n        if (this.multiple) {\r\n            valueToEmit = this.selected.map(option => option.value);\r\n        }\r\n        else {\r\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n        }\r\n        this._value = valueToEmit;\r\n        this.valueChange.emit(valueToEmit);\r\n        this._onChange(valueToEmit);\r\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Highlights the selected item. If no option is selected, it will highlight\r\n     * the first item instead.\r\n     */\r\n    _highlightCorrectOption() {\r\n        if (this._keyManager) {\r\n            if (this.empty) {\r\n                this._keyManager.setFirstItemActive();\r\n            }\r\n            else {\r\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\r\n            }\r\n        }\r\n    }\r\n    /** Whether the panel is allowed to open. */\r\n    _canOpen() {\r\n        var _a;\r\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\r\n    }\r\n    /** Focuses the select element. */\r\n    focus(options) {\r\n        this._elementRef.nativeElement.focus(options);\r\n    }\r\n    /** Gets the aria-labelledby for the select panel. */\r\n    _getPanelAriaLabelledby() {\r\n        var _a;\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\r\n        const labelExpression = (labelId ? labelId + ' ' : '');\r\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\r\n    }\r\n    /** Determines the `aria-activedescendant` to be set on the host. */\r\n    _getAriaActiveDescendant() {\r\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n            return this._keyManager.activeItem.id;\r\n        }\r\n        return null;\r\n    }\r\n    /** Gets the aria-labelledby of the select component trigger. */\r\n    _getTriggerAriaLabelledby() {\r\n        var _a;\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\r\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\r\n        if (this.ariaLabelledby) {\r\n            value += ' ' + this.ariaLabelledby;\r\n        }\r\n        return value;\r\n    }\r\n    /** Called when the overlay panel is done animating. */\r\n    _panelDoneAnimating(isOpen) {\r\n        this.openedChange.emit(isOpen);\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    onContainerClick() {\r\n        this.focus();\r\n        this.open();\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get shouldLabelFloat() {\r\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\r\n    }\r\n}\r\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\r\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\r\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\r\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\r\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\r\n_MatSelectBase.ctorParameters = () => [\r\n    { type: ViewportRuler },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone },\r\n    { type: ErrorStateMatcher },\r\n    { type: ElementRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: NgForm, decorators: [{ type: Optional }] },\r\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\r\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\r\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\r\n    { type: LiveAnnouncer },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\r\n];\r\n_MatSelectBase.propDecorators = {\r\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\r\n    panel: [{ type: ViewChild, args: ['panel',] }],\r\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\r\n    panelClass: [{ type: Input }],\r\n    placeholder: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    multiple: [{ type: Input }],\r\n    disableOptionCentering: [{ type: Input }],\r\n    compareWith: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    errorStateMatcher: [{ type: Input }],\r\n    typeaheadDebounceInterval: [{ type: Input }],\r\n    sortComparator: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    openedChange: [{ type: Output }],\r\n    _openedStream: [{ type: Output, args: ['opened',] }],\r\n    _closedStream: [{ type: Output, args: ['closed',] }],\r\n    selectionChange: [{ type: Output }],\r\n    valueChange: [{ type: Output }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_FORM_FIELD]\r\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\r\n                type: Self\r\n            }, {\r\n                type: Optional\r\n            }] }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['tabindex']\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_SELECT_SCROLL_STRATEGY]\r\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_SELECT_CONFIG]\r\n            }] }]; }, { ariaLabel: [{\r\n            type: Input,\r\n            args: ['aria-label']\r\n        }], openedChange: [{\r\n            type: Output\r\n        }], _openedStream: [{\r\n            type: Output,\r\n            args: ['opened']\r\n        }], _closedStream: [{\r\n            type: Output,\r\n            args: ['closed']\r\n        }], selectionChange: [{\r\n            type: Output\r\n        }], valueChange: [{\r\n            type: Output\r\n        }], id: [{\r\n            type: Input\r\n        }], placeholder: [{\r\n            type: Input\r\n        }], required: [{\r\n            type: Input\r\n        }], multiple: [{\r\n            type: Input\r\n        }], disableOptionCentering: [{\r\n            type: Input\r\n        }], compareWith: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }], typeaheadDebounceInterval: [{\r\n            type: Input\r\n        }], trigger: [{\r\n            type: ViewChild,\r\n            args: ['trigger']\r\n        }], panel: [{\r\n            type: ViewChild,\r\n            args: ['panel']\r\n        }], _overlayDir: [{\r\n            type: ViewChild,\r\n            args: [CdkConnectedOverlay]\r\n        }], panelClass: [{\r\n            type: Input\r\n        }], ariaLabelledby: [{\r\n            type: Input,\r\n            args: ['aria-labelledby']\r\n        }], errorStateMatcher: [{\r\n            type: Input\r\n        }], sortComparator: [{\r\n            type: Input\r\n        }] }); })();\r\nclass MatSelect extends _MatSelectBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n        this._scrollTop = 0;\r\n        /** The cached font-size of the trigger element. */\r\n        this._triggerFontSize = 0;\r\n        /** The value of the select panel's transform-origin property. */\r\n        this._transformOrigin = 'top';\r\n        /**\r\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n         * This must be adjusted to align the selected option text over the trigger text.\r\n         * when the panel opens. Will change based on the y-position of the selected option.\r\n         */\r\n        this._offsetY = 0;\r\n        this._positions = [\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'top',\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom',\r\n            },\r\n        ];\r\n    }\r\n    /**\r\n     * Calculates the scroll position of the select's overlay panel.\r\n     *\r\n     * Attempts to center the selected option in the panel. If the option is\r\n     * too high or too low in the panel to be scrolled to the center, it clamps the\r\n     * scroll position to the min or max scroll positions respectively.\r\n     */\r\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n        const halfOptionHeight = itemHeight / 2;\r\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n        // the center of the overlay panel. Half the option height must be re-added to the\r\n        // scrollTop so the option is centered based on its middle, not its top edge.\r\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n    }\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\r\n            if (this.panelOpen) {\r\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        });\r\n    }\r\n    open() {\r\n        if (super._canOpen()) {\r\n            super.open();\r\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n            this._triggerFontSize =\r\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\r\n            this._calculateOverlayPosition();\r\n            // Set the font size on the panel element once it exists.\r\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\r\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\r\n                    this._overlayDir.overlayRef.overlayElement) {\r\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /** Scrolls the active option into view. */\r\n    _scrollOptionIntoView(index) {\r\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\r\n        const itemHeight = this._getItemHeight();\r\n        if (index === 0 && labelCount === 1) {\r\n            // If we've got one group label before the option and we're at the top option,\r\n            // scroll the list to the top. This is better UX than scrolling the list to the\r\n            // top of the option, because it allows the user to read the top group's label.\r\n            this.panel.nativeElement.scrollTop = 0;\r\n        }\r\n        else {\r\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\r\n        }\r\n    }\r\n    _positioningSettled() {\r\n        this._calculateOverlayOffsetX();\r\n        this.panel.nativeElement.scrollTop = this._scrollTop;\r\n    }\r\n    _panelDoneAnimating(isOpen) {\r\n        if (this.panelOpen) {\r\n            this._scrollTop = 0;\r\n        }\r\n        else {\r\n            this._overlayDir.offsetX = 0;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        super._panelDoneAnimating(isOpen);\r\n    }\r\n    _getChangeEvent(value) {\r\n        return new MatSelectChange(this, value);\r\n    }\r\n    /**\r\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n     * This must be adjusted to align the selected option text over the trigger text when\r\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n     * can't be calculated until the panel has been attached, because we need to know the\r\n     * content width in order to constrain the panel within the viewport.\r\n     */\r\n    _calculateOverlayOffsetX() {\r\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        const isRtl = this._isRtl();\r\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n            SELECT_PANEL_PADDING_X * 2;\r\n        let offsetX;\r\n        // Adjust the offset, depending on the option padding.\r\n        if (this.multiple) {\r\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n        }\r\n        else if (this.disableOptionCentering) {\r\n            offsetX = SELECT_PANEL_PADDING_X;\r\n        }\r\n        else {\r\n            let selected = this._selectionModel.selected[0] || this.options.first;\r\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n        }\r\n        // Invert the offset in LTR.\r\n        if (!isRtl) {\r\n            offsetX *= -1;\r\n        }\r\n        // Determine how much the select overflows on each side.\r\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n            + (isRtl ? 0 : paddingWidth);\r\n        // If the element overflows on either side, reduce the offset to allow it to fit.\r\n        if (leftOverflow > 0) {\r\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        else if (rightOverflow > 0) {\r\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        // Set the offset directly in order to avoid having to go through change detection and\r\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\r\n        // blurry content in some browsers.\r\n        this._overlayDir.offsetX = Math.round(offsetX);\r\n        this._overlayDir.overlayRef.updatePosition();\r\n    }\r\n    /**\r\n     * Calculates the y-offset of the select's overlay panel in relation to the\r\n     * top start corner of the trigger. It has to be adjusted in order for the\r\n     * selected option to be aligned over the trigger when the panel opens.\r\n     */\r\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n        let optionOffsetFromPanelTop;\r\n        // Disable offset if requested by user by returning 0 as value to offset\r\n        if (this.disableOptionCentering) {\r\n            return 0;\r\n        }\r\n        if (this._scrollTop === 0) {\r\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n        }\r\n        else if (this._scrollTop === maxScroll) {\r\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n            // The first item is partially out of the viewport. Therefore we need to calculate what\r\n            // portion of it is shown in the viewport and account for it in our offset.\r\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n            // Because the panel height is longer than the height of the options alone,\r\n            // there is always extra padding at the top or bottom of the panel. When\r\n            // scrolled to the very bottom, this padding is at the top of the panel and\r\n            // must be added to the offset.\r\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n        }\r\n        else {\r\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n            // its offset will be the scroll buffer minus the half height that was added to\r\n            // center it.\r\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n        }\r\n        // The final offset is the option's offset from the top, adjusted for the height difference,\r\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\r\n        // The value is rounded to prevent some browsers from blurring the content.\r\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\r\n    }\r\n    /**\r\n     * Checks that the attempted overlay position will fit within the viewport.\r\n     * If it will not fit, tries to adjust the scroll position and the associated\r\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n     * sets the offset back to 0 to allow the fallback position to take over.\r\n     */\r\n    _checkOverlayWithinViewport(maxScroll) {\r\n        const itemHeight = this._getItemHeight();\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n        const panelHeightTop = Math.abs(this._offsetY);\r\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n        if (panelHeightBottom > bottomSpaceAvailable) {\r\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n        }\r\n        else if (panelHeightTop > topSpaceAvailable) {\r\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n        }\r\n        else {\r\n            this._transformOrigin = this._getOriginBasedOnOption();\r\n        }\r\n    }\r\n    /** Adjusts the overlay panel up to fit in the viewport. */\r\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n        // Scrolls the panel up by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel up into the viewport.\r\n        this._scrollTop -= distanceBelowViewport;\r\n        this._offsetY -= distanceBelowViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n        // effect.\r\n        if (this._scrollTop <= 0) {\r\n            this._scrollTop = 0;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% bottom 0px`;\r\n        }\r\n    }\r\n    /** Adjusts the overlay panel down to fit in the viewport. */\r\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n        // Scrolls the panel down by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel down into the viewport.\r\n        this._scrollTop += distanceAboveViewport;\r\n        this._offsetY += distanceAboveViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n        // to take effect.\r\n        if (this._scrollTop >= maxScroll) {\r\n            this._scrollTop = maxScroll;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% top 0px`;\r\n            return;\r\n        }\r\n    }\r\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n    _calculateOverlayPosition() {\r\n        const itemHeight = this._getItemHeight();\r\n        const items = this._getItemCount();\r\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        const scrollContainerHeight = items * itemHeight;\r\n        // The farthest the panel can be scrolled before it hits the bottom\r\n        const maxScroll = scrollContainerHeight - panelHeight;\r\n        // If no value is selected we open the popup to the first item.\r\n        let selectedOptionOffset;\r\n        if (this.empty) {\r\n            selectedOptionOffset = 0;\r\n        }\r\n        else {\r\n            selectedOptionOffset =\r\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\r\n        }\r\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\r\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n        // center of the overlay panel rather than the top.\r\n        const scrollBuffer = panelHeight / 2;\r\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._checkOverlayWithinViewport(maxScroll);\r\n    }\r\n    /** Sets the transform origin point based on the selected option. */\r\n    _getOriginBasedOnOption() {\r\n        const itemHeight = this._getItemHeight();\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n        return `50% ${originY}px 0px`;\r\n    }\r\n    /** Calculates the height of the select's options. */\r\n    _getItemHeight() {\r\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    }\r\n    /** Calculates the amount of items in the select. This includes options and group labels. */\r\n    _getItemCount() {\r\n        return this.options.length + this.optionGroups.length;\r\n    }\r\n}\r\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\r\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\r\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\r\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\r\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            { provide: MatFormFieldControl, useExisting: MatSelect },\r\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\r\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 9, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c2);\r\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\r\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\r\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\r\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\r\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\r\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\r\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\r\n    } if (rf & 2) {\r\n        const _r0 = ɵngcc0.ɵɵreference(1);\r\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\r\n        ɵngcc0.ɵɵadvance(3);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n        ɵngcc0.ɵɵadvance(3);\r\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\r\n    } }, directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], encapsulation: 2, data: { animation: [\r\n            matSelectAnimations.transformPanelWrap,\r\n            matSelectAnimations.transformPanel\r\n        ] }, changeDetection: 0 });\r\nMatSelect.propDecorators = {\r\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\r\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\r\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-select',\r\n                exportAs: 'matSelect',\r\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\r\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'role': 'combobox',\r\n                    'aria-autocomplete': 'none',\r\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\r\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\r\n                    // value. At some point we should try to switch it back to being `listbox`.\r\n                    'aria-haspopup': 'true',\r\n                    'class': 'mat-select',\r\n                    '[attr.id]': 'id',\r\n                    '[attr.tabindex]': 'tabIndex',\r\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\r\n                    '[attr.aria-expanded]': 'panelOpen',\r\n                    '[attr.aria-label]': 'ariaLabel || null',\r\n                    '[attr.aria-required]': 'required.toString()',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[attr.aria-invalid]': 'errorState',\r\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n                    '[class.mat-select-disabled]': 'disabled',\r\n                    '[class.mat-select-invalid]': 'errorState',\r\n                    '[class.mat-select-required]': 'required',\r\n                    '[class.mat-select-empty]': 'empty',\r\n                    '[class.mat-select-multiple]': 'multiple',\r\n                    '(keydown)': '_handleKeydown($event)',\r\n                    '(focus)': '_onFocus()',\r\n                    '(blur)': '_onBlur()'\r\n                },\r\n                animations: [\r\n                    matSelectAnimations.transformPanelWrap,\r\n                    matSelectAnimations.transformPanel\r\n                ],\r\n                providers: [\r\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\r\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\r\n                ],\r\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\r\n            }]\r\n    }], null, { options: [{\r\n            type: ContentChildren,\r\n            args: [MatOption, { descendants: true }]\r\n        }], optionGroups: [{\r\n            type: ContentChildren,\r\n            args: [MAT_OPTGROUP, { descendants: true }]\r\n        }], customTrigger: [{\r\n            type: ContentChild,\r\n            args: [MAT_SELECT_TRIGGER]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatSelectModule {\r\n}\r\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\r\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\r\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\r\n            CommonModule,\r\n            OverlayModule,\r\n            MatOptionModule,\r\n            MatCommonModule,\r\n        ], CdkScrollableModule,\r\n        MatFormFieldModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                    OverlayModule,\r\n                    MatOptionModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [\r\n                    CdkScrollableModule,\r\n                    MatFormFieldModule,\r\n                    MatSelect,\r\n                    MatSelectTrigger,\r\n                    MatOptionModule,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [MatSelect, MatSelectTrigger],\r\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\r\n        OverlayModule,\r\n        MatOptionModule,\r\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\r\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\r\n        MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\r\n\r\n//# sourceMappingURL=select.js.map"],"sourceRoot":"webpack:///"}