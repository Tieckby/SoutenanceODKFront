{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/sort.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAoC;AAC2L;AAC/J;AACF;AACT;AAC0E;AACzF;AAC2E;AAClE;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACI;AACF;;AAE1C;AACA,gDAAgD;AAChD,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,+GAA+G,CAAC,2DAAoB,MAAM,gBAAgB,2DAAoB,GAAG,iDAAiD,EAAE,8GAA8G,CAAC,2DAAoB,MAAM,gBAAgB,2DAAoB,GAAG,kDAAkD,EAAE;AAC7d,IAAI,uDAAgB;AACpB,IAAI,4DAAqB;AACzB,IAAI,uDAAgB;AACpB,IAAI,uDAAgB;AACpB,IAAI,uDAAgB;AACpB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA;AACA,mEAAmE,GAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAc;AACnD;AACA;AACA,qBAAqB,wEAAgB,CAAC,qEAAa;AACnD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAY;AAC1C;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,yBAAyB,sBAAsB,4EAAqB,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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,0DAAK,OAAO,iEAAY,KAAK,iBAAiB;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yCAAO;AAClC;AACA;AACA,gEAAgE,uCAAuC;AACvG,0BAA0B,gEAAqB,EAAE,gDAAgD,gCAAgC,EAAE,gDAAgD;AACnL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,gBAAgB,qBAAqB;AACrC,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAQ,QAAQ,mDAAQ;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAa;AACxC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,yBAAyB,sBAAsB,4EAAqB,IAAI;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8DAA8D;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mDAAmD;AACtG;AACA;AACA,mDAAmD,mDAAmD;AACtG;AACA;AACA;AACA;AACA;AACA;A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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_sort_js-es2015.js","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\r\nimport { FocusMonitor, AriaDescriber } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\r\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\r\nimport { Subject, merge } from 'rxjs';\r\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @docs-private */\r\nimport * as Éµngcc0 from '@angular/core';\r\nimport * as Éµngcc1 from '@angular/cdk/a11y';\r\nimport * as Éµngcc2 from '@angular/common';\r\n\r\nconst _c0 = [\"mat-sort-header\", \"\"];\r\nfunction MatSortHeader_div_3_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = Éµngcc0.ÉµÉµgetCurrentView();\r\n    Éµngcc0.ÉµÉµelementStart(0, \"div\", 3);\r\n    Éµngcc0.ÉµÉµlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() { Éµngcc0.ÉµÉµrestoreView(_r2); const ctx_r1 = Éµngcc0.ÉµÉµnextContext(); return ctx_r1._disableViewStateAnimation = true; })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() { Éµngcc0.ÉµÉµrestoreView(_r2); const ctx_r3 = Éµngcc0.ÉµÉµnextContext(); return ctx_r3._disableViewStateAnimation = false; });\r\n    Éµngcc0.ÉµÉµelement(1, \"div\", 4);\r\n    Éµngcc0.ÉµÉµelementStart(2, \"div\", 5);\r\n    Éµngcc0.ÉµÉµelement(3, \"div\", 6);\r\n    Éµngcc0.ÉµÉµelement(4, \"div\", 7);\r\n    Éµngcc0.ÉµÉµelement(5, \"div\", 8);\r\n    Éµngcc0.ÉµÉµelementEnd();\r\n    Éµngcc0.ÉµÉµelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = Éµngcc0.ÉµÉµnextContext();\r\n    Éµngcc0.ÉµÉµproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\r\n    Éµngcc0.ÉµÉµadvance(2);\r\n    Éµngcc0.ÉµÉµproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\r\n    Éµngcc0.ÉµÉµadvance(1);\r\n    Éµngcc0.ÉµÉµproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\r\n    Éµngcc0.ÉµÉµadvance(1);\r\n    Éµngcc0.ÉµÉµproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\r\n} }\r\nconst _c1 = [\"*\"];\r\nfunction getSortDuplicateSortableIdError(id) {\r\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\r\n}\r\n/** @docs-private */\r\nfunction getSortHeaderNotContainedWithinSortError() {\r\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\r\n}\r\n/** @docs-private */\r\nfunction getSortHeaderMissingIdError() {\r\n    return Error(`MatSortHeader must be provided with a unique id.`);\r\n}\r\n/** @docs-private */\r\nfunction getSortInvalidDirectionError(direction) {\r\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token to be used to override the default options for `mat-sort`. */\r\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\r\n// Boilerplate for applying mixins to MatSort.\r\n/** @docs-private */\r\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\r\n}));\r\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\r\nclass MatSort extends _MatSortBase {\r\n    constructor(_defaultOptions) {\r\n        super();\r\n        this._defaultOptions = _defaultOptions;\r\n        /** Collection of all registered sortables that this directive manages. */\r\n        this.sortables = new Map();\r\n        /** Used to notify any child components listening to state changes. */\r\n        this._stateChanges = new Subject();\r\n        /**\r\n         * The direction to set when an MatSortable is initially sorted.\r\n         * May be overriden by the MatSortable's sort start.\r\n         */\r\n        this.start = 'asc';\r\n        this._direction = '';\r\n        /** Event emitted when the user changes either the active sort or sort direction. */\r\n        this.sortChange = new EventEmitter();\r\n    }\r\n    /** The sort direction of the currently active MatSortable. */\r\n    get direction() { return this._direction; }\r\n    set direction(direction) {\r\n        if (direction && direction !== 'asc' && direction !== 'desc' &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getSortInvalidDirectionError(direction);\r\n        }\r\n        this._direction = direction;\r\n    }\r\n    /**\r\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n     * May be overriden by the MatSortable's disable clear input.\r\n     */\r\n    get disableClear() { return this._disableClear; }\r\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n    /**\r\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n     * collection of MatSortables.\r\n     */\r\n    register(sortable) {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            if (!sortable.id) {\r\n                throw getSortHeaderMissingIdError();\r\n            }\r\n            if (this.sortables.has(sortable.id)) {\r\n                throw getSortDuplicateSortableIdError(sortable.id);\r\n            }\r\n        }\r\n        this.sortables.set(sortable.id, sortable);\r\n    }\r\n    /**\r\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n     * collection of contained MatSortables.\r\n     */\r\n    deregister(sortable) {\r\n        this.sortables.delete(sortable.id);\r\n    }\r\n    /** Sets the active sort id and determines the new sort direction. */\r\n    sort(sortable) {\r\n        if (this.active != sortable.id) {\r\n            this.active = sortable.id;\r\n            this.direction = sortable.start ? sortable.start : this.start;\r\n        }\r\n        else {\r\n            this.direction = this.getNextSortDirection(sortable);\r\n        }\r\n        this.sortChange.emit({ active: this.active, direction: this.direction });\r\n    }\r\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n    getNextSortDirection(sortable) {\r\n        var _a, _b, _c;\r\n        if (!sortable) {\r\n            return '';\r\n        }\r\n        // Get the sort direction cycle with the potential sortable overrides.\r\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\r\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n        // Get and return the next direction in the cycle\r\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\r\n            nextDirectionIndex = 0;\r\n        }\r\n        return sortDirectionCycle[nextDirectionIndex];\r\n    }\r\n    ngOnInit() {\r\n        this._markInitialized();\r\n    }\r\n    ngOnChanges() {\r\n        this._stateChanges.next();\r\n    }\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nMatSort.Éµfac = function MatSort_Factory(t) { return new (t || MatSort)(Éµngcc0.ÉµÉµdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8)); };\r\nMatSort.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], hostAttrs: [1, \"mat-sort\"], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature, Éµngcc0.ÉµÉµNgOnChangesFeature] });\r\nMatSort.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SORT_DEFAULT_OPTIONS,] }] }\r\n];\r\nMatSort.propDecorators = {\r\n    active: [{ type: Input, args: ['matSortActive',] }],\r\n    start: [{ type: Input, args: ['matSortStart',] }],\r\n    direction: [{ type: Input, args: ['matSortDirection',] }],\r\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\r\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatSort, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[matSort]',\r\n                exportAs: 'matSort',\r\n                host: { 'class': 'mat-sort' },\r\n                inputs: ['disabled: matSortDisabled']\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_SORT_DEFAULT_OPTIONS]\r\n            }] }]; }, { start: [{\r\n            type: Input,\r\n            args: ['matSortStart']\r\n        }], sortChange: [{\r\n            type: Output,\r\n            args: ['matSortChange']\r\n        }], direction: [{\r\n            type: Input,\r\n            args: ['matSortDirection']\r\n        }], disableClear: [{\r\n            type: Input,\r\n            args: ['matSortDisableClear']\r\n        }], active: [{\r\n            type: Input,\r\n            args: ['matSortActive']\r\n        }] }); })();\r\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\r\nfunction getSortDirectionCycle(start, disableClear) {\r\n    let sortOrder = ['asc', 'desc'];\r\n    if (start == 'desc') {\r\n        sortOrder.reverse();\r\n    }\r\n    if (!disableClear) {\r\n        sortOrder.push('');\r\n    }\r\n    return sortOrder;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n    AnimationCurves.STANDARD_CURVE;\r\n/**\r\n * Animations used by MatSort.\r\n * @docs-private\r\n */\r\nconst matSortAnimations = {\r\n    /** Animation that moves the sort indicator. */\r\n    indicator: trigger('indicator', [\r\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\r\n        // 10px is the height of the sort indicator, minus the width of the pointers\r\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\r\n    leftPointer: trigger('leftPointer', [\r\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\r\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\r\n    rightPointer: trigger('rightPointer', [\r\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\r\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /** Animation that controls the arrow opacity. */\r\n    arrowOpacity: trigger('arrowOpacity', [\r\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\r\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\r\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\r\n        // Transition between all states except for immediate transitions\r\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\r\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\r\n    ]),\r\n    /**\r\n     * Animation for the translation of the arrow as a whole. States are separated into two\r\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n     * peek, and active. The other states define a specific animation (source-to-destination)\r\n     * and are determined as a function of their prev user-perceived state and what the next state\r\n     * should be.\r\n     */\r\n    arrowPosition: trigger('arrowPosition', [\r\n        // Hidden Above => Hint Center\r\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(-25%)' }),\r\n            style({ transform: 'translateY(0)' })\r\n        ]))),\r\n        // Hint Center => Hidden Below\r\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(0)' }),\r\n            style({ transform: 'translateY(25%)' })\r\n        ]))),\r\n        // Hidden Below => Hint Center\r\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(25%)' }),\r\n            style({ transform: 'translateY(0)' })\r\n        ]))),\r\n        // Hint Center => Hidden Above\r\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(0)' }),\r\n            style({ transform: 'translateY(-25%)' })\r\n        ]))),\r\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\r\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\r\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\r\n    ]),\r\n    /** Necessary trigger that calls animate on children animations. */\r\n    allowChildren: trigger('allowChildren', [\r\n        transition('* <=> *', [\r\n            query('@*', animateChild(), { optional: true })\r\n        ])\r\n    ]),\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\nclass MatSortHeaderIntl {\r\n    constructor() {\r\n        /**\r\n         * Stream that emits whenever the labels here are changed. Use this to notify\r\n         * components if the labels have changed after initialization.\r\n         */\r\n        this.changes = new Subject();\r\n    }\r\n}\r\nMatSortHeaderIntl.Éµfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\r\nMatSortHeaderIntl.Éµprov = i0.ÉµÉµdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatSortHeaderIntl, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return []; }, null); })();\r\n/** @docs-private */\r\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\r\n    return parentIntl || new MatSortHeaderIntl();\r\n}\r\n/** @docs-private */\r\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\r\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n    provide: MatSortHeaderIntl,\r\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Boilerplate for applying mixins to the sort header.\r\n/** @docs-private */\r\nconst _MatSortHeaderBase = mixinDisabled(class {\r\n});\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\nclass MatSortHeader extends _MatSortHeaderBase {\r\n    constructor(\r\n    /**\r\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\r\n     * @breaking-change 13.0.0\r\n     */\r\n    _intl, _changeDetectorRef, \r\n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _sort, _columnDef, _focusMonitor, _elementRef, \r\n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\r\n    _ariaDescriber) {\r\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\r\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\r\n        // and we want to avoid having the sort header depending on the CDK table because\r\n        // of this single reference.\r\n        super();\r\n        this._intl = _intl;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._sort = _sort;\r\n        this._columnDef = _columnDef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._elementRef = _elementRef;\r\n        this._ariaDescriber = _ariaDescriber;\r\n        /**\r\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n         * provide an affordance that the header is sortable by showing on focus and hover.\r\n         */\r\n        this._showIndicatorHint = false;\r\n        /**\r\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\r\n         * position through the animation. If animations are currently disabled, the fromState is removed\r\n         * so that there is no animation displayed.\r\n         */\r\n        this._viewState = {};\r\n        /** The direction the arrow should be facing according to the current state. */\r\n        this._arrowDirection = '';\r\n        /**\r\n         * Whether the view state animation should show the transition between the `from` and `to` states.\r\n         */\r\n        this._disableViewStateAnimation = false;\r\n        /** Sets the position of the arrow that displays when sorted. */\r\n        this.arrowPosition = 'after';\r\n        // Default the action description to \"Sort\" because it's better than nothing.\r\n        // Without a description, the button's label comes from the sort header text content,\r\n        // which doesn't give any indication that it performs a sorting operation.\r\n        this._sortActionDescription = 'Sort';\r\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getSortHeaderNotContainedWithinSortError();\r\n        }\r\n        this._handleStateChanges();\r\n    }\r\n    /**\r\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\r\n     * describe the action that will occur when the user clicks the sort header.\r\n     */\r\n    get sortActionDescription() {\r\n        return this._sortActionDescription;\r\n    }\r\n    set sortActionDescription(value) {\r\n        this._updateSortActionDescription(value);\r\n    }\r\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n    get disableClear() { return this._disableClear; }\r\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\r\n    ngOnInit() {\r\n        if (!this.id && this._columnDef) {\r\n            this.id = this._columnDef.name;\r\n        }\r\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n        this._updateArrowDirection();\r\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\r\n        this._sort.register(this);\r\n        this._sortButton = this._elementRef.nativeElement.querySelector('[role=\"button\"]');\r\n        this._updateSortActionDescription(this._sortActionDescription);\r\n    }\r\n    ngAfterViewInit() {\r\n        // We use the focus monitor because we also want to style\r\n        // things differently based on the focus origin.\r\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\r\n            const newState = !!origin;\r\n            if (newState !== this._showIndicatorHint) {\r\n                this._setIndicatorHintVisible(newState);\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        this._sort.deregister(this);\r\n        this._rerenderSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n     */\r\n    _setIndicatorHintVisible(visible) {\r\n        // No-op if the sort header is disabled - should not make the hint visible.\r\n        if (this._isDisabled() && visible) {\r\n            return;\r\n        }\r\n        this._showIndicatorHint = visible;\r\n        if (!this._isSorted()) {\r\n            this._updateArrowDirection();\r\n            if (this._showIndicatorHint) {\r\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\r\n            }\r\n            else {\r\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the animation transition view state for the arrow's position and opacity. If the\r\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n     * no animation appears.\r\n     */\r\n    _setAnimationTransitionState(viewState) {\r\n        this._viewState = viewState || {};\r\n        // If the animation for arrow position state (opacity/translation) should be disabled,\r\n        // remove the fromState so that it jumps right to the toState.\r\n        if (this._disableViewStateAnimation) {\r\n            this._viewState = { toState: viewState.toState };\r\n        }\r\n    }\r\n    /** Triggers the sort on this sort header and removes the indicator hint. */\r\n    _toggleOnInteraction() {\r\n        this._sort.sort(this);\r\n        // Do not show the animation if the header was already shown in the right position.\r\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = true;\r\n        }\r\n    }\r\n    _handleClick() {\r\n        if (!this._isDisabled()) {\r\n            this._sort.sort(this);\r\n        }\r\n    }\r\n    _handleKeydown(event) {\r\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\r\n            event.preventDefault();\r\n            this._toggleOnInteraction();\r\n        }\r\n    }\r\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n    _isSorted() {\r\n        return this._sort.active == this.id &&\r\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n    }\r\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n    _getArrowDirectionState() {\r\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\r\n    }\r\n    /** Returns the arrow position state (opacity, translation). */\r\n    _getArrowViewState() {\r\n        const fromState = this._viewState.fromState;\r\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\r\n    }\r\n    /**\r\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n     * active sorted direction. The reason this is updated through a function is because the direction\r\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n     * preserving its direction, even though the next sort direction is actually different and should\r\n     * only be changed once the arrow displays again (hint or activation).\r\n     */\r\n    _updateArrowDirection() {\r\n        this._arrowDirection = this._isSorted() ?\r\n            this._sort.direction :\r\n            (this.start || this._sort.start);\r\n    }\r\n    _isDisabled() {\r\n        return this._sort.disabled || this.disabled;\r\n    }\r\n    /**\r\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n     * says that the aria-sort property should only be present on one header at a time, so removing\r\n     * ensures this is true.\r\n     */\r\n    _getAriaSortAttribute() {\r\n        if (!this._isSorted()) {\r\n            return 'none';\r\n        }\r\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\r\n    }\r\n    /** Whether the arrow inside the sort header should be rendered. */\r\n    _renderArrow() {\r\n        return !this._isDisabled() || this._isSorted();\r\n    }\r\n    _updateSortActionDescription(newDescription) {\r\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\r\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\r\n        // for every *cell* in the table, creating a lot of unnecessary noise.\r\n        var _a, _b;\r\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\r\n        // nothing to update in the DOM.\r\n        if (this._sortButton) {\r\n            // removeDescription will no-op if there is no existing message.\r\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\r\n            (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\r\n            (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\r\n        }\r\n        this._sortActionDescription = newDescription;\r\n    }\r\n    /** Handles changes in the sorting state. */\r\n    _handleStateChanges() {\r\n        this._rerenderSubscription =\r\n            merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\r\n                if (this._isSorted()) {\r\n                    this._updateArrowDirection();\r\n                    // Do not show the animation if the header was already shown in the right position.\r\n                    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n                        this._disableViewStateAnimation = true;\r\n                    }\r\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\r\n                    this._showIndicatorHint = false;\r\n                }\r\n                // If this header was recently active and now no longer sorted, animate away the arrow.\r\n                if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\r\n                    this._disableViewStateAnimation = false;\r\n                    this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\r\n                }\r\n                this._changeDetectorRef.markForCheck();\r\n            });\r\n    }\r\n}\r\nMatSortHeader.Éµfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(Éµngcc0.ÉµÉµdirectiveInject(MatSortHeaderIntl), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ChangeDetectorRef), Éµngcc0.ÉµÉµdirectiveInject(MatSort, 8), Éµngcc0.ÉµÉµdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc1.FocusMonitor), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(AriaDescriber, 8)); };\r\nMatSortHeader.Éµcmp = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostAttrs: [1, \"mat-sort-header\"], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\r\n        Éµngcc0.ÉµÉµlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\r\n    } if (rf & 2) {\r\n        Éµngcc0.ÉµÉµattribute(\"aria-sort\", ctx._getAriaSortAttribute());\r\n        Éµngcc0.ÉµÉµclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\r\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [Éµngcc0.ÉµÉµInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 6, consts: [[\"role\", \"button\", 1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\r\n        Éµngcc0.ÉµÉµprojectionDef();\r\n        Éµngcc0.ÉµÉµelementStart(0, \"div\", 0);\r\n        Éµngcc0.ÉµÉµelementStart(1, \"div\", 1);\r\n        Éµngcc0.ÉµÉµprojection(2);\r\n        Éµngcc0.ÉµÉµelementEnd();\r\n        Éµngcc0.ÉµÉµtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\r\n        Éµngcc0.ÉµÉµelementEnd();\r\n    } if (rf & 2) {\r\n        Éµngcc0.ÉµÉµclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\r\n        Éµngcc0.ÉµÉµattribute(\"tabindex\", ctx._isDisabled() ? null : 0);\r\n        Éµngcc0.ÉµÉµadvance(3);\r\n        Éµngcc0.ÉµÉµproperty(\"ngIf\", ctx._renderArrow());\r\n    } }, directives: [Éµngcc2.NgIf], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], encapsulation: 2, data: { animation: [\r\n            matSortAnimations.indicator,\r\n            matSortAnimations.leftPointer,\r\n            matSortAnimations.rightPointer,\r\n            matSortAnimations.arrowOpacity,\r\n            matSortAnimations.arrowPosition,\r\n            matSortAnimations.allowChildren,\r\n        ] }, changeDetection: 0 });\r\nMatSortHeader.ctorParameters = () => [\r\n    { type: MatSortHeaderIntl },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatSort, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\r\n    { type: FocusMonitor },\r\n    { type: ElementRef },\r\n    { type: AriaDescriber, decorators: [{ type: Inject, args: [AriaDescriber,] }, { type: Optional }] }\r\n];\r\nMatSortHeader.propDecorators = {\r\n    id: [{ type: Input, args: ['mat-sort-header',] }],\r\n    arrowPosition: [{ type: Input }],\r\n    start: [{ type: Input }],\r\n    sortActionDescription: [{ type: Input }],\r\n    disableClear: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatSortHeader, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: '[mat-sort-header]',\r\n                exportAs: 'matSortHeader',\r\n                template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\r\n                host: {\r\n                    'class': 'mat-sort-header',\r\n                    '(click)': '_handleClick()',\r\n                    '(keydown)': '_handleKeydown($event)',\r\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\r\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\r\n                },\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                inputs: ['disabled'],\r\n                animations: [\r\n                    matSortAnimations.indicator,\r\n                    matSortAnimations.leftPointer,\r\n                    matSortAnimations.rightPointer,\r\n                    matSortAnimations.arrowOpacity,\r\n                    matSortAnimations.arrowPosition,\r\n                    matSortAnimations.allowChildren,\r\n                ],\r\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: Éµngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\r\n                type: Optional\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\r\n            }, {\r\n                type: Optional\r\n            }] }, { type: Éµngcc1.FocusMonitor }, { type: Éµngcc0.ElementRef }, { type: Éµngcc1.AriaDescriber, decorators: [{\r\n                type: Inject,\r\n                args: [AriaDescriber]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, { arrowPosition: [{\r\n            type: Input\r\n        }], sortActionDescription: [{\r\n            type: Input\r\n        }], disableClear: [{\r\n            type: Input\r\n        }], id: [{\r\n            type: Input,\r\n            args: ['mat-sort-header']\r\n        }], start: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatSortModule {\r\n}\r\nMatSortModule.Éµfac = function MatSortModule_Factory(t) { return new (t || MatSortModule)(); };\r\nMatSortModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: MatSortModule });\r\nMatSortModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule, MatCommonModule]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(MatSortModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [CommonModule, MatCommonModule],\r\n                exports: [MatSort, MatSortHeader],\r\n                declarations: [MatSort, MatSortHeader],\r\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort, MatSortHeader]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSort, MatSortHeader]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\r\n\r\n//# sourceMappingURL=sort.js.map"],"sourceRoot":"webpack:///"}