{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js"],"names":["MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","trigger","state","style","opacity","transform","transition","animate","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_animationStateChanged","EventEmitter","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_setupFocusTrap","_capturePreviouslyFocusedElement","_focusDialogContainer","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","_getFocusedElementPierceShadowDom","element","body","contains","focusVia","destroy","create","BasePortalOutlet","ɵfac","_MatDialogContainerBase_Factory","t","DOCUMENT","ɵdir","type","viewQuery","_MatDialogContainerBase_Query","CdkPortalOutlet","_t","first","features","ctorParameters","ElementRef","FocusTrapFactory","ChangeDetectorRef","undefined","decorators","Optional","Inject","args","FocusMonitor","propDecorators","ViewChild","Directive","MatDialogContainer","arguments","_state","toState","totalTime","_trapFocus","next","_restoreFocus","markForCheck","ɵMatDialogContainer_BaseFactory","MatDialogContainer_Factory","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","decls","vars","consts","template","MatDialogContainer_Template","directives","styles","encapsulation","animation","Component","selector","ViewEncapsulation","changeDetection","ChangeDetectionStrategy","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","Subject","_afterClosed","_beforeClosed","pipe","filter","event","take","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","_startExitAnimation","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","updateSize","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","close","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","openDialogs","length","_getAfterAllClosed","startWith","_scrollStrategy","afterOpened","parent","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","_initializeWithAttachedContent","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","Injector","providers","useValue","containerPortal","ComponentPortal","componentFactoryResolver","containerRef","attach","instance","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","get","Directionality","InjectFlags","value","change","of","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","_MatDialogBase_Factory","OverlayContainer","Type","MatDialog","location","defaultOptions","parentDialog","MatDialog_Factory","ɵprov","token","factory","Location","SkipSelf","Injectable","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","MatDialogClose_Factory","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","_onButtonClick","inputs","_matDialogClose","exportAs","Input","MatDialogTitle","_dialogRef","Promise","resolve","then","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵinj","imports","OverlayModule","PortalModule","MatCommonModule","NgModule","exports","declarations","entryComponents","ngJitMode","MatProgressSpinner__svg_circle_1_Template","ctx_r0","_spinnerAnimationLabel","_getStrokeDashOffset","_getStrokeCircumference","_getCircleStrokeWidth","_getCircleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","_c0","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","mixinColor","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","elementRef","platform","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","_getSpinnerAnimationLabel","has","head","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","size","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","newValue","Math","max","min","_getShadowRoot","animationClass","add","viewBox","PI","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","MatProgressSpinner_Factory","ANIMATION_MODULE_TYPE","MatProgressSpinner_HostBindings","color","MatProgressSpinner_Template","_getViewBox","WeakMap","Platform","String","MatSpinner","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","MatProgressSpinnerModule_Factory","CommonModule"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_dialog_js-node_modules_angular_ma-8fa89f-es5.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\r\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\r\nimport { EventEmitter, Directive, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Type, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { DOCUMENT, Location } from '@angular/common';\r\nimport { Subject, defer, of } from 'rxjs';\r\nimport { filter, take, startWith } from 'rxjs/operators';\r\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\r\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/a11y';\r\nimport * as ɵngcc2 from '@angular/cdk/portal';\r\nimport * as ɵngcc3 from '@angular/cdk/overlay';\r\nimport * as ɵngcc4 from '@angular/common';\r\n\r\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\r\nclass MatDialogConfig {\r\n    constructor() {\r\n        /** The ARIA role of the dialog element. */\r\n        this.role = 'dialog';\r\n        /** Custom class for the overlay pane. */\r\n        this.panelClass = '';\r\n        /** Whether the dialog has a backdrop. */\r\n        this.hasBackdrop = true;\r\n        /** Custom class for the backdrop. */\r\n        this.backdropClass = '';\r\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\r\n        this.disableClose = false;\r\n        /** Width of the dialog. */\r\n        this.width = '';\r\n        /** Height of the dialog. */\r\n        this.height = '';\r\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\r\n        this.maxWidth = '80vw';\r\n        /** Data being injected into the child component. */\r\n        this.data = null;\r\n        /** ID of the element that describes the dialog. */\r\n        this.ariaDescribedBy = null;\r\n        /** ID of the element that labels the dialog. */\r\n        this.ariaLabelledBy = null;\r\n        /** Aria label to assign to the dialog element. */\r\n        this.ariaLabel = null;\r\n        /** Whether the dialog should focus the first focusable element on open. */\r\n        this.autoFocus = true;\r\n        /**\r\n         * Whether the dialog should restore focus to the\r\n         * previously-focused element, after it's closed.\r\n         */\r\n        this.restoreFocus = true;\r\n        /**\r\n         * Whether the dialog should close when the user goes backwards/forwards in history.\r\n         * Note that this usually doesn't include clicking on links (unless the user is using\r\n         * the `HashLocationStrategy`).\r\n         */\r\n        this.closeOnNavigation = true;\r\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Animations used by MatDialog.\r\n * @docs-private\r\n */\r\nconst matDialogAnimations = {\r\n    /** Animation that is applied on the dialog container by default. */\r\n    dialogContainer: trigger('dialogContainer', [\r\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\r\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\r\n        // decimate the animation performance. Leaving it as `none` solves both issues.\r\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\r\n        state('enter', style({ transform: 'none' })),\r\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\r\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\r\n    ])\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * @docs-private\r\n */\r\nfunction throwMatDialogContentAlreadyAttachedError() {\r\n    throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n/**\r\n * Base class for the `MatDialogContainer`. The base class does not implement\r\n * animations as these are left to implementers of the dialog container.\r\n */\r\nclass _MatDialogContainerBase extends BasePortalOutlet {\r\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \r\n    /** The dialog configuration. */\r\n    _config, _focusMonitor) {\r\n        super();\r\n        this._elementRef = _elementRef;\r\n        this._focusTrapFactory = _focusTrapFactory;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._config = _config;\r\n        this._focusMonitor = _focusMonitor;\r\n        /** Emits when an animation state changes. */\r\n        this._animationStateChanged = new EventEmitter();\r\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\r\n        this._elementFocusedBeforeDialogWasOpened = null;\r\n        /**\r\n         * Type of interaction that led to the dialog being closed. This is used to determine\r\n         * whether the focus style will be applied when returning focus to its original location\r\n         * after the dialog is closed.\r\n         */\r\n        this._closeInteractionType = null;\r\n        /**\r\n         * Attaches a DOM portal to the dialog container.\r\n         * @param portal Portal to be attached.\r\n         * @deprecated To be turned into a method.\r\n         * @breaking-change 10.0.0\r\n         */\r\n        this.attachDomPortal = (portal) => {\r\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throwMatDialogContentAlreadyAttachedError();\r\n            }\r\n            return this._portalOutlet.attachDomPortal(portal);\r\n        };\r\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\r\n        this._document = _document;\r\n    }\r\n    /** Initializes the dialog container with the attached content. */\r\n    _initializeWithAttachedContent() {\r\n        this._setupFocusTrap();\r\n        // Save the previously focused element. This element will be re-focused\r\n        // when the dialog closes.\r\n        this._capturePreviouslyFocusedElement();\r\n        // Move focus onto the dialog immediately in order to prevent the user\r\n        // from accidentally opening multiple dialogs at the same time.\r\n        this._focusDialogContainer();\r\n    }\r\n    /**\r\n     * Attach a ComponentPortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    attachComponentPortal(portal) {\r\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throwMatDialogContentAlreadyAttachedError();\r\n        }\r\n        return this._portalOutlet.attachComponentPortal(portal);\r\n    }\r\n    /**\r\n     * Attach a TemplatePortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    attachTemplatePortal(portal) {\r\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throwMatDialogContentAlreadyAttachedError();\r\n        }\r\n        return this._portalOutlet.attachTemplatePortal(portal);\r\n    }\r\n    /** Moves focus back into the dialog if it was moved out. */\r\n    _recaptureFocus() {\r\n        if (!this._containsFocus()) {\r\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\r\n            if (focusContainer) {\r\n                this._elementRef.nativeElement.focus();\r\n            }\r\n        }\r\n    }\r\n    /** Moves the focus inside the focus trap. */\r\n    _trapFocus() {\r\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\r\n        // ready in instances where change detection has to run first. To deal with this, we simply\r\n        // wait for the microtask queue to be empty.\r\n        if (this._config.autoFocus) {\r\n            this._focusTrap.focusInitialElementWhenReady();\r\n        }\r\n        else if (!this._containsFocus()) {\r\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\r\n            // component tried to move focus while the open animation was running. See:\r\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\r\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\r\n            // turned off `autoFocus` in order to move focus themselves.\r\n            this._elementRef.nativeElement.focus();\r\n        }\r\n    }\r\n    /** Restores focus to the element that was focused before the dialog opened. */\r\n    _restoreFocus() {\r\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\r\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n        if (this._config.restoreFocus && previousElement &&\r\n            typeof previousElement.focus === 'function') {\r\n            const activeElement = _getFocusedElementPierceShadowDom();\r\n            const element = this._elementRef.nativeElement;\r\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\r\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\r\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\r\n            // do anything.\r\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\r\n                element.contains(activeElement)) {\r\n                if (this._focusMonitor) {\r\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\r\n                    this._closeInteractionType = null;\r\n                }\r\n                else {\r\n                    previousElement.focus();\r\n                }\r\n            }\r\n        }\r\n        if (this._focusTrap) {\r\n            this._focusTrap.destroy();\r\n        }\r\n    }\r\n    /** Sets up the focus trap. */\r\n    _setupFocusTrap() {\r\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\r\n    }\r\n    /** Captures the element that was focused before the dialog was opened. */\r\n    _capturePreviouslyFocusedElement() {\r\n        if (this._document) {\r\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\r\n        }\r\n    }\r\n    /** Focuses the dialog container. */\r\n    _focusDialogContainer() {\r\n        // Note that there is no focus method when rendering on the server.\r\n        if (this._elementRef.nativeElement.focus) {\r\n            this._elementRef.nativeElement.focus();\r\n        }\r\n    }\r\n    /** Returns whether focus is inside the dialog. */\r\n    _containsFocus() {\r\n        const element = this._elementRef.nativeElement;\r\n        const activeElement = _getFocusedElementPierceShadowDom();\r\n        return element === activeElement || element.contains(activeElement);\r\n    }\r\n}\r\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) { return new (t || _MatDialogContainerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\r\n_MatDialogContainerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogContainerBase, viewQuery: function _MatDialogContainerBase_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, 7);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\r\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\r\n_MatDialogContainerBase.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusTrapFactory },\r\n    { type: ChangeDetectorRef },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: MatDialogConfig },\r\n    { type: FocusMonitor }\r\n];\r\n_MatDialogContainerBase.propDecorators = {\r\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogContainerBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\r\n            type: ViewChild,\r\n            args: [CdkPortalOutlet, { static: true }]\r\n        }] }); })();\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * @docs-private\r\n */\r\nclass MatDialogContainer extends _MatDialogContainerBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** State of the dialog animation. */\r\n        this._state = 'enter';\r\n    }\r\n    /** Callback, invoked whenever an animation on the host completes. */\r\n    _onAnimationDone({ toState, totalTime }) {\r\n        if (toState === 'enter') {\r\n            this._trapFocus();\r\n            this._animationStateChanged.next({ state: 'opened', totalTime });\r\n        }\r\n        else if (toState === 'exit') {\r\n            this._restoreFocus();\r\n            this._animationStateChanged.next({ state: 'closed', totalTime });\r\n        }\r\n    }\r\n    /** Callback, invoked when an animation on the host starts. */\r\n    _onAnimationStart({ toState, totalTime }) {\r\n        if (toState === 'enter') {\r\n            this._animationStateChanged.next({ state: 'opening', totalTime });\r\n        }\r\n        else if (toState === 'exit' || toState === 'void') {\r\n            this._animationStateChanged.next({ state: 'closing', totalTime });\r\n        }\r\n    }\r\n    /** Starts the dialog exit animation. */\r\n    _startExitAnimation() {\r\n        this._state = 'exit';\r\n        // Mark the container for check so it can react if the\r\n        // view container is using OnPush change detection.\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n}\r\nMatDialogContainer.ɵfac = /*@__PURE__*/ function () { let ɵMatDialogContainer_BaseFactory; return function MatDialogContainer_Factory(t) { return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer); }; }();\r\nMatDialogContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._id);\r\n        ɵngcc0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\r\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\r\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\r\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-dialog-container',\r\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                animations: [matDialogAnimations.dialogContainer],\r\n                host: {\r\n                    'class': 'mat-dialog-container',\r\n                    'tabindex': '-1',\r\n                    'aria-modal': 'true',\r\n                    '[id]': '_id',\r\n                    '[attr.role]': '_config.role',\r\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\r\n                    '[attr.aria-label]': '_config.ariaLabel',\r\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\r\n                    '[@dialogContainer]': '_state',\r\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\r\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\r\n                },\r\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// TODO(jelbourn): resizing\r\n// Counter for unique dialog ids.\r\nlet uniqueId = 0;\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n */\r\nclass MatDialogRef {\r\n    constructor(_overlayRef, _containerInstance, \r\n    /** Id of the dialog. */\r\n    id = `mat-dialog-${uniqueId++}`) {\r\n        this._overlayRef = _overlayRef;\r\n        this._containerInstance = _containerInstance;\r\n        this.id = id;\r\n        /** Whether the user is allowed to close the dialog. */\r\n        this.disableClose = this._containerInstance._config.disableClose;\r\n        /** Subject for notifying the user that the dialog has finished opening. */\r\n        this._afterOpened = new Subject();\r\n        /** Subject for notifying the user that the dialog has finished closing. */\r\n        this._afterClosed = new Subject();\r\n        /** Subject for notifying the user that the dialog has started closing. */\r\n        this._beforeClosed = new Subject();\r\n        /** Current state of the dialog. */\r\n        this._state = 0 /* OPEN */;\r\n        // Pass the id along to the container.\r\n        _containerInstance._id = id;\r\n        // Emit when opening animation completes\r\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1))\r\n            .subscribe(() => {\r\n            this._afterOpened.next();\r\n            this._afterOpened.complete();\r\n        });\r\n        // Dispose overlay when closing animation is complete\r\n        _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\r\n            clearTimeout(this._closeFallbackTimeout);\r\n            this._finishDialogClose();\r\n        });\r\n        _overlayRef.detachments().subscribe(() => {\r\n            this._beforeClosed.next(this._result);\r\n            this._beforeClosed.complete();\r\n            this._afterClosed.next(this._result);\r\n            this._afterClosed.complete();\r\n            this.componentInstance = null;\r\n            this._overlayRef.dispose();\r\n        });\r\n        _overlayRef.keydownEvents()\r\n            .pipe(filter(event => {\r\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\r\n        }))\r\n            .subscribe(event => {\r\n            event.preventDefault();\r\n            _closeDialogVia(this, 'keyboard');\r\n        });\r\n        _overlayRef.backdropClick().subscribe(() => {\r\n            if (this.disableClose) {\r\n                this._containerInstance._recaptureFocus();\r\n            }\r\n            else {\r\n                _closeDialogVia(this, 'mouse');\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Close the dialog.\r\n     * @param dialogResult Optional result to return to the dialog opener.\r\n     */\r\n    close(dialogResult) {\r\n        this._result = dialogResult;\r\n        // Transition the backdrop in parallel to the dialog.\r\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1))\r\n            .subscribe(event => {\r\n            this._beforeClosed.next(dialogResult);\r\n            this._beforeClosed.complete();\r\n            this._overlayRef.detachBackdrop();\r\n            // The logic that disposes of the overlay depends on the exit animation completing, however\r\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\r\n            // timeout which will clean everything up if the animation hasn't fired within the specified\r\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\r\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\r\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\r\n        });\r\n        this._state = 1 /* CLOSING */;\r\n        this._containerInstance._startExitAnimation();\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     */\r\n    afterOpened() {\r\n        return this._afterOpened;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished closing.\r\n     */\r\n    afterClosed() {\r\n        return this._afterClosed;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     */\r\n    beforeClosed() {\r\n        return this._beforeClosed;\r\n    }\r\n    /**\r\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n     */\r\n    backdropClick() {\r\n        return this._overlayRef.backdropClick();\r\n    }\r\n    /**\r\n     * Gets an observable that emits when keydown events are targeted on the overlay.\r\n     */\r\n    keydownEvents() {\r\n        return this._overlayRef.keydownEvents();\r\n    }\r\n    /**\r\n     * Updates the dialog's position.\r\n     * @param position New dialog position.\r\n     */\r\n    updatePosition(position) {\r\n        let strategy = this._getPositionStrategy();\r\n        if (position && (position.left || position.right)) {\r\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n        }\r\n        else {\r\n            strategy.centerHorizontally();\r\n        }\r\n        if (position && (position.top || position.bottom)) {\r\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n        }\r\n        else {\r\n            strategy.centerVertically();\r\n        }\r\n        this._overlayRef.updatePosition();\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the dialog's width and height.\r\n     * @param width New width of the dialog.\r\n     * @param height New height of the dialog.\r\n     */\r\n    updateSize(width = '', height = '') {\r\n        this._overlayRef.updateSize({ width, height });\r\n        this._overlayRef.updatePosition();\r\n        return this;\r\n    }\r\n    /** Add a CSS class or an array of classes to the overlay pane. */\r\n    addPanelClass(classes) {\r\n        this._overlayRef.addPanelClass(classes);\r\n        return this;\r\n    }\r\n    /** Remove a CSS class or an array of classes from the overlay pane. */\r\n    removePanelClass(classes) {\r\n        this._overlayRef.removePanelClass(classes);\r\n        return this;\r\n    }\r\n    /** Gets the current state of the dialog's lifecycle. */\r\n    getState() {\r\n        return this._state;\r\n    }\r\n    /**\r\n     * Finishes the dialog close by updating the state of the dialog\r\n     * and disposing the overlay.\r\n     */\r\n    _finishDialogClose() {\r\n        this._state = 2 /* CLOSED */;\r\n        this._overlayRef.dispose();\r\n    }\r\n    /** Fetches the position strategy object from the overlay ref. */\r\n    _getPositionStrategy() {\r\n        return this._overlayRef.getConfig().positionStrategy;\r\n    }\r\n}\r\n/**\r\n * Closes the dialog with the specified interaction type. This is currently not part of\r\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\r\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\r\n */\r\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\r\nfunction _closeDialogVia(ref, interactionType, result) {\r\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\r\n    // For those, we keep the behavior as is and do not deal with the interaction type.\r\n    if (ref._containerInstance !== undefined) {\r\n        ref._containerInstance._closeInteractionType = interactionType;\r\n    }\r\n    return ref.close(result);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token that can be used to access the data that was passed in to a dialog. */\r\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\r\n/** Injection token that can be used to specify default dialog options. */\r\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\r\n/** Injection token that determines the scroll handling while the dialog is open. */\r\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.block();\r\n}\r\n/** @docs-private */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.block();\r\n}\r\n/** @docs-private */\r\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/**\r\n * Base class for dialog services. The base dialog service allows\r\n * for arbitrary dialog refs and dialog container components.\r\n */\r\nclass _MatDialogBase {\r\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken) {\r\n        this._overlay = _overlay;\r\n        this._injector = _injector;\r\n        this._defaultOptions = _defaultOptions;\r\n        this._parentDialog = _parentDialog;\r\n        this._overlayContainer = _overlayContainer;\r\n        this._dialogRefConstructor = _dialogRefConstructor;\r\n        this._dialogContainerType = _dialogContainerType;\r\n        this._dialogDataToken = _dialogDataToken;\r\n        this._openDialogsAtThisLevel = [];\r\n        this._afterAllClosedAtThisLevel = new Subject();\r\n        this._afterOpenedAtThisLevel = new Subject();\r\n        this._ariaHiddenElements = new Map();\r\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\r\n        /**\r\n         * Stream that emits when all open dialog have finished closing.\r\n         * Will emit on subscribe if there are no open dialogs to begin with.\r\n         */\r\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\r\n            this._getAfterAllClosed() :\r\n            this._getAfterAllClosed().pipe(startWith(undefined)));\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    /** Keeps track of the currently-open dialogs. */\r\n    get openDialogs() {\r\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n    }\r\n    /** Stream that emits when a dialog has been opened. */\r\n    get afterOpened() {\r\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n    }\r\n    _getAfterAllClosed() {\r\n        const parent = this._parentDialog;\r\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\r\n    }\r\n    open(componentOrTemplateRef, config) {\r\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n        if (config.id && this.getDialogById(config.id) &&\r\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\r\n        }\r\n        const overlayRef = this._createOverlay(config);\r\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n        if (!this.openDialogs.length) {\r\n            this._hideNonDialogContentFromAssistiveTechnology();\r\n        }\r\n        this.openDialogs.push(dialogRef);\r\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\r\n        this.afterOpened.next(dialogRef);\r\n        // Notify the dialog container that the content has been attached.\r\n        dialogContainer._initializeWithAttachedContent();\r\n        return dialogRef;\r\n    }\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     */\r\n    closeAll() {\r\n        this._closeDialogs(this.openDialogs);\r\n    }\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param id ID to use when looking up the dialog.\r\n     */\r\n    getDialogById(id) {\r\n        return this.openDialogs.find(dialog => dialog.id === id);\r\n    }\r\n    ngOnDestroy() {\r\n        // Only close the dialogs at this level on destroy\r\n        // since the parent service may still be active.\r\n        this._closeDialogs(this._openDialogsAtThisLevel);\r\n        this._afterAllClosedAtThisLevel.complete();\r\n        this._afterOpenedAtThisLevel.complete();\r\n    }\r\n    /**\r\n     * Creates the overlay into which the dialog will be loaded.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the OverlayRef for the created overlay.\r\n     */\r\n    _createOverlay(config) {\r\n        const overlayConfig = this._getOverlayConfig(config);\r\n        return this._overlay.create(overlayConfig);\r\n    }\r\n    /**\r\n     * Creates an overlay config from a dialog config.\r\n     * @param dialogConfig The dialog configuration.\r\n     * @returns The overlay configuration.\r\n     */\r\n    _getOverlayConfig(dialogConfig) {\r\n        const state = new OverlayConfig({\r\n            positionStrategy: this._overlay.position().global(),\r\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n            panelClass: dialogConfig.panelClass,\r\n            hasBackdrop: dialogConfig.hasBackdrop,\r\n            direction: dialogConfig.direction,\r\n            minWidth: dialogConfig.minWidth,\r\n            minHeight: dialogConfig.minHeight,\r\n            maxWidth: dialogConfig.maxWidth,\r\n            maxHeight: dialogConfig.maxHeight,\r\n            disposeOnNavigation: dialogConfig.closeOnNavigation\r\n        });\r\n        if (dialogConfig.backdropClass) {\r\n            state.backdropClass = dialogConfig.backdropClass;\r\n        }\r\n        return state;\r\n    }\r\n    /**\r\n     * Attaches a dialog container to a dialog's already-created overlay.\r\n     * @param overlay Reference to the dialog's underlying overlay.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to a ComponentRef for the attached container.\r\n     */\r\n    _attachDialogContainer(overlay, config) {\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        const injector = Injector.create({\r\n            parent: userInjector || this._injector,\r\n            providers: [{ provide: MatDialogConfig, useValue: config }]\r\n        });\r\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\r\n        const containerRef = overlay.attach(containerPortal);\r\n        return containerRef.instance;\r\n    }\r\n    /**\r\n     * Attaches the user-provided component to the already-created dialog container.\r\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n     *     or a TemplateRef to instantiate as the content.\r\n     * @param dialogContainer Reference to the wrapping dialog container.\r\n     * @param overlayRef Reference to the overlay in which the dialog resides.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n     */\r\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\r\n        // Create a reference to the dialog we're creating in order to give the user a handle\r\n        // to modify and close it.\r\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\r\n        if (componentOrTemplateRef instanceof TemplateRef) {\r\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\r\n        }\r\n        else {\r\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\r\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\r\n            dialogRef.componentInstance = contentRef.instance;\r\n        }\r\n        dialogRef\r\n            .updateSize(config.width, config.height)\r\n            .updatePosition(config.position);\r\n        return dialogRef;\r\n    }\r\n    /**\r\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n     * of a dialog to close itself and, optionally, to return a value.\r\n     * @param config Config object that is used to construct the dialog.\r\n     * @param dialogRef Reference to the dialog.\r\n     * @param dialogContainer Dialog container element that wraps all of the contents.\r\n     * @returns The custom injector that can be used inside the dialog.\r\n     */\r\n    _createInjector(config, dialogRef, dialogContainer) {\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        // The dialog container should be provided as the dialog container and the dialog's\r\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\r\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\r\n        // container is explicitly provided in the injector.\r\n        const providers = [\r\n            { provide: this._dialogContainerType, useValue: dialogContainer },\r\n            { provide: this._dialogDataToken, useValue: config.data },\r\n            { provide: this._dialogRefConstructor, useValue: dialogRef }\r\n        ];\r\n        if (config.direction && (!userInjector ||\r\n            !userInjector.get(Directionality, null, InjectFlags.Optional))) {\r\n            providers.push({\r\n                provide: Directionality,\r\n                useValue: { value: config.direction, change: of() }\r\n            });\r\n        }\r\n        return Injector.create({ parent: userInjector || this._injector, providers });\r\n    }\r\n    /**\r\n     * Removes a dialog from the array of open dialogs.\r\n     * @param dialogRef Dialog to be removed.\r\n     */\r\n    _removeOpenDialog(dialogRef) {\r\n        const index = this.openDialogs.indexOf(dialogRef);\r\n        if (index > -1) {\r\n            this.openDialogs.splice(index, 1);\r\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n            // to a the siblings and emit to the `afterAllClosed` stream.\r\n            if (!this.openDialogs.length) {\r\n                this._ariaHiddenElements.forEach((previousValue, element) => {\r\n                    if (previousValue) {\r\n                        element.setAttribute('aria-hidden', previousValue);\r\n                    }\r\n                    else {\r\n                        element.removeAttribute('aria-hidden');\r\n                    }\r\n                });\r\n                this._ariaHiddenElements.clear();\r\n                this._getAfterAllClosed().next();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     */\r\n    _hideNonDialogContentFromAssistiveTechnology() {\r\n        const overlayContainer = this._overlayContainer.getContainerElement();\r\n        // Ensure that the overlay container is attached to the DOM.\r\n        if (overlayContainer.parentElement) {\r\n            const siblings = overlayContainer.parentElement.children;\r\n            for (let i = siblings.length - 1; i > -1; i--) {\r\n                let sibling = siblings[i];\r\n                if (sibling !== overlayContainer &&\r\n                    sibling.nodeName !== 'SCRIPT' &&\r\n                    sibling.nodeName !== 'STYLE' &&\r\n                    !sibling.hasAttribute('aria-live')) {\r\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n                    sibling.setAttribute('aria-hidden', 'true');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** Closes all of the dialogs in an array. */\r\n    _closeDialogs(dialogs) {\r\n        let i = dialogs.length;\r\n        while (i--) {\r\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n            // runs on the next microtask, in addition to modifying the array as we're going\r\n            // through it. We loop through all of them and call close without assuming that\r\n            // they'll be removed from the list instantaneously.\r\n            dialogs[i].close();\r\n        }\r\n    }\r\n}\r\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) { return new (t || _MatDialogBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OverlayContainer), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.InjectionToken)); };\r\n_MatDialogBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatDialogBase });\r\n_MatDialogBase.ctorParameters = () => [\r\n    { type: Overlay },\r\n    { type: Injector },\r\n    { type: undefined },\r\n    { type: undefined },\r\n    { type: OverlayContainer },\r\n    { type: undefined },\r\n    { type: Type },\r\n    { type: Type },\r\n    { type: InjectionToken }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatDialogBase, [{\r\n        type: Directive\r\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: undefined }, { type: undefined }, { type: ɵngcc3.OverlayContainer }, { type: undefined }, { type: ɵngcc0.Type }, { type: ɵngcc0.Type }, { type: ɵngcc0.InjectionToken }]; }, null); })();\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\nclass MatDialog extends _MatDialogBase {\r\n    constructor(overlay, injector, \r\n    /**\r\n     * @deprecated `_location` parameter to be removed.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer) {\r\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA);\r\n    }\r\n}\r\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\r\nMatDialog.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\r\nMatDialog.ctorParameters = () => [\r\n    { type: Overlay },\r\n    { type: Injector },\r\n    { type: Location, decorators: [{ type: Optional }] },\r\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\r\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n    { type: OverlayContainer }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialog, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\r\n                type: Optional\r\n            }] }, { type: MatDialogConfig, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\r\n            }] }, { type: MatDialog, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param config Config to be modified.\r\n * @param defaultOptions Default options provided.\r\n * @returns The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(config, defaultOptions) {\r\n    return Object.assign(Object.assign({}, defaultOptions), config);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Counter used to generate unique IDs for dialog elements. */\r\nlet dialogElementUid = 0;\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\nclass MatDialogClose {\r\n    constructor(\r\n    /**\r\n     * Reference to the containing dialog.\r\n     * @deprecated `dialogRef` property to become private.\r\n     * @breaking-change 13.0.0\r\n     */\r\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    dialogRef, _elementRef, _dialog) {\r\n        this.dialogRef = dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        /** Default to \"button\" to prevents accidental form submits. */\r\n        this.type = 'button';\r\n    }\r\n    ngOnInit() {\r\n        if (!this.dialogRef) {\r\n            // When this directive is included in a dialog via TemplateRef (rather than being\r\n            // in a Component), the DialogRef isn't available via injection because embedded\r\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n            // be resolved at constructor time.\r\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\r\n        if (proxiedChange) {\r\n            this.dialogResult = proxiedChange.currentValue;\r\n        }\r\n    }\r\n    _onButtonClick(event) {\r\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\r\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\r\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\r\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\r\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\r\n    }\r\n}\r\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\r\nMatDialogClose.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\r\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nMatDialogClose.ctorParameters = () => [\r\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\r\n    { type: ElementRef },\r\n    { type: MatDialog }\r\n];\r\nMatDialogClose.propDecorators = {\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    type: [{ type: Input }],\r\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\r\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[mat-dialog-close], [matDialogClose]',\r\n                exportAs: 'matDialogClose',\r\n                host: {\r\n                    '(click)': '_onButtonClick($event)',\r\n                    '[attr.aria-label]': 'ariaLabel || null',\r\n                    '[attr.type]': 'type'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: MatDialogRef, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\r\n            type: Input\r\n        }], dialogResult: [{\r\n            type: Input,\r\n            args: ['mat-dialog-close']\r\n        }], ariaLabel: [{\r\n            type: Input,\r\n            args: ['aria-label']\r\n        }], _matDialogClose: [{\r\n            type: Input,\r\n            args: ['matDialogClose']\r\n        }] }); })();\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\nclass MatDialogTitle {\r\n    constructor(\r\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\r\n    // tslint:disable-next-line: lightweight-tokens\r\n    _dialogRef, _elementRef, _dialog) {\r\n        this._dialogRef = _dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\r\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\r\n    }\r\n    ngOnInit() {\r\n        if (!this._dialogRef) {\r\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\r\n        }\r\n        if (this._dialogRef) {\r\n            Promise.resolve().then(() => {\r\n                const container = this._dialogRef._containerInstance;\r\n                if (container && !container._ariaLabelledBy) {\r\n                    container._ariaLabelledBy = this.id;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\r\nMatDialogTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\r\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\r\nMatDialogTitle.ctorParameters = () => [\r\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\r\n    { type: ElementRef },\r\n    { type: MatDialog }\r\n];\r\nMatDialogTitle.propDecorators = {\r\n    id: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[mat-dialog-title], [matDialogTitle]',\r\n                exportAs: 'matDialogTitle',\r\n                host: {\r\n                    'class': 'mat-dialog-title',\r\n                    '[id]': 'id'\r\n                }\r\n            }]\r\n    }], function () { return [{ type: MatDialogRef, decorators: [{\r\n                type: Optional\r\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\r\n            type: Input\r\n        }] }); })();\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\nclass MatDialogContent {\r\n}\r\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\r\nMatDialogContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\r\n                host: { 'class': 'mat-dialog-content' }\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\nclass MatDialogActions {\r\n}\r\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\r\nMatDialogActions.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\r\n                host: { 'class': 'mat-dialog-actions' }\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param element Element relative to which to look for a dialog.\r\n * @param openDialogs References to the currently-open dialogs.\r\n */\r\nfunction getClosestDialog(element, openDialogs) {\r\n    let parent = element.nativeElement.parentElement;\r\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n        parent = parent.parentElement;\r\n    }\r\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatDialogModule {\r\n}\r\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); };\r\nMatDialogModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\r\nMatDialogModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\r\n        MatDialog,\r\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n    ], imports: [[\r\n            OverlayModule,\r\n            PortalModule,\r\n            MatCommonModule,\r\n        ], MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [\r\n                    OverlayModule,\r\n                    PortalModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [\r\n                    MatDialogContainer,\r\n                    MatDialogClose,\r\n                    MatDialogTitle,\r\n                    MatDialogContent,\r\n                    MatDialogActions,\r\n                    MatCommonModule,\r\n                ],\r\n                declarations: [\r\n                    MatDialogContainer,\r\n                    MatDialogClose,\r\n                    MatDialogTitle,\r\n                    MatDialogActions,\r\n                    MatDialogContent,\r\n                ],\r\n                providers: [\r\n                    MatDialog,\r\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n                ],\r\n                entryComponents: [MatDialogContainer]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\r\n        PortalModule,\r\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\r\n\r\n//# sourceMappingURL=dialog.js.map","import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Base reference size of the spinner.\r\n * @docs-private\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/platform';\r\nimport * as ɵngcc2 from '@angular/common';\r\n\r\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\r\n} }\r\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\r\n} }\r\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\r\n} }\r\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵnamespaceSVG();\r\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\r\n} if (rf & 2) {\r\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\r\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\r\n} }\r\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\r\nconst BASE_SIZE = 100;\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * @docs-private\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/** @docs-private */\r\nconst _MatProgressSpinnerBase = mixinColor(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}, 'primary');\r\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\r\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\r\n    return { diameter: BASE_SIZE };\r\n}\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/components/issues/8984\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\r\n    constructor(elementRef, platform, _document, animationMode, defaults) {\r\n        super(elementRef);\r\n        this._document = _document;\r\n        this._diameter = BASE_SIZE;\r\n        this._value = 0;\r\n        this._fallbackAnimation = false;\r\n        /** Mode of the progress circle */\r\n        this.mode = 'determinate';\r\n        const trackedDiameters = MatProgressSpinner._diameters;\r\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\r\n        // The base size is already inserted via the component's structural styles. We still\r\n        // need to track it so we don't end up adding the same styles again.\r\n        if (!trackedDiameters.has(_document.head)) {\r\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\r\n        }\r\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\r\n            (!!defaults && !defaults._forceAnimations);\r\n        if (defaults) {\r\n            if (defaults.diameter) {\r\n                this.diameter = defaults.diameter;\r\n            }\r\n            if (defaults.strokeWidth) {\r\n                this.strokeWidth = defaults.strokeWidth;\r\n            }\r\n        }\r\n    }\r\n    /** The diameter of the progress spinner (will set width and height of svg). */\r\n    get diameter() { return this._diameter; }\r\n    set diameter(size) {\r\n        this._diameter = coerceNumberProperty(size);\r\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\r\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\r\n        if (!this._fallbackAnimation && this._styleRoot) {\r\n            this._attachStyleNode();\r\n        }\r\n    }\r\n    /** Stroke width of the progress spinner. */\r\n    get strokeWidth() {\r\n        return this._strokeWidth || this.diameter / 10;\r\n    }\r\n    set strokeWidth(value) {\r\n        this._strokeWidth = coerceNumberProperty(value);\r\n    }\r\n    /** Value of the progress circle. */\r\n    get value() {\r\n        return this.mode === 'determinate' ? this._value : 0;\r\n    }\r\n    set value(newValue) {\r\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n    }\r\n    ngOnInit() {\r\n        const element = this._elementRef.nativeElement;\r\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\r\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\r\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\r\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\r\n        this._attachStyleNode();\r\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n        // reliably so we fall back to a non-spec animation.\r\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n        element.classList.add(animationClass);\r\n    }\r\n    /** The radius of the spinner, adjusted for stroke width. */\r\n    _getCircleRadius() {\r\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n    }\r\n    /** The view box of the spinner's svg element. */\r\n    _getViewBox() {\r\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\r\n        return `0 0 ${viewBox} ${viewBox}`;\r\n    }\r\n    /** The stroke circumference of the svg circle. */\r\n    _getStrokeCircumference() {\r\n        return 2 * Math.PI * this._getCircleRadius();\r\n    }\r\n    /** The dash offset of the svg circle. */\r\n    _getStrokeDashOffset() {\r\n        if (this.mode === 'determinate') {\r\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\r\n        }\r\n        // In fallback mode set the circle to 80% and rotate it with CSS.\r\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n            return this._getStrokeCircumference() * 0.2;\r\n        }\r\n        return null;\r\n    }\r\n    /** Stroke width of the circle in percent. */\r\n    _getCircleStrokeWidth() {\r\n        return this.strokeWidth / this.diameter * 100;\r\n    }\r\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\r\n    _attachStyleNode() {\r\n        const styleRoot = this._styleRoot;\r\n        const currentDiameter = this._diameter;\r\n        const diameters = MatProgressSpinner._diameters;\r\n        let diametersForElement = diameters.get(styleRoot);\r\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\r\n            const styleTag = this._document.createElement('style');\r\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\r\n            styleTag.textContent = this._getAnimationText();\r\n            styleRoot.appendChild(styleTag);\r\n            if (!diametersForElement) {\r\n                diametersForElement = new Set();\r\n                diameters.set(styleRoot, diametersForElement);\r\n            }\r\n            diametersForElement.add(currentDiameter);\r\n        }\r\n    }\r\n    /** Generates animation styles adjusted for the spinner's diameter. */\r\n    _getAnimationText() {\r\n        const strokeCircumference = this._getStrokeCircumference();\r\n        return INDETERMINATE_ANIMATION_TEMPLATE\r\n            // Animation should begin at 5% and end at 80%\r\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\r\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\r\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\r\n    }\r\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\r\n    _getSpinnerAnimationLabel() {\r\n        // The string of a float point number will include a period ‘.’ character,\r\n        // which is not valid for a CSS animation-name.\r\n        return this.diameter.toString().replace('.', '_');\r\n    }\r\n}\r\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\r\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\r\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵnamespaceSVG();\r\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\r\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\r\n/**\r\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\r\n * We need to keep track of which elements the diameters were attached to, because for\r\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\r\n * than the document head.\r\n */\r\nMatProgressSpinner._diameters = new WeakMap();\r\nMatProgressSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\nMatProgressSpinner.propDecorators = {\r\n    diameter: [{ type: Input }],\r\n    strokeWidth: [{ type: Input }],\r\n    mode: [{ type: Input }],\r\n    value: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-progress-spinner',\r\n                exportAs: 'matProgressSpinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'class': 'mat-progress-spinner',\r\n                    // set tab index to -1 so screen readers will read the aria-label\r\n                    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\r\n                    'tabindex': '-1',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter',\r\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\r\n                    '[attr.mode]': 'mode'\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\r\n            }] }]; }, { mode: [{\r\n            type: Input\r\n        }], diameter: [{\r\n            type: Input\r\n        }], strokeWidth: [{\r\n            type: Input\r\n        }], value: [{\r\n            type: Input\r\n        }] }); })();\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\nclass MatSpinner extends MatProgressSpinner {\r\n    constructor(elementRef, platform, document, animationMode, defaults) {\r\n        super(elementRef, platform, document, animationMode, defaults);\r\n        this.mode = 'indeterminate';\r\n    }\r\n}\r\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\r\nMatSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\r\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵnamespaceSVG();\r\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\r\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\r\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\r\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\r\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\r\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\r\nMatSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-spinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'mode': 'indeterminate',\r\n                    'class': 'mat-spinner mat-progress-spinner',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter'\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatProgressSpinnerModule {\r\n}\r\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\r\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\r\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [MatCommonModule, CommonModule],\r\n                exports: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\r\n\r\n//# sourceMappingURL=progress-spinner.js.map"]}