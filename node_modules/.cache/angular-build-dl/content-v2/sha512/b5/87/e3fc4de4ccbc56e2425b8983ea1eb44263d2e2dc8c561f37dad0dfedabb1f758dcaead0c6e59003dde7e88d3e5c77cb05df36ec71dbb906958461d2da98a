{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAgJ;AAC3E;AACP;AACjB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAO;AACxC;AACA,wCAAwC,yCAAO;AAC/C;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,sBAAsB,eAAe,4EAAqB,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF,kCAAkC,+DAAwB,EAAE,wFAAwF,iBAAiB,yCAAyC,gEAAyB,GAAG,oDAAoD,IAAI,kEAA2B,GAAG;AAChU;AACA,aAAa,OAAO,gDAAK,EAAE;AAC3B;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,6BAA6B,oDAAoD;AACjF,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,gDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oDAAkB;AAC3D;AACA,0BAA0B,uDAAY;AACtC;AACA,0BAA0B,uDAAY;AACtC;AACA,6BAA6B,uDAAY;AACzC;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAY;AAC9C;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA,mBAAmB,4EAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,4CAA4C,+DAAwB,CAAC,sDAAkB,GAAG;AACxK,8CAA8C,+DAAwB,EAAE,+FAA+F;AACvK;AACA,KAAK,OAAO,sDAAW;AACvB;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,sDAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yDAAc;AAC9D;AACA;AACA;AACA;AACA;AACA,gCAAgC,oEAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAY;AAC3C;AACA,iCAAiC,uDAAY;AAC7C;AACA,iCAAiC,yCAAO;AACxC;AACA,uDAAuD,WAAW;AAClE;AACA,sCAAsC,yCAAO;AAC7C;AACA;AACA;AACA;AACA,qCAAqC,oEAAoB;AACzD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAS,QAAQ,sDAAM,wCAAwC,oDAAI;AAChG,mCAAmC,+DAAc;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,qBAAqB,+DAAwB,CAAC,4DAAwB,GAAG,+DAAwB,CAAC,gFAAgC,GAAG,+DAAwB,CAAC,2DAAuB,GAAG,+DAAwB,CAAC,sDAAQ,GAAG,+DAAwB,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AG;AACnB,sBAAsB,iDAAM;AAC5B;AACA,aAAa;AACb,sBAAsB,mDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,oDAAS;AAC3B;AACA,SAAS,GAAG,EAAE,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA,kFAAkF,gDAAgD;AAClI,gDAAgD,+DAAwB,EAAE,sGAAsG;AAChL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,sEAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAkB;AAC3D;AACA,+CAA+C,sDAAM;AACrD,YAAY,wCAAK;AACjB;AACA;AACA;AACA;AACA,YAAY,4CAAK,iFAAiF,sDAAM;AACxG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB,sDAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAK;AACtB,iBAAiB,yDAAK;AACtB,qBAAqB,sEAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_expansion_js-es2015.js","sourcesContent":["import { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Subject, Subscription } from 'rxjs';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Used to generate unique ID for each accordion. */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/collections';\r\nlet nextId$1 = 0;\r\n/**\r\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\r\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\nclass CdkAccordion {\r\n    constructor() {\r\n        /** Emits when the state of the accordion changes */\r\n        this._stateChanges = new Subject();\r\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\r\n        this._openCloseAllActions = new Subject();\r\n        /** A readonly id value to use for unique selection coordination. */\r\n        this.id = `cdk-accordion-${nextId$1++}`;\r\n        this._multi = false;\r\n    }\r\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\r\n    get multi() { return this._multi; }\r\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\r\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\r\n    openAll() {\r\n        if (this._multi) {\r\n            this._openCloseAllActions.next(true);\r\n        }\r\n    }\r\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\r\n    closeAll() {\r\n        this._openCloseAllActions.next(false);\r\n    }\r\n    ngOnChanges(changes) {\r\n        this._stateChanges.next(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n        this._openCloseAllActions.complete();\r\n    }\r\n}\r\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\r\nCdkAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]), ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkAccordion.propDecorators = {\r\n    multi: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-accordion, [cdkAccordion]',\r\n                exportAs: 'cdkAccordion',\r\n                providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]\r\n            }]\r\n    }], function () { return []; }, { multi: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Used to generate unique ID for each accordion item. */\r\nlet nextId = 0;\r\nconst ɵ0 = undefined;\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\nclass CdkAccordionItem {\r\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\r\n        this.accordion = accordion;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._expansionDispatcher = _expansionDispatcher;\r\n        /** Subscription to openAll/closeAll events. */\r\n        this._openCloseAllSubscription = Subscription.EMPTY;\r\n        /** Event emitted every time the AccordionItem is closed. */\r\n        this.closed = new EventEmitter();\r\n        /** Event emitted every time the AccordionItem is opened. */\r\n        this.opened = new EventEmitter();\r\n        /** Event emitted when the AccordionItem is destroyed. */\r\n        this.destroyed = new EventEmitter();\r\n        /**\r\n         * Emits whenever the expanded state of the accordion changes.\r\n         * Primarily used to facilitate two-way binding.\r\n         * @docs-private\r\n         */\r\n        this.expandedChange = new EventEmitter();\r\n        /** The unique AccordionItem id. */\r\n        this.id = `cdk-accordion-child-${nextId++}`;\r\n        this._expanded = false;\r\n        this._disabled = false;\r\n        /** Unregister function for _expansionDispatcher. */\r\n        this._removeUniqueSelectionListener = () => { };\r\n        this._removeUniqueSelectionListener =\r\n            _expansionDispatcher.listen((id, accordionId) => {\r\n                if (this.accordion && !this.accordion.multi &&\r\n                    this.accordion.id === accordionId && this.id !== id) {\r\n                    this.expanded = false;\r\n                }\r\n            });\r\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\r\n        if (this.accordion) {\r\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\r\n        }\r\n    }\r\n    /** Whether the AccordionItem is expanded. */\r\n    get expanded() { return this._expanded; }\r\n    set expanded(expanded) {\r\n        expanded = coerceBooleanProperty(expanded);\r\n        // Only emit events and update the internal value if the value changes.\r\n        if (this._expanded !== expanded) {\r\n            this._expanded = expanded;\r\n            this.expandedChange.emit(expanded);\r\n            if (expanded) {\r\n                this.opened.emit();\r\n                /**\r\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\r\n                 * the name value is the id of the accordion.\r\n                 */\r\n                const accordionId = this.accordion ? this.accordion.id : this.id;\r\n                this._expansionDispatcher.notify(this.id, accordionId);\r\n            }\r\n            else {\r\n                this.closed.emit();\r\n            }\r\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n            // This includes cases like the open, close and toggle methods.\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /** Whether the AccordionItem is disabled. */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\r\n    /** Emits an event for the accordion item being destroyed. */\r\n    ngOnDestroy() {\r\n        this.opened.complete();\r\n        this.closed.complete();\r\n        this.destroyed.emit();\r\n        this.destroyed.complete();\r\n        this._removeUniqueSelectionListener();\r\n        this._openCloseAllSubscription.unsubscribe();\r\n    }\r\n    /** Toggles the expanded state of the accordion item. */\r\n    toggle() {\r\n        if (!this.disabled) {\r\n            this.expanded = !this.expanded;\r\n        }\r\n    }\r\n    /** Sets the expanded state of the accordion item to false. */\r\n    close() {\r\n        if (!this.disabled) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n    /** Sets the expanded state of the accordion item to true. */\r\n    open() {\r\n        if (!this.disabled) {\r\n            this.expanded = true;\r\n        }\r\n    }\r\n    _subscribeToOpenCloseAllActions() {\r\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\r\n            // Only change expanded state if item is enabled\r\n            if (!this.disabled) {\r\n                this.expanded = expanded;\r\n            }\r\n        });\r\n    }\r\n}\r\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\r\nCdkAccordionItem.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\r\n            // registering to the same accordion.\r\n            { provide: CDK_ACCORDION, useValue: ɵ0 },\r\n        ])] });\r\nCdkAccordionItem.ctorParameters = () => [\r\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: Inject, args: [CDK_ACCORDION,] }, { type: SkipSelf }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: UniqueSelectionDispatcher }\r\n];\r\nCdkAccordionItem.propDecorators = {\r\n    closed: [{ type: Output }],\r\n    opened: [{ type: Output }],\r\n    destroyed: [{ type: Output }],\r\n    expandedChange: [{ type: Output }],\r\n    expanded: [{ type: Input }],\r\n    disabled: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\r\n                exportAs: 'cdkAccordionItem',\r\n                providers: [\r\n                    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\r\n                    // registering to the same accordion.\r\n                    { provide: CDK_ACCORDION, useValue: ɵ0 },\r\n                ]\r\n            }]\r\n    }], function () { return [{ type: CdkAccordion, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [CDK_ACCORDION]\r\n            }, {\r\n                type: SkipSelf\r\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\r\n            type: Output\r\n        }], opened: [{\r\n            type: Output\r\n        }], destroyed: [{\r\n            type: Output\r\n        }], expandedChange: [{\r\n            type: Output\r\n        }], expanded: [{\r\n            type: Input\r\n        }], disabled: [{\r\n            type: Input\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass CdkAccordionModule {\r\n}\r\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); };\r\nCdkAccordionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\r\nCdkAccordionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                exports: [CdkAccordion, CdkAccordionItem],\r\n                declarations: [CdkAccordion, CdkAccordionItem]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a };\r\n\r\n//# sourceMappingURL=accordion.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\r\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\r\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\r\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\r\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\r\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\r\nimport * as ɵngcc1 from '@angular/cdk/collections';\r\nimport * as ɵngcc2 from '@angular/cdk/portal';\r\nimport * as ɵngcc3 from '@angular/cdk/a11y';\r\nimport * as ɵngcc4 from '@angular/common';\r\n\r\nconst _c0 = [\"body\"];\r\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\r\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\r\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\r\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\r\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\r\n} if (rf & 2) {\r\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\r\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\r\n} }\r\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\r\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\r\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Time and timing curve for expansion panel animations. */\r\n// Note: Keep this in sync with the Sass variable for the panel header animation.\r\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\r\n/**\r\n * Animations used by the Material expansion panel.\r\n *\r\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\r\n * causes the animation state of moved components to become `void` upon exit, and not update again\r\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\r\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\r\n *\r\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\r\n * are defined to have the same styles. Since angular animates from the current styles to the\r\n * destination state's style definition, in situations where we are moving from `void`'s styles to\r\n * `collapsed` this acts a noop since no style values change.\r\n *\r\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\r\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\r\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\r\n * occur as expected.\r\n *\r\n * Angular Bug: https://github.com/angular/angular/issues/18847\r\n *\r\n * @docs-private\r\n */\r\nconst matExpansionAnimations = {\r\n    /** Animation that rotates the indicator arrow. */\r\n    indicatorRotate: trigger('indicatorRotate', [\r\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\r\n        state('expanded', style({ transform: 'rotate(180deg)' })),\r\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ]),\r\n    /** Animation that expands and collapses the panel content. */\r\n    bodyExpansion: trigger('bodyExpansion', [\r\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\r\n        state('expanded', style({ height: '*', visibility: 'visible' })),\r\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\r\n    ])\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Expansion panel content that will be rendered lazily\r\n * after the panel is opened for the first time.\r\n */\r\nclass MatExpansionPanelContent {\r\n    constructor(_template) {\r\n        this._template = _template;\r\n    }\r\n}\r\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\r\nMatExpansionPanelContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\r\nMatExpansionPanelContent.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'ng-template[matExpansionPanelContent]'\r\n            }]\r\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Counter for generating unique element ids. */\r\nlet uniqueId = 0;\r\n/**\r\n * Injection token that can be used to configure the default\r\n * options for the expansion panel component.\r\n */\r\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\r\nconst ɵ0 = undefined;\r\n/**\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MatAccordion directive attached.\r\n */\r\nclass MatExpansionPanel extends CdkAccordionItem {\r\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\r\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._animationMode = _animationMode;\r\n        this._hideToggle = false;\r\n        /** An event emitted after the body's expansion animation happens. */\r\n        this.afterExpand = new EventEmitter();\r\n        /** An event emitted after the body's collapse animation happens. */\r\n        this.afterCollapse = new EventEmitter();\r\n        /** Stream that emits for changes in `@Input` properties. */\r\n        this._inputChanges = new Subject();\r\n        /** ID for the associated header element. Used for a11y labelling. */\r\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\r\n        /** Stream of body animation done events. */\r\n        this._bodyAnimationDone = new Subject();\r\n        this.accordion = accordion;\r\n        this._document = _document;\r\n        // We need a Subject with distinctUntilChanged, because the `done` event\r\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\r\n        this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\r\n            return x.fromState === y.fromState && x.toState === y.toState;\r\n        })).subscribe(event => {\r\n            if (event.fromState !== 'void') {\r\n                if (event.toState === 'expanded') {\r\n                    this.afterExpand.emit();\r\n                }\r\n                else if (event.toState === 'collapsed') {\r\n                    this.afterCollapse.emit();\r\n                }\r\n            }\r\n        });\r\n        if (defaultOptions) {\r\n            this.hideToggle = defaultOptions.hideToggle;\r\n        }\r\n    }\r\n    /** Whether the toggle indicator should be hidden. */\r\n    get hideToggle() {\r\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\r\n    }\r\n    set hideToggle(value) {\r\n        this._hideToggle = coerceBooleanProperty(value);\r\n    }\r\n    /** The position of the expansion indicator. */\r\n    get togglePosition() {\r\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\r\n    }\r\n    set togglePosition(value) {\r\n        this._togglePosition = value;\r\n    }\r\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n    _hasSpacing() {\r\n        if (this.accordion) {\r\n            return this.expanded && this.accordion.displayMode === 'default';\r\n        }\r\n        return false;\r\n    }\r\n    /** Gets the expanded state string. */\r\n    _getExpandedState() {\r\n        return this.expanded ? 'expanded' : 'collapsed';\r\n    }\r\n    /** Toggles the expanded state of the expansion panel. */\r\n    toggle() {\r\n        this.expanded = !this.expanded;\r\n    }\r\n    /** Sets the expanded state of the expansion panel to false. */\r\n    close() {\r\n        this.expanded = false;\r\n    }\r\n    /** Sets the expanded state of the expansion panel to true. */\r\n    open() {\r\n        this.expanded = true;\r\n    }\r\n    ngAfterContentInit() {\r\n        if (this._lazyContent) {\r\n            // Render the content as soon as the panel becomes open.\r\n            this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\r\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\r\n            });\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        this._inputChanges.next(changes);\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this._bodyAnimationDone.complete();\r\n        this._inputChanges.complete();\r\n    }\r\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\r\n    _containsFocus() {\r\n        if (this._body) {\r\n            const focusedElement = this._document.activeElement;\r\n            const bodyElement = this._body.nativeElement;\r\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\r\n        }\r\n        return false;\r\n    }\r\n}\r\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\r\nMatExpansionPanel.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\r\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\r\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\r\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\r\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\r\n            // to the same accordion.\r\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\r\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c1);\r\n        ɵngcc0.ɵɵprojection(0);\r\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\r\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\r\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\r\n        ɵngcc0.ɵɵprojection(4, 1);\r\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵprojection(6, 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(1);\r\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\r\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\r\n        ɵngcc0.ɵɵadvance(4);\r\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\r\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\r\nMatExpansionPanel.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: UniqueSelectionDispatcher },\r\n    { type: ViewContainerRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\r\n];\r\nMatExpansionPanel.propDecorators = {\r\n    hideToggle: [{ type: Input }],\r\n    togglePosition: [{ type: Input }],\r\n    afterExpand: [{ type: Output }],\r\n    afterCollapse: [{ type: Output }],\r\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\r\n    _body: [{ type: ViewChild, args: ['body',] }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-expansion-panel',\r\n                exportAs: 'matExpansionPanel',\r\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                inputs: ['disabled', 'expanded'],\r\n                outputs: ['opened', 'closed', 'expandedChange'],\r\n                animations: [matExpansionAnimations.bodyExpansion],\r\n                providers: [\r\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\r\n                    // to the same accordion.\r\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\r\n                ],\r\n                host: {\r\n                    'class': 'mat-expansion-panel',\r\n                    '[class.mat-expanded]': 'expanded',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\r\n                },\r\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: SkipSelf\r\n            }, {\r\n                type: Inject,\r\n                args: [MAT_ACCORDION]\r\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\r\n            }, {\r\n                type: Optional\r\n            }] }]; }, { afterExpand: [{\r\n            type: Output\r\n        }], afterCollapse: [{\r\n            type: Output\r\n        }], hideToggle: [{\r\n            type: Input\r\n        }], togglePosition: [{\r\n            type: Input\r\n        }], _lazyContent: [{\r\n            type: ContentChild,\r\n            args: [MatExpansionPanelContent]\r\n        }], _body: [{\r\n            type: ViewChild,\r\n            args: ['body']\r\n        }] }); })();\r\n/**\r\n * Actions of a `<mat-expansion-panel>`.\r\n */\r\nclass MatExpansionPanelActionRow {\r\n}\r\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\r\nMatExpansionPanelActionRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-action-row',\r\n                host: {\r\n                    class: 'mat-action-row'\r\n                }\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\r\n/** @docs-private */\r\nclass MatExpansionPanelHeaderBase {\r\n}\r\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\r\n/**\r\n * Header element of a `<mat-expansion-panel>`.\r\n */\r\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\r\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\r\n        super();\r\n        this.panel = panel;\r\n        this._element = _element;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._animationMode = _animationMode;\r\n        this._parentChangeSubscription = Subscription.EMPTY;\r\n        const accordionHideToggleChange = panel.accordion ?\r\n            panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\r\n            EMPTY;\r\n        this.tabIndex = parseInt(tabIndex || '') || 0;\r\n        // Since the toggle state depends on an @Input on the panel, we\r\n        // need to subscribe and trigger change detection manually.\r\n        this._parentChangeSubscription =\r\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\r\n                return !!(changes['hideToggle'] ||\r\n                    changes['disabled'] ||\r\n                    changes['togglePosition']);\r\n            })))\r\n                .subscribe(() => this._changeDetectorRef.markForCheck());\r\n        // Avoids focus being lost if the panel contained the focused element and was closed.\r\n        panel.closed\r\n            .pipe(filter(() => panel._containsFocus()))\r\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\r\n        if (defaultOptions) {\r\n            this.expandedHeight = defaultOptions.expandedHeight;\r\n            this.collapsedHeight = defaultOptions.collapsedHeight;\r\n        }\r\n    }\r\n    /**\r\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\r\n     * @docs-private\r\n     */\r\n    get disabled() {\r\n        return this.panel.disabled;\r\n    }\r\n    /** Toggles the expanded state of the panel. */\r\n    _toggle() {\r\n        if (!this.disabled) {\r\n            this.panel.toggle();\r\n        }\r\n    }\r\n    /** Gets whether the panel is expanded. */\r\n    _isExpanded() {\r\n        return this.panel.expanded;\r\n    }\r\n    /** Gets the expanded state string of the panel. */\r\n    _getExpandedState() {\r\n        return this.panel._getExpandedState();\r\n    }\r\n    /** Gets the panel id. */\r\n    _getPanelId() {\r\n        return this.panel.id;\r\n    }\r\n    /** Gets the toggle position for the header. */\r\n    _getTogglePosition() {\r\n        return this.panel.togglePosition;\r\n    }\r\n    /** Gets whether the expand indicator should be shown. */\r\n    _showToggle() {\r\n        return !this.panel.hideToggle && !this.panel.disabled;\r\n    }\r\n    /**\r\n     * Gets the current height of the header. Null if no custom height has been\r\n     * specified, and if the default height from the stylesheet should be used.\r\n     */\r\n    _getHeaderHeight() {\r\n        const isExpanded = this._isExpanded();\r\n        if (isExpanded && this.expandedHeight) {\r\n            return this.expandedHeight;\r\n        }\r\n        else if (!isExpanded && this.collapsedHeight) {\r\n            return this.collapsedHeight;\r\n        }\r\n        return null;\r\n    }\r\n    /** Handle keydown event calling to toggle() if appropriate. */\r\n    _keydown(event) {\r\n        switch (event.keyCode) {\r\n            // Toggle for space and enter keys.\r\n            case SPACE:\r\n            case ENTER:\r\n                if (!hasModifierKey(event)) {\r\n                    event.preventDefault();\r\n                    this._toggle();\r\n                }\r\n                break;\r\n            default:\r\n                if (this.panel.accordion) {\r\n                    this.panel.accordion._handleHeaderKeydown(event);\r\n                }\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\r\n     * @param origin Origin of the action that triggered the focus.\r\n     * @docs-private\r\n     */\r\n    focus(origin, options) {\r\n        if (origin) {\r\n            this._focusMonitor.focusVia(this._element, origin, options);\r\n        }\r\n        else {\r\n            this._element.nativeElement.focus(options);\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\r\n            if (origin && this.panel.accordion) {\r\n                this.panel.accordion._handleHeaderFocus(this);\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._parentChangeSubscription.unsubscribe();\r\n        this._focusMonitor.stopMonitoring(this._element);\r\n    }\r\n}\r\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\r\nMatExpansionPanelHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\r\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\r\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\r\n    } }, inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\r\n        ɵngcc0.ɵɵprojectionDef(_c3);\r\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\r\n        ɵngcc0.ɵɵprojection(1);\r\n        ɵngcc0.ɵɵprojection(2, 1);\r\n        ɵngcc0.ɵɵprojection(3, 2);\r\n        ɵngcc0.ɵɵelementEnd();\r\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\r\n    } if (rf & 2) {\r\n        ɵngcc0.ɵɵadvance(4);\r\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\r\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"], encapsulation: 2, data: { animation: [\r\n            matExpansionAnimations.indicatorRotate,\r\n        ] }, changeDetection: 0 });\r\nMatExpansionPanelHeader.ctorParameters = () => [\r\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\r\n    { type: ElementRef },\r\n    { type: FocusMonitor },\r\n    { type: ChangeDetectorRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatExpansionPanelHeader.propDecorators = {\r\n    expandedHeight: [{ type: Input }],\r\n    collapsedHeight: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'mat-expansion-panel-header',\r\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                inputs: ['tabIndex'],\r\n                animations: [\r\n                    matExpansionAnimations.indicatorRotate,\r\n                ],\r\n                host: {\r\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\r\n                    'role': 'button',\r\n                    '[attr.id]': 'panel._headerId',\r\n                    '[attr.tabindex]': 'tabIndex',\r\n                    '[attr.aria-controls]': '_getPanelId()',\r\n                    '[attr.aria-expanded]': '_isExpanded()',\r\n                    '[attr.aria-disabled]': 'panel.disabled',\r\n                    '[class.mat-expanded]': '_isExpanded()',\r\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\r\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    '[style.height]': '_getHeaderHeight()',\r\n                    '(click)': '_toggle()',\r\n                    '(keydown)': '_keydown($event)'\r\n                },\r\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"]\r\n            }]\r\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\r\n                type: Host\r\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\r\n            }, {\r\n                type: Optional\r\n            }] }, { type: String, decorators: [{\r\n                type: Optional\r\n            }, {\r\n                type: Inject,\r\n                args: [ANIMATION_MODULE_TYPE]\r\n            }] }, { type: String, decorators: [{\r\n                type: Attribute,\r\n                args: ['tabindex']\r\n            }] }]; }, { expandedHeight: [{\r\n            type: Input\r\n        }], collapsedHeight: [{\r\n            type: Input\r\n        }] }); })();\r\n/**\r\n * Description element of a `<mat-expansion-panel-header>`.\r\n */\r\nclass MatExpansionPanelDescription {\r\n}\r\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\r\nMatExpansionPanelDescription.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-panel-description',\r\n                host: {\r\n                    class: 'mat-expansion-panel-header-description'\r\n                }\r\n            }]\r\n    }], null, null); })();\r\n/**\r\n * Title element of a `<mat-expansion-panel-header>`.\r\n */\r\nclass MatExpansionPanelTitle {\r\n}\r\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\r\nMatExpansionPanelTitle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-panel-title',\r\n                host: {\r\n                    class: 'mat-expansion-panel-header-title'\r\n                }\r\n            }]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Directive for a Material Design Accordion.\r\n */\r\nclass MatAccordion extends CdkAccordion {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** Headers belonging to this accordion. */\r\n        this._ownHeaders = new QueryList();\r\n        this._hideToggle = false;\r\n        /**\r\n         * Display mode used for all expansion panels in the accordion. Currently two display\r\n         * modes exist:\r\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\r\n         *     panel at a different elevation from the rest of the accordion.\r\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\r\n         *     elevation.\r\n         */\r\n        this.displayMode = 'default';\r\n        /** The position of the expansion indicator. */\r\n        this.togglePosition = 'after';\r\n    }\r\n    /** Whether the expansion indicator should be hidden. */\r\n    get hideToggle() { return this._hideToggle; }\r\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\r\n    ngAfterContentInit() {\r\n        this._headers.changes\r\n            .pipe(startWith(this._headers))\r\n            .subscribe((headers) => {\r\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\r\n            this._ownHeaders.notifyOnChanges();\r\n        });\r\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\r\n    }\r\n    /** Handles keyboard events coming in from the panel headers. */\r\n    _handleHeaderKeydown(event) {\r\n        this._keyManager.onKeydown(event);\r\n    }\r\n    _handleHeaderFocus(header) {\r\n        this._keyManager.updateActiveItem(header);\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this._ownHeaders.destroy();\r\n    }\r\n}\r\nMatAccordion.ɵfac = /*@__PURE__*/ function () { let ɵMatAccordion_BaseFactory; return function MatAccordion_Factory(t) { return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion); }; }();\r\nMatAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\r\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\r\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\r\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\r\n                provide: MAT_ACCORDION,\r\n                useExisting: MatAccordion\r\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatAccordion.propDecorators = {\r\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\r\n    hideToggle: [{ type: Input }],\r\n    displayMode: [{ type: Input }],\r\n    togglePosition: [{ type: Input }]\r\n};\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: 'mat-accordion',\r\n                exportAs: 'matAccordion',\r\n                inputs: ['multi'],\r\n                providers: [{\r\n                        provide: MAT_ACCORDION,\r\n                        useExisting: MatAccordion\r\n                    }],\r\n                host: {\r\n                    class: 'mat-accordion',\r\n                    // Class binding which is only used by the test harness as there is no other\r\n                    // way for the harness to detect if multiple panel support is enabled.\r\n                    '[class.mat-accordion-multi]': 'this.multi'\r\n                }\r\n            }]\r\n    }], null, { displayMode: [{\r\n            type: Input\r\n        }], togglePosition: [{\r\n            type: Input\r\n        }], hideToggle: [{\r\n            type: Input\r\n        }], _headers: [{\r\n            type: ContentChildren,\r\n            args: [MatExpansionPanelHeader, { descendants: true }]\r\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatExpansionModule {\r\n}\r\nMatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); };\r\nMatExpansionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\r\nMatExpansionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\r\n                exports: [\r\n                    MatAccordion,\r\n                    MatExpansionPanel,\r\n                    MatExpansionPanelActionRow,\r\n                    MatExpansionPanelHeader,\r\n                    MatExpansionPanelTitle,\r\n                    MatExpansionPanelDescription,\r\n                    MatExpansionPanelContent,\r\n                ],\r\n                declarations: [\r\n                    MatAccordion,\r\n                    MatExpansionPanel,\r\n                    MatExpansionPanelActionRow,\r\n                    MatExpansionPanelHeader,\r\n                    MatExpansionPanelTitle,\r\n                    MatExpansionPanelDescription,\r\n                    MatExpansionPanelContent,\r\n                ]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; }, imports: function () { return [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\r\n\r\n//# sourceMappingURL=expansion.js.map"],"sourceRoot":"webpack:///"}